{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport apiRequest from \"@/Servicios/HttpService\";\nimport HistorialVentas from \"../Ventas/HistorialVentas\";\nimport '@/components/stilos/detalles.css';\nimport { generateYearRange } from \"@/helpers/yearHelper\";\nimport AyudanteSesion from \"@/Servicios/AyudanteSesion\";\nexport default {\n  name: \"InicioComponent\",\n  components: {\n    HistorialVentas\n  },\n  data() {\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const currentMonth = today.getMonth();\n    return {\n      isAdmin: false,\n      historialPagos: {\n        data: [],\n        total: 0,\n        page: 1,\n        limit: 10,\n        totalPages: 0\n      },\n      productosMayoresVentas: [],\n      totalesPorMarca: [],\n      totalesPorCategoria: [],\n      productosPorMarca: [],\n      productosPorCategoria: [],\n      productosVendidos: [],\n      productosPaginacion: {\n        total: 0,\n        currentPage: 1,\n        perPage: 10,\n        totalPages: 0\n      },\n      productosVendidosPorId: [],\n      filtroProductos: {\n        id: 1,\n        type: \"sale\"\n      },\n      limite: 5,\n      cargando: {\n        pagos: false,\n        productos: false,\n        topSold: false,\n        byBrand: false,\n        byCategory: false,\n        topByBrand: false,\n        topByCategory: false,\n        byIdAndType: false,\n        cuentas: false,\n        iva: false,\n        ivaRango: false,\n        ventasUsuario: false,\n        usuarios: false,\n        cotizaciones: false,\n        ingresosDiarios: false,\n        ingresosSemanales: false // Nuevo estado de carga para ingresos semanales\n      },\n      filtroNombreProducto: \"\",\n      paginaActual: 1,\n      porPagina: 10,\n      filtroFechas: {\n        inicio: null,\n        fin: null\n      },\n      paginaActualPagos: 1,\n      porPaginaPagos: 10,\n      cuentasPorCobrar: [],\n      cuentasPaginacion: {\n        total: 0,\n        currentPage: 1,\n        perPage: 10,\n        totalPages: 0\n      },\n      paginaActualCuentas: 1,\n      porPaginaCuentas: 10,\n      filtroIVA: {\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1\n      },\n      ivaMensual: {\n        totalIVA: \"0.00\",\n        totalSales: \"0.00\"\n      },\n      filtroIVARango: {\n        startDate: null,\n        endDate: null\n      },\n      ivaRango: {\n        totalIVA: \"0.00\",\n        totalSales: \"0.00\"\n      },\n      months: [{\n        value: 1,\n        label: \"Enero\"\n      }, {\n        value: 2,\n        label: \"Febrero\"\n      }, {\n        value: 3,\n        label: \"Marzo\"\n      }, {\n        value: 4,\n        label: \"Abril\"\n      }, {\n        value: 5,\n        label: \"Mayo\"\n      }, {\n        value: 6,\n        label: \"Junio\"\n      }, {\n        value: 7,\n        label: \"Julio\"\n      }, {\n        value: 8,\n        label: \"Agosto\"\n      }, {\n        value: 9,\n        label: \"Septiembre\"\n      }, {\n        value: 10,\n        label: \"Octubre\"\n      }, {\n        value: 11,\n        label: \"Noviembre\"\n      }, {\n        value: 12,\n        label: \"Diciembre\"\n      }],\n      availableYears: generateYearRange(2000, currentYear),\n      ventasMensualesUsuario: [],\n      filtroVentasUsuario: {\n        id: 1,\n        year: new Date().getFullYear()\n      },\n      usuarios: [],\n      cotizaciones: [],\n      filtroCotizaciones: {\n        startDate: null,\n        endDate: null\n      },\n      busquedaCliente: \"\",\n      filtroEstado: \"\",\n      cuentasPorPagina: 10,\n      // Variables para ingresos diarios\n      ingresosDiarios: {\n        totalIncome: \"0.00\"\n      },\n      filtroIngresosDiarios: {\n        id: 1\n      },\n      // Nuevas variables para ingresos semanales\n      ingresosSemanales: {\n        totalIncome: \"0.00\"\n      },\n      filtroIngresosSemanales: {\n        id: 1\n      },\n      // Variables para los calendarios personalizados\n      // Calendario IVA\n      ivaFechaInicioInput: \"\",\n      ivaFechaFinInput: \"\",\n      showIvaStartCalendar: false,\n      showIvaEndCalendar: false,\n      ivaStartCalendarMonth: currentMonth,\n      ivaStartCalendarYear: currentYear,\n      ivaEndCalendarMonth: currentMonth,\n      ivaEndCalendarYear: currentYear,\n      ivaStartCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      ivaEndCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      // Calendario Cotizaciones\n      cotizacionesFechaInicioInput: \"\",\n      cotizacionesFechaFinInput: \"\",\n      showCotizacionesStartCalendar: false,\n      showCotizacionesEndCalendar: false,\n      cotizacionesStartCalendarMonth: currentMonth,\n      cotizacionesStartCalendarYear: currentYear,\n      cotizacionesEndCalendarMonth: currentMonth,\n      cotizacionesEndCalendarYear: currentYear,\n      cotizacionesStartCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      cotizacionesEndCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      // Variables comunes para los calendarios\n      diasSemana: [\"L\", \"M\", \"X\", \"J\", \"V\", \"S\", \"D\"],\n      meses: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"]\n    };\n  },\n  computed: {\n    productosPaginados() {\n      if (!this.filtroNombreProducto) {\n        return this.productosVendidos;\n      }\n      const filtro = this.filtroNombreProducto.toLowerCase();\n      return this.productosVendidos.filter(producto => producto.nombreProducto.toLowerCase().includes(filtro));\n    },\n    pagosFiltrados() {\n      if (!this.filtroFechas.inicio || !this.filtroFechas.fin) {\n        return this.historialPagos;\n      }\n      return this.historialPagos.filter(pago => {\n        const fechaPago = new Date(pago.date);\n        return fechaPago >= this.filtroFechas.inicio && fechaPago <= this.filtroFechas.fin;\n      });\n    },\n    pagosPaginados() {\n      return this.historialPagos.data || [];\n    },\n    cuentasAgrupadasPorCliente() {\n      const cuentasAgrupadas = this.cuentasPorCobrar.reduce((acc, cuenta) => {\n        const clienteId = cuenta.customer.id;\n        if (!acc[clienteId]) {\n          acc[clienteId] = {\n            id: clienteId,\n            customer: cuenta.customer,\n            cuentas: [],\n            totalAmount: 0,\n            totalPaid: 0,\n            totalToPay: 0\n          };\n        }\n        acc[clienteId].cuentas.push(cuenta);\n        acc[clienteId].totalAmount += parseFloat(cuenta.total);\n        acc[clienteId].totalPaid += parseFloat(cuenta.paid);\n        acc[clienteId].totalToPay += parseFloat(cuenta.toPay);\n        return acc;\n      }, {});\n      return Object.values(cuentasAgrupadas);\n    },\n    cuentasAgrupadasFiltradas() {\n      return this.cuentasAgrupadasPorCliente.filter(cuenta => {\n        const nombreCoincide = !this.busquedaCliente || cuenta.customer.name.toLowerCase().includes(this.busquedaCliente.toLowerCase());\n        const estadoCoincide = !this.filtroEstado || this.obtenerEstadoCuenta(cuenta) === this.filtroEstado;\n        return nombreCoincide && estadoCoincide;\n      });\n    },\n    cuentasAgrupadasPaginadas() {\n      const inicio = (this.paginaActualCuentas - 1) * this.cuentasPorPagina;\n      const fin = inicio + this.cuentasPorPagina;\n      return this.cuentasAgrupadasFiltradas.slice(inicio, fin);\n    },\n    // Computed properties para los calendarios de IVA\n    nombreMesIvaStart() {\n      return this.meses[this.ivaStartCalendarMonth];\n    },\n    nombreMesIvaEnd() {\n      return this.meses[this.ivaEndCalendarMonth];\n    },\n    ivaStartCalendarDays() {\n      return this.getCalendarDays(this.ivaStartCalendarYear, this.ivaStartCalendarMonth);\n    },\n    ivaEndCalendarDays() {\n      return this.getCalendarDays(this.ivaEndCalendarYear, this.ivaEndCalendarMonth);\n    },\n    // Computed properties para los calendarios de Cotizaciones\n    nombreMesCotizacionesStart() {\n      return this.meses[this.cotizacionesStartCalendarMonth];\n    },\n    nombreMesCotizacionesEnd() {\n      return this.meses[this.cotizacionesEndCalendarMonth];\n    },\n    cotizacionesStartCalendarDays() {\n      return this.getCalendarDays(this.cotizacionesStartCalendarYear, this.cotizacionesStartCalendarMonth);\n    },\n    cotizacionesEndCalendarDays() {\n      return this.getCalendarDays(this.cotizacionesEndCalendarYear, this.cotizacionesEndCalendarMonth);\n    }\n  },\n  mounted() {\n    this.cargarTodosDatos();\n    document.addEventListener('click', this.handleClickOutside);\n    window.addEventListener('resize', this.updateCalendarPositions);\n    window.addEventListener('scroll', this.updateCalendarPositions);\n    this.validRol();\n  },\n  beforeDestroy() {\n    document.removeEventListener('click', this.handleClickOutside);\n    window.removeEventListener('resize', this.updateCalendarPositions);\n    window.removeEventListener('scroll', this.updateCalendarPositions);\n  },\n  methods: {\n    formatNumber(value) {\n      if (!value) return \"0.00\";\n      const num = typeof value === \"string\" ? parseFloat(value) : Number(value);\n      return isNaN(num) ? \"0.00\" : num.toLocaleString(\"es-MX\", {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString(\"es-MX\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n    },\n    obtenerFechaActual() {\n      return new Date().toLocaleDateString(\"es-MX\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      });\n    },\n    obtenerRangoSemanaActual() {\n      const today = new Date();\n      const firstDayOfWeek = new Date(today);\n      const day = today.getDay();\n      const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Ajustar cuando el día es domingo\n      firstDayOfWeek.setDate(diff);\n      const lastDayOfWeek = new Date(firstDayOfWeek);\n      lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\n      const formatOptions = {\n        day: 'numeric',\n        month: 'long'\n      };\n      const firstDayFormatted = firstDayOfWeek.toLocaleDateString('es-MX', formatOptions);\n      const lastDayFormatted = lastDayOfWeek.toLocaleDateString('es-MX', formatOptions);\n      const yearFormatted = today.toLocaleDateString('es-MX', {\n        year: 'numeric'\n      });\n      return `${firstDayFormatted} al ${lastDayFormatted} de ${yearFormatted}`;\n    },\n    async cargarTodosDatos() {\n      await Promise.all([this.obtenerProductosVendidosConNombres(), this.obtenerProductosMayoresVentas(), this.obtenerTotalesPorMarca(), this.obtenerTotalesPorCategoria(), this.obtenerProductosPorMarca(), this.obtenerProductosPorCategoria(), this.obtenerIVAMensual(), this.obtenerIVARango(), this.obtenerVentasMensualesUsuario(), this.obtenerUsuarios(), this.obtenerIngresosDiariosUsuario(), this.obtenerIngresosSemanalesUsuario() // Agregamos la carga de ingresos semanales\n      ]);\n    },\n    validRol() {\n      const {\n        rol\n      } = AyudanteSesion.obtenerDatosSesion();\n      this.isAdmin = rol === 'Admin';\n    },\n    async obtenerProductosVendidosConNombres() {\n      this.cargando.productos = true;\n      try {\n        const respuestaProductosVendidos = await apiRequest({\n          method: \"GET\",\n          path: `sold-products?page=${this.productosPaginacion.currentPage}&limit=${this.productosPaginacion.perPage}`\n        });\n        if (respuestaProductosVendidos?.data) {\n          const productosVendidos = respuestaProductosVendidos.data.data || [];\n          this.productosPaginacion.total = respuestaProductosVendidos.data.total || 0;\n          this.productosPaginacion.totalPages = respuestaProductosVendidos.data.totalPages || 0;\n          const peticionesDetallesProductos = productosVendidos.map(producto => apiRequest({\n            method: \"GET\",\n            path: `sold-products/${producto.id}/${producto.type}`\n          }));\n          const respuestasDetallesProductos = await Promise.all(peticionesDetallesProductos);\n          this.productosVendidos = productosVendidos.map((producto, indice) => ({\n            ...producto,\n            nombreProducto: respuestasDetallesProductos[indice].data[0]?.product_name || \"Desconocido\"\n          }));\n          console.log(\"Productos vendidos con nombres:\", this.productosVendidos);\n        }\n      } catch (error) {\n        console.error(\"Error obteniendo productos vendidos:\", error);\n        this.mostrarError(\"Error al cargar los productos vendidos\");\n      } finally {\n        this.cargando.productos = false;\n      }\n    },\n    async obtenerProductosMayoresVentas() {\n      this.cargando.topSold = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `sold-products/top-sold?limit=${this.limite}`\n        });\n        if (response?.data) {\n          this.productosMayoresVentas = Array.isArray(response.data) ? response.data : response.data.data || [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener productos más vendidos:\", error);\n        this.mostrarError(\"Error al cargar los productos más vendidos\");\n      } finally {\n        this.cargando.topSold = false;\n      }\n    },\n    async obtenerTotalesPorMarca() {\n      this.cargando.byBrand = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sold-products/totals-by-brand\"\n        });\n        if (response?.data) {\n          this.totalesPorMarca = Array.isArray(response.data) ? response.data : response.data.data || [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener totales por marca:\", error);\n        this.mostrarError(\"Error al cargar los totales por marca\");\n      } finally {\n        this.cargando.byBrand = false;\n      }\n    },\n    async obtenerTotalesPorCategoria() {\n      this.cargando.byCategory = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sold-products/totals-by-category\"\n        });\n        if (response?.data) {\n          this.totalesPorCategoria = Array.isArray(response.data) ? response.data : response.data.data || [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener totales por categoría:\", error);\n        this.mostrarError(\"Error al cargar los totales por categoría\");\n      } finally {\n        this.cargando.byCategory = false;\n      }\n    },\n    async obtenerProductosPorMarca() {\n      this.cargando.topByBrand = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sold-products/top-sold-by-brand\"\n        });\n        if (response?.data) {\n          this.productosPorMarca = Array.isArray(response.data) ? response.data : response.data.data || [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener productos por marca:\", error);\n        this.mostrarError(\"Error al cargar los productos por marca\");\n      } finally {\n        this.cargando.topByBrand = false;\n      }\n    },\n    async obtenerProductosPorCategoria() {\n      this.cargando.topByCategory = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sold-products/top-sold-by-category\"\n        });\n        if (response?.data) {\n          this.productosPorCategoria = Array.isArray(response.data) ? response.data : response.data.data || [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener productos por categoría:\", error);\n        this.mostrarError(\"Error al cargar los productos por categoría\");\n      } finally {\n        this.cargando.topByCategory = false;\n      }\n    },\n    // Método para obtener ingresos diarios del usuario\n    async obtenerIngresosDiariosUsuario() {\n      if (!this.filtroIngresosDiarios.id) {\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\n        return;\n      }\n      this.cargando.ingresosDiarios = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `users/${this.filtroIngresosDiarios.id}/today-income`\n        });\n        if (response?.data) {\n          this.ingresosDiarios.totalIncome = response.data.totalIncome || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ingresos diarios del usuario:\", error);\n        this.mostrarError(\"Error al cargar los ingresos diarios del usuario\");\n      } finally {\n        this.cargando.ingresosDiarios = false;\n      }\n    },\n    // Método para obtener ingresos semanales del usuario\n    async obtenerIngresosSemanalesUsuario() {\n      if (!this.filtroIngresosSemanales.id) {\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\n        return;\n      }\n      this.cargando.ingresosSemanales = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `users/${this.filtroIngresosSemanales.id}/weekly-income`\n        });\n        if (response?.data) {\n          this.ingresosSemanales.totalIncome = response.data.totalIncome || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ingresos semanales del usuario:\", error);\n        this.mostrarError(\"Error al cargar los ingresos semanales del usuario\");\n      } finally {\n        this.cargando.ingresosSemanales = false;\n      }\n    },\n    // Método para limpiar los ingresos diarios\n    limpiarIngresosDiariosUsuario() {\n      this.ingresosDiarios.totalIncome = \"0.00\";\n      this.filtroIngresosDiarios.id = null;\n    },\n    // Método para limpiar los ingresos semanales\n    limpiarIngresosSemanalesUsuario() {\n      this.ingresosSemanales.totalIncome = \"0.00\";\n      this.filtroIngresosSemanales.id = null;\n    },\n    async obtenerIVAMensual() {\n      this.cargando.iva = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `Tax/monthly?year=${this.filtroIVA.year}&month=${this.filtroIVA.month}`\n        });\n        if (response?.data) {\n          this.ivaMensual = response.data;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener IVA mensual:\", error);\n        this.mostrarError(\"Error al cargar el IVA mensual\");\n      } finally {\n        this.cargando.iva = false;\n      }\n    },\n    async obtenerIVARango() {\n      if (!this.filtroIVARango.startDate || !this.filtroIVARango.endDate) {\n        return;\n      }\n      this.cargando.ivaRango = true;\n      try {\n        const formatDate = date => {\n          return date.toISOString().split(\"T\")[0];\n        };\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `Tax/range?startDate=${formatDate(this.filtroIVARango.startDate)}&endDate=${formatDate(this.filtroIVARango.endDate)}`\n        });\n        if (response?.data) {\n          this.ivaRango = response.data;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener IVA por rango:\", error);\n        this.mostrarError(\"Error al cargar el IVA por rango\");\n      } finally {\n        this.cargando.ivaRango = false;\n      }\n    },\n    async obtenerVentasMensualesUsuario() {\n      if (!this.filtroVentasUsuario.id) {\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\n        return;\n      }\n      this.ventasMensualesUsuario = []; // Limpiar datos antes de la consulta\n      this.cargando.ventasUsuario = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `users/${this.filtroVentasUsuario.id}/monthly-sales?year=${this.filtroVentasUsuario.year}`\n        });\n        if (response?.data) {\n          this.ventasMensualesUsuario = Array.isArray(response.data) ? response.data : [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ventas mensuales del usuario:\", error);\n        this.mostrarError(\"Error al cargar las ventas mensuales del usuario\");\n      } finally {\n        this.cargando.ventasUsuario = false;\n      }\n    },\n    async obtenerUsuarios() {\n      this.cargando.usuarios = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"users\"\n        });\n        if (response?.data) {\n          this.usuarios = Array.isArray(response.data) ? response.data : [];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener usuarios:\", error);\n        this.mostrarError(\"Error al cargar los usuarios\");\n      } finally {\n        this.cargando.usuarios = false;\n      }\n    },\n    cambiarPaginaProductos(pagina) {\n      this.productosPaginacion.currentPage = pagina;\n      this.obtenerProductosVendidosConNombres();\n    },\n    obtenerNombreMes(numeroMes) {\n      const meses = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n      return meses[numeroMes - 1] || \"\";\n    },\n    limpiarVentasMensualesUsuario() {\n      this.ventasMensualesUsuario = [];\n      this.filtroVentasUsuario.id = null;\n      this.filtroVentasUsuario.year = new Date().getFullYear();\n    },\n    mostrarError(mensaje) {\n      this.$buefy.toast.open({\n        message: mensaje,\n        type: \"is-danger\",\n        duration: 5000\n      });\n    },\n    obtenerEstadoCuenta(cuenta) {\n      if (parseFloat(cuenta.totalToPay) === 0) {\n        return \"Pagada\";\n      } else {\n        return \"Pendiente\";\n      }\n    },\n    obtenerColorEstado(cuenta) {\n      const estado = this.obtenerEstadoCuenta(cuenta);\n      switch (estado) {\n        case \"Pagada\":\n          return \"is-success\";\n        case \"Pendiente\":\n          return \"is-danger\";\n        default:\n          return \"is-info\";\n      }\n    },\n    // Métodos para el calendario personalizado\n    getCalendarDays(year, month) {\n      const firstDay = new Date(year, month, 1);\n      const lastDay = new Date(year, month + 1, 0);\n      const daysInMonth = lastDay.getDate();\n\n      // Obtener el día de la semana del primer día (0 = domingo, 1 = lunes, ..., 6 = sábado)\n      let firstDayOfWeek = firstDay.getDay();\n      // Ajustar para que lunes sea 0\n      firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\n      const days = [];\n\n      // Días del mes anterior\n      const prevMonth = month === 0 ? 11 : month - 1;\n      const prevMonthYear = month === 0 ? year - 1 : year;\n      const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = daysInPrevMonth - firstDayOfWeek + i + 1;\n        days.push({\n          day,\n          date: new Date(prevMonthYear, prevMonth, day),\n          otherMonth: true,\n          id: `prev-${day}`\n        });\n      }\n\n      // Días del mes actual\n      for (let i = 1; i <= daysInMonth; i++) {\n        days.push({\n          day: i,\n          date: new Date(year, month, i),\n          otherMonth: false,\n          id: `current-${i}`\n        });\n      }\n\n      // Días del mes siguiente\n      const nextMonth = month === 11 ? 0 : month + 1;\n      const nextMonthYear = month === 11 ? year + 1 : year;\n      const remainingDays = 42 - days.length; // 6 filas x 7 días\n\n      for (let i = 1; i <= remainingDays; i++) {\n        days.push({\n          day: i,\n          date: new Date(nextMonthYear, nextMonth, i),\n          otherMonth: true,\n          id: `next-${i}`\n        });\n      }\n      return days;\n    },\n    isToday(date) {\n      const today = new Date();\n      return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n    },\n    formatDateForInput(date) {\n      if (!date) return '';\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    },\n    // Métodos para el calendario de IVA\n    toggleIvaStartCalendar() {\n      if (this.showIvaEndCalendar) {\n        this.showIvaEndCalendar = false;\n      }\n      this.showIvaStartCalendar = !this.showIvaStartCalendar;\n      if (this.showIvaStartCalendar) {\n        this.$nextTick(() => {\n          this.positionIvaStartCalendar();\n        });\n      }\n    },\n    toggleIvaEndCalendar() {\n      if (this.showIvaStartCalendar) {\n        this.showIvaStartCalendar = false;\n      }\n      if (this.showCotizacionesStartCalendar) {\n        this.showCotizacionesStartCalendar = false;\n      }\n      if (this.showCotizacionesEndCalendar) {\n        this.showCotizacionesEndCalendar = false;\n      }\n      this.showIvaEndCalendar = !this.showIvaEndCalendar;\n      if (this.showIvaEndCalendar) {\n        this.$nextTick(() => {\n          this.positionIvaEndCalendar();\n        });\n      }\n    },\n    positionIvaStartCalendar() {\n      const inputEl = this.$refs.ivaStartDateContainer;\n      if (inputEl && this.$refs.ivaStartCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.ivaStartCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.ivaStartCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    positionIvaEndCalendar() {\n      const inputEl = this.$refs.ivaEndDateContainer;\n      if (inputEl && this.$refs.ivaEndCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.ivaEndCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.ivaEndCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    isSelectedIvaStartDate(date) {\n      if (!this.filtroIVARango.startDate) return false;\n      return date.getDate() === this.filtroIVARango.startDate.getDate() && date.getMonth() === this.filtroIVARango.startDate.getMonth() && date.getFullYear() === this.filtroIVARango.startDate.getFullYear();\n    },\n    isSelectedIvaEndDate(date) {\n      if (!this.filtroIVARango.endDate) return false;\n      return date.getDate() === this.filtroIVARango.endDate.getDate() && date.getMonth() === this.filtroIVARango.endDate.getMonth() && date.getFullYear() === this.filtroIVARango.endDate.getFullYear();\n    },\n    selectIvaStartDate(date) {\n      this.filtroIVARango.startDate = new Date(date);\n      this.ivaFechaInicioInput = this.formatDateForInput(date);\n      this.showIvaStartCalendar = false;\n    },\n    selectIvaEndDate(date) {\n      this.filtroIVARango.endDate = new Date(date);\n      this.ivaFechaFinInput = this.formatDateForInput(date);\n      this.showIvaEndCalendar = false;\n    },\n    clearIvaStartDate() {\n      this.filtroIVARango.startDate = null;\n      this.ivaFechaInicioInput = \"\";\n      this.showIvaStartCalendar = false;\n    },\n    clearIvaEndDate() {\n      this.filtroIVARango.endDate = null;\n      this.ivaFechaFinInput = \"\";\n      this.showIvaEndCalendar = false;\n    },\n    setTodayAsIvaStart() {\n      const today = new Date();\n      this.filtroIVARango.startDate = today;\n      this.ivaFechaInicioInput = this.formatDateForInput(today);\n      this.ivaStartCalendarMonth = today.getMonth();\n      this.ivaStartCalendarYear = today.getFullYear();\n      this.showIvaStartCalendar = false;\n    },\n    setTodayAsIvaEnd() {\n      const today = new Date();\n      this.filtroIVARango.endDate = today;\n      this.ivaFechaFinInput = this.formatDateForInput(today);\n      this.ivaEndCalendarMonth = today.getMonth();\n      this.ivaEndCalendarYear = today.getFullYear();\n      this.showIvaEndCalendar = false;\n    },\n    toggleCotizacionesEndCalendar() {\n      if (this.showIvaStartCalendar) {\n        this.showIvaStartCalendar = false;\n      }\n      if (this.showIvaEndCalendar) {\n        this.showIvaEndCalendar = false;\n      }\n      this.showCotizacionesEndCalendar = !this.showCotizacionesEndCalendar;\n      if (this.showCotizacionesEndCalendar) {\n        this.$nextTick(() => {\n          this.positionCotizacionesEndCalendar();\n        });\n      }\n    },\n    positionCotizacionesStartCalendar() {\n      const inputEl = this.$refs.cotizacionesStartDateContainer;\n      if (inputEl && this.$refs.cotizacionesStartCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.cotizacionesStartCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.cotizacionesStartCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    positionCotizacionesEndCalendar() {\n      const inputEl = this.$refs.cotizacionesEndDateContainer;\n      if (inputEl && this.$refs.cotizacionesEndCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.cotizacionesEndCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.cotizacionesEndCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    isSelectedCotizacionesStartDate(date) {\n      if (!this.filtroCotizaciones.startDate) return false;\n      return date.getDate() === this.filtroCotizaciones.startDate.getDate() && date.getMonth() === this.filtroCotizaciones.startDate.getMonth() && date.getFullYear() === this.filtroCotizaciones.startDate.getFullYear();\n    },\n    isSelectedCotizacionesEndDate(date) {\n      if (!this.filtroCotizaciones.endDate) return false;\n      return date.getDate() === this.filtroCotizaciones.endDate.getDate() && date.getMonth() === this.filtroCotizaciones.endDate.getMonth() && date.getFullYear() === this.filtroCotizaciones.endDate.getFullYear();\n    },\n    selectCotizacionesStartDate(date) {\n      this.filtroCotizaciones.startDate = new Date(date);\n      this.cotizacionesFechaInicioInput = this.formatDateForInput(date);\n      this.showCotizacionesStartCalendar = false;\n    },\n    selectCotizacionesEndDate(date) {\n      this.filtroCotizaciones.endDate = new Date(date);\n      this.cotizacionesFechaFinInput = this.formatDateForInput(date);\n      this.showCotizacionesEndCalendar = false;\n    },\n    clearCotizacionesStartDate() {\n      this.filtroCotizaciones.startDate = null;\n      this.cotizacionesFechaInicioInput = \"\";\n      this.showCotizacionesStartCalendar = false;\n    },\n    clearCotizacionesEndDate() {\n      this.filtroCotizaciones.endDate = null;\n      this.cotizacionesFechaFinInput = \"\";\n      this.showCotizacionesEndCalendar = false;\n    },\n    setTodayAsCotizacionesStart() {\n      const today = new Date();\n      this.filtroCotizaciones.startDate = today;\n      this.cotizacionesFechaInicioInput = this.formatDateForInput(today);\n      this.cotizacionesStartCalendarMonth = today.getMonth();\n      this.cotizacionesStartCalendarYear = today.getFullYear();\n      this.showCotizacionesStartCalendar = false;\n    },\n    setTodayAsCotizacionesEnd() {\n      const today = new Date();\n      this.filtroCotizaciones.endDate = today;\n      this.cotizacionesFechaFinInput = this.formatDateForInput(today);\n      this.cotizacionesEndCalendarMonth = today.getMonth();\n      this.cotizacionesEndCalendarYear = today.getFullYear();\n      this.showCotizacionesEndCalendar = false;\n    },\n    // Métodos comunes para todos los calendarios\n    prevMonth(type) {\n      switch (type) {\n        case 'ivaStart':\n          if (this.ivaStartCalendarMonth === 0) {\n            this.ivaStartCalendarMonth = 11;\n            this.ivaStartCalendarYear--;\n          } else {\n            this.ivaStartCalendarMonth--;\n          }\n          break;\n        case 'ivaEnd':\n          if (this.ivaEndCalendarMonth === 0) {\n            this.ivaEndCalendarMonth = 11;\n            this.ivaEndCalendarYear--;\n          } else {\n            this.ivaEndCalendarMonth--;\n          }\n          break;\n        case 'cotizacionesStart':\n          if (this.cotizacionesStartCalendarMonth === 0) {\n            this.cotizacionesStartCalendarMonth = 11;\n            this.cotizacionesStartCalendarYear--;\n          } else {\n            this.cotizacionesStartCalendarMonth--;\n          }\n          break;\n        case 'cotizacionesEnd':\n          if (this.cotizacionesEndCalendarMonth === 0) {\n            this.cotizacionesEndCalendarMonth = 11;\n            this.cotizacionesEndCalendarYear--;\n          } else {\n            this.cotizacionesEndCalendarMonth--;\n          }\n          break;\n      }\n    },\n    nextMonth(type) {\n      switch (type) {\n        case 'ivaStart':\n          if (this.ivaStartCalendarMonth === 11) {\n            this.ivaStartCalendarMonth = 0;\n            this.ivaStartCalendarYear++;\n          } else {\n            this.ivaStartCalendarMonth++;\n          }\n          break;\n        case 'ivaEnd':\n          if (this.ivaEndCalendarMonth === 11) {\n            this.ivaEndCalendarMonth = 0;\n            this.ivaEndCalendarYear++;\n          } else {\n            this.ivaEndCalendarMonth++;\n          }\n          break;\n        case 'cotizacionesStart':\n          if (this.cotizacionesStartCalendarMonth === 11) {\n            this.cotizacionesStartCalendarMonth = 0;\n            this.cotizacionesStartCalendarYear++;\n          } else {\n            this.cotizacionesStartCalendarMonth++;\n          }\n          break;\n        case 'cotizacionesEnd':\n          if (this.cotizacionesEndCalendarMonth === 11) {\n            this.cotizacionesEndCalendarMonth = 0;\n            this.cotizacionesEndCalendarYear++;\n          } else {\n            this.cotizacionesEndCalendarMonth++;\n          }\n          break;\n      }\n    },\n    updateCalendarPositions() {\n      if (this.showIvaStartCalendar) {\n        this.positionIvaStartCalendar();\n      }\n      if (this.showIvaEndCalendar) {\n        this.positionIvaEndCalendar();\n      }\n      if (this.showCotizacionesStartCalendar) {\n        this.positionCotizacionesStartCalendar();\n      }\n      if (this.showCotizacionesEndCalendar) {\n        this.positionCotizacionesEndCalendar();\n      }\n    },\n    handleClickOutside(event) {\n      // Cerrar calendario IVA inicio si se hace clic fuera\n      if (this.showIvaStartCalendar && this.$refs.ivaStartCalendarRef && !this.$refs.ivaStartCalendarRef.contains(event.target) && this.$refs.ivaStartDateContainer && !this.$refs.ivaStartDateContainer.contains(event.target)) {\n        this.showIvaStartCalendar = false;\n      }\n\n      // Cerrar calendario IVA fin si se hace clic fuera\n      if (this.showIvaEndCalendar && this.$refs.ivaEndCalendarRef && !this.$refs.ivaEndCalendarRef.contains(event.target) && this.$refs.ivaEndDateContainer && !this.$refs.ivaEndDateContainer.contains(event.target)) {\n        this.showIvaEndCalendar = false;\n      }\n\n      // Cerrar calendario Cotizaciones inicio si se hace clic fuera\n      if (this.showCotizacionesStartCalendar && this.$refs.cotizacionesStartCalendarRef && !this.$refs.cotizacionesStartCalendarRef.contains(event.target) && this.$refs.cotizacionesStartDateContainer && !this.$refs.cotizacionesStartDateContainer.contains(event.target)) {\n        this.showCotizacionesStartCalendar = false;\n      }\n\n      // Cerrar calendario Cotizaciones fin si se hace clic fuera\n      if (this.showCotizacionesEndCalendar && this.$refs.cotizacionesEndCalendarRef && !this.$refs.cotizacionesEndCalendarRef.contains(event.target) && this.$refs.cotizacionesEndDateContainer && !this.$refs.cotizacionesEndDateContainer.contains(event.target)) {\n        this.showCotizacionesEndCalendar = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","HistorialVentas","generateYearRange","AyudanteSesion","name","components","data","today","Date","currentYear","getFullYear","currentMonth","getMonth","isAdmin","historialPagos","total","page","limit","totalPages","productosMayoresVentas","totalesPorMarca","totalesPorCategoria","productosPorMarca","productosPorCategoria","productosVendidos","productosPaginacion","currentPage","perPage","productosVendidosPorId","filtroProductos","id","type","limite","cargando","pagos","productos","topSold","byBrand","byCategory","topByBrand","topByCategory","byIdAndType","cuentas","iva","ivaRango","ventasUsuario","usuarios","cotizaciones","ingresosDiarios","ingresosSemanales","filtroNombreProducto","paginaActual","porPagina","filtroFechas","inicio","fin","paginaActualPagos","porPaginaPagos","cuentasPorCobrar","cuentasPaginacion","paginaActualCuentas","porPaginaCuentas","filtroIVA","year","month","ivaMensual","totalIVA","totalSales","filtroIVARango","startDate","endDate","months","value","label","availableYears","ventasMensualesUsuario","filtroVentasUsuario","filtroCotizaciones","busquedaCliente","filtroEstado","cuentasPorPagina","totalIncome","filtroIngresosDiarios","filtroIngresosSemanales","ivaFechaInicioInput","ivaFechaFinInput","showIvaStartCalendar","showIvaEndCalendar","ivaStartCalendarMonth","ivaStartCalendarYear","ivaEndCalendarMonth","ivaEndCalendarYear","ivaStartCalendarStyle","top","left","ivaEndCalendarStyle","cotizacionesFechaInicioInput","cotizacionesFechaFinInput","showCotizacionesStartCalendar","showCotizacionesEndCalendar","cotizacionesStartCalendarMonth","cotizacionesStartCalendarYear","cotizacionesEndCalendarMonth","cotizacionesEndCalendarYear","cotizacionesStartCalendarStyle","cotizacionesEndCalendarStyle","diasSemana","meses","computed","productosPaginados","filtro","toLowerCase","filter","producto","nombreProducto","includes","pagosFiltrados","pago","fechaPago","date","pagosPaginados","cuentasAgrupadasPorCliente","cuentasAgrupadas","reduce","acc","cuenta","clienteId","customer","totalAmount","totalPaid","totalToPay","push","parseFloat","paid","toPay","Object","values","cuentasAgrupadasFiltradas","nombreCoincide","estadoCoincide","obtenerEstadoCuenta","cuentasAgrupadasPaginadas","slice","nombreMesIvaStart","nombreMesIvaEnd","ivaStartCalendarDays","getCalendarDays","ivaEndCalendarDays","nombreMesCotizacionesStart","nombreMesCotizacionesEnd","cotizacionesStartCalendarDays","cotizacionesEndCalendarDays","mounted","cargarTodosDatos","document","addEventListener","handleClickOutside","window","updateCalendarPositions","validRol","beforeDestroy","removeEventListener","methods","formatNumber","num","Number","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatDate","dateString","toLocaleDateString","day","hour","minute","obtenerFechaActual","weekday","obtenerRangoSemanaActual","firstDayOfWeek","getDay","diff","getDate","setDate","lastDayOfWeek","formatOptions","firstDayFormatted","lastDayFormatted","yearFormatted","Promise","all","obtenerProductosVendidosConNombres","obtenerProductosMayoresVentas","obtenerTotalesPorMarca","obtenerTotalesPorCategoria","obtenerProductosPorMarca","obtenerProductosPorCategoria","obtenerIVAMensual","obtenerIVARango","obtenerVentasMensualesUsuario","obtenerUsuarios","obtenerIngresosDiariosUsuario","obtenerIngresosSemanalesUsuario","rol","obtenerDatosSesion","respuestaProductosVendidos","method","path","peticionesDetallesProductos","map","respuestasDetallesProductos","indice","product_name","console","log","error","mostrarError","response","Array","isArray","limpiarIngresosDiariosUsuario","limpiarIngresosSemanalesUsuario","toISOString","split","cambiarPaginaProductos","pagina","obtenerNombreMes","numeroMes","limpiarVentasMensualesUsuario","mensaje","$buefy","toast","open","message","duration","obtenerColorEstado","estado","firstDay","lastDay","daysInMonth","days","prevMonth","prevMonthYear","daysInPrevMonth","i","otherMonth","nextMonth","nextMonthYear","remainingDays","length","isToday","formatDateForInput","String","padStart","toggleIvaStartCalendar","$nextTick","positionIvaStartCalendar","toggleIvaEndCalendar","positionIvaEndCalendar","inputEl","$refs","ivaStartDateContainer","ivaStartCalendarRef","rect","getBoundingClientRect","calendarHeight","offsetHeight","windowHeight","innerHeight","spaceBelow","bottom","showBelow","scrollY","scrollX","zIndex","ivaEndDateContainer","ivaEndCalendarRef","isSelectedIvaStartDate","isSelectedIvaEndDate","selectIvaStartDate","selectIvaEndDate","clearIvaStartDate","clearIvaEndDate","setTodayAsIvaStart","setTodayAsIvaEnd","toggleCotizacionesEndCalendar","positionCotizacionesEndCalendar","positionCotizacionesStartCalendar","cotizacionesStartDateContainer","cotizacionesStartCalendarRef","cotizacionesEndDateContainer","cotizacionesEndCalendarRef","isSelectedCotizacionesStartDate","isSelectedCotizacionesEndDate","selectCotizacionesStartDate","selectCotizacionesEndDate","clearCotizacionesStartDate","clearCotizacionesEndDate","setTodayAsCotizacionesStart","setTodayAsCotizacionesEnd","event","contains","target"],"sources":["src/components/Ventas/ReporteVentas.vue"],"sourcesContent":["<template>\r\n  <div class=\"\">\r\n\r\n    <div class=\"dashboard-content\">\r\n      <!-- Historial de Ventas -->\r\n      <HistorialVentas class=\"mb-6\" />\r\n\r\n\r\n <!-- Lista de Usuarios -->\r\n <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"account-multiple\" type=\"is-info\"></b-icon>\r\n            Lista de Usuarios\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <b-table :data=\"usuarios\" :loading=\"cargando.usuarios\" :striped=\"true\" :hoverable=\"true\">\r\n            <b-table-column field=\"id\" label=\"ID\" v-slot=\"props\">\r\n              {{ props.row.id }}\r\n            </b-table-column>\r\n            <b-table-column field=\"username\" label=\"Usuario\" v-slot=\"props\">\r\n              {{ props.row.username }}\r\n            </b-table-column>\r\n            <b-table-column field=\"name\" label=\"Nombre\" v-slot=\"props\">\r\n              {{ props.row.name }}\r\n            </b-table-column>\r\n            <b-table-column field=\"phone\" label=\"Teléfono\" v-slot=\"props\">\r\n              {{ props.row.phone }}\r\n            </b-table-column>\r\n          </b-table>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Nueva sección: Ingresos Diarios del Usuario -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"cash-register\" type=\"is-info\"></b-icon>\r\n            Ingresos Diarios del Usuario\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"is-flex is-align-items-end\" :style=\"{ gap: '1rem' }\">\r\n            <div class=\"control\">\r\n              <b-field label=\"ID de Usuario\">\r\n                <b-input v-model=\"filtroIngresosDiarios.id\" type=\"number\" min=\"1\" placeholder=\"ID del usuario\"></b-input>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-primary\" @click=\"obtenerIngresosDiariosUsuario\" :loading=\"cargando.ingresosDiarios\">\r\n                Consultar\r\n              </b-button>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-light\" @click=\"limpiarIngresosDiariosUsuario\"\r\n                :disabled=\"!ingresosDiarios.totalIncome\">\r\n                Limpiar\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"columns mt-4\">\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Ingresos de Hoy</p>\r\n                <p class=\"title\">${{ formatNumber(ingresosDiarios.totalIncome) }}</p>\r\n                <p class=\"subtitle is-6\">{{ obtenerFechaActual() }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Nueva sección: Ingresos Semanales del Usuario -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"calendar-week\" type=\"is-success\"></b-icon>\r\n            Ingresos Semanales del Usuario\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"is-flex is-align-items-end\" :style=\"{ gap: '1rem' }\">\r\n            <div class=\"control\">\r\n              <b-field label=\"ID de Usuario\">\r\n                <b-input v-model=\"filtroIngresosSemanales.id\" type=\"number\" min=\"1\" placeholder=\"ID del usuario\"></b-input>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-primary\" @click=\"obtenerIngresosSemanalesUsuario\" :loading=\"cargando.ingresosSemanales\">\r\n                Consultar\r\n              </b-button>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-light\" @click=\"limpiarIngresosSemanalesUsuario\"\r\n                :disabled=\"!ingresosSemanales.totalIncome\">\r\n                Limpiar\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"columns mt-4\">\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Ingresos de la Semana</p>\r\n                <p class=\"title\">${{ formatNumber(ingresosSemanales.totalIncome) }}</p>\r\n                <p class=\"subtitle is-6\">{{ obtenerRangoSemanaActual() }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n     \r\n      <!-- Nueva tarjeta: Ventas Mensuales por Usuario -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"chart-bar\" type=\"is-primary\"></b-icon>\r\n            Ventas Mensuales por Usuario\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"is-flex is-align-items-end\" :style=\"{ gap: '1rem' }\">\r\n            <div class=\"control\">\r\n              <b-field label=\"ID de Usuario\">\r\n                <b-input v-model=\"filtroVentasUsuario.id\" type=\"number\" min=\"1\" placeholder=\"ID del usuario\"></b-input>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control\">\r\n              <b-field label=\"Año\">\r\n                <b-select v-model=\"filtroVentasUsuario.year\" expanded>\r\n                  <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">\r\n                    {{ year }}\r\n                  </option>\r\n                </b-select>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-primary\" @click=\"obtenerVentasMensualesUsuario\" :loading=\"cargando.ventasUsuario\">\r\n                Consultar\r\n              </b-button>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-light\" @click=\"limpiarVentasMensualesUsuario\"\r\n                :disabled=\"!ventasMensualesUsuario.length\">\r\n                Limpiar\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-if=\"ventasMensualesUsuario.length\">\r\n            <b-table :data=\"ventasMensualesUsuario\" :loading=\"cargando.ventasUsuario\" :striped=\"true\" :hoverable=\"true\">\r\n              <b-table-column field=\"month\" label=\"Mes\" v-slot=\"props\">\r\n                {{ obtenerNombreMes(props.row.month) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"totalSales\" label=\"Total Ventas\" numeric v-slot=\"props\">\r\n                ${{ formatNumber(props.row.totalSales) }}\r\n              </b-table-column>\r\n            </b-table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <!-- Detalles de Productos Vendidos -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"package\" type=\"is-info\"></b-icon>\r\n            Detalles de Productos Vendidos\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <b-field label=\"Buscar por nombre de producto\">\r\n            <b-input v-model=\"filtroNombreProducto\" placeholder=\"Escriba el nombre del producto\" expanded></b-input>\r\n          </b-field>\r\n\r\n          <b-table :data=\"productosPaginados\" :loading=\"cargando.productos\" :striped=\"true\" :hoverable=\"true\">\r\n            <b-table-column field=\"nombreProducto\" label=\"Nombre Producto\" v-slot=\"props\">\r\n              {{ props.row.nombreProducto }}\r\n            </b-table-column>\r\n            <b-table-column field=\"quantity\" label=\"Cantidad\" numeric v-slot=\"props\">\r\n              {{ formatNumber(props.row.quantity) }}\r\n            </b-table-column>\r\n            <b-table-column field=\"price\" label=\"Precio Venta\" numeric v-slot=\"props\">\r\n              ${{ formatNumber(props.row.price) }}\r\n            </b-table-column>\r\n            <b-table-column field=\"priceWithouthIVA\" label=\"Precio sin IVA\" numeric v-slot=\"props\">\r\n              ${{ formatNumber(props.row.priceWithouthIVA) }}\r\n            </b-table-column>\r\n            <b-table-column field=\"iva\" label=\"IVA\" numeric v-slot=\"props\">\r\n              ${{ formatNumber(props.row.iva) }}\r\n            </b-table-column>\r\n          </b-table>\r\n\r\n          <b-pagination v-model=\"productosPaginacion.currentPage\" :total=\"productosPaginacion.total\"\r\n            :per-page=\"productosPaginacion.perPage\" :range-before=\"3\" :range-after=\"3\" order=\"is-centered\"\r\n            aria-next-label=\"Siguiente página\" aria-previous-label=\"Página anterior\" aria-page-label=\"Página\"\r\n            aria-current-label=\"Página actual\" @change=\"cambiarPaginaProductos\">\r\n          </b-pagination>\r\n        </div>\r\n      </div>\r\n      <!-- IVA Mensual -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"calculator\" type=\"is-info\"></b-icon>\r\n            IVA Mensual\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"is-flex is-align-items-end mb-5\" :style=\"{ gap: '1rem' }\">\r\n            <div class=\"control\">\r\n              <b-field label=\"Año\">\r\n                <b-select v-model=\"filtroIVA.year\" expanded>\r\n                  <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">\r\n                    {{ year }}\r\n                  </option>\r\n                </b-select>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control\">\r\n              <b-field label=\"Mes\">\r\n                <b-select v-model=\"filtroIVA.month\" expanded>\r\n                  <option v-for=\"month in months\" :key=\"month.value\" :value=\"month.value\">\r\n                    {{ month.label }}\r\n                  </option>\r\n                </b-select>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-primary\" @click=\"obtenerIVAMensual\" :loading=\"cargando.iva\">\r\n                Consultar\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"columns\">\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Total IVA</p>\r\n                <p class=\"title\">${{ formatNumber(ivaMensual.totalIVA) }}</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Total Ventas</p>\r\n                <p class=\"title\">${{ formatNumber(ivaMensual.totalSales) }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- IVA por Rango de Fechas -->\r\n      <div class=\"card dashboard-card mb-6\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"calendar-range\" type=\"is-info\"></b-icon>\r\n            IVA por Rango de Fechas\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"is-flex is-align-items-end mb-5\" :style=\"{ gap: '1rem' }\">\r\n            <div class=\"control\">\r\n              <b-field label=\"Fecha de Inicio\">\r\n                <div class=\"date-input-container\" ref=\"ivaStartDateContainer\">\r\n                  <input type=\"text\" class=\"input\" placeholder=\"dd/mm/aaaa\" v-model=\"ivaFechaInicioInput\"\r\n                    @click=\"toggleIvaStartCalendar\" readonly>\r\n                  <span class=\"icon is-right\">\r\n                    <i class=\"mdi mdi-calendar\"></i>\r\n                  </span>\r\n                </div>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control\">\r\n              <b-field label=\"Fecha de Fin\">\r\n                <div class=\"date-input-container\" ref=\"ivaEndDateContainer\">\r\n                  <input type=\"text\" class=\"input\" placeholder=\"dd/mm/aaaa\" v-model=\"ivaFechaFinInput\"\r\n                    @click=\"toggleIvaEndCalendar\" readonly>\r\n                  <span class=\"icon is-right\">\r\n                    <i class=\"mdi mdi-calendar\"></i>\r\n                  </span>\r\n                </div>\r\n              </b-field>\r\n            </div>\r\n            <div class=\"control align-self-flex-end\">\r\n              <b-button type=\"is-primary\" @click=\"obtenerIVARango\" :loading=\"cargando.ivaRango\">\r\n                Consultar\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"columns\">\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Total IVA</p>\r\n                <p class=\"title\">${{ formatNumber(ivaRango.totalIVA) }}</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"column\">\r\n              <div class=\"box has-text-centered\">\r\n                <p class=\"heading\">Total Ventas</p>\r\n                <p class=\"title\">${{ formatNumber(ivaRango.totalSales) }}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Productos más vendidos -->\r\n      <div class=\"card dashboard-card\" v-if=\"isAdmin\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <b-icon icon=\"trophy\" type=\"is-warning\"></b-icon>\r\n            Productos más vendidos\r\n          </p>\r\n          <div class=\"card-header-icon\">\r\n            <b-select v-model=\"limite\" @input=\"obtenerProductosMayoresVentas\" size=\"is-small\">\r\n              <option :value=\"5\">Top 5</option>\r\n              <option :value=\"10\">Top 10</option>\r\n              <option :value=\"15\">Top 15</option>\r\n              <option :value=\"20\">Top 20</option>\r\n            </b-select>\r\n          </div>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <b-table :data=\"productosMayoresVentas\" :loading=\"cargando.topSold\" :striped=\"true\" :hoverable=\"true\">\r\n            <b-table-column field=\"product_name\" label=\"Producto\" v-slot=\"props\">\r\n              {{ props.row.product_name }}\r\n            </b-table-column>\r\n            <b-table-column field=\"units\" label=\"Unidades\" numeric v-slot=\"props\">\r\n              {{ formatNumber(props.row.units) }}\r\n            </b-table-column>\r\n            <b-table-column field=\"total\" label=\"Total\" numeric v-slot=\"props\">\r\n              ${{ formatNumber(props.row.total) }}\r\n            </b-table-column>\r\n          </b-table>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"columns is-multiline\" v-if=\"isAdmin\">\r\n        <!-- Totales por marca -->\r\n        <div class=\"column is-half\">\r\n          <div class=\"card dashboard-card\">\r\n            <header class=\"card-header\">\r\n              <p class=\"card-header-title\">\r\n                <b-icon icon=\"tag\" type=\"is-info\"></b-icon>\r\n                Totales por marca\r\n              </p>\r\n            </header>\r\n            <div class=\"card-content\">\r\n              <b-table :data=\"totalesPorMarca\" :loading=\"cargando.byBrand\" :striped=\"true\" :hoverable=\"true\">\r\n                <b-table-column field=\"brandName\" label=\"Marca\" v-slot=\"props\">\r\n                  {{ props.row.brandName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"totalSales\" label=\"Total ventas\" numeric v-slot=\"props\">\r\n                  ${{ formatNumber(props.row.totalSales) }}\r\n                </b-table-column>\r\n              </b-table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Totales por categoría -->\r\n        <div class=\"column is-half\">\r\n          <div class=\"card dashboard-card\">\r\n            <header class=\"card-header\">\r\n              <p class=\"card-header-title\">\r\n                <b-icon icon=\"folder\" type=\"is-success\"></b-icon>\r\n                Totales por categoría\r\n              </p>\r\n            </header>\r\n            <div class=\"card-content\">\r\n              <b-table :data=\"totalesPorCategoria\" :loading=\"cargando.byCategory\" :striped=\"true\" :hoverable=\"true\">\r\n                <b-table-column field=\"categoryName\" label=\"Categoría\" v-slot=\"props\">\r\n                  {{ props.row.categoryName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"totalSales\" label=\"Total ventas\" numeric v-slot=\"props\">\r\n                  ${{ formatNumber(props.row.totalSales) }}\r\n                </b-table-column>\r\n              </b-table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Productos por marca -->\r\n        <div class=\"column is-half\">\r\n          <div class=\"card dashboard-card\">\r\n            <header class=\"card-header\">\r\n              <p class=\"card-header-title\">\r\n                <b-icon icon=\"trophy\" type=\"is-danger\"></b-icon>\r\n                Top productos por marca\r\n              </p>\r\n            </header>\r\n            <div class=\"card-content\">\r\n              <b-table :data=\"productosPorMarca\" :loading=\"cargando.topByBrand\" :striped=\"true\" :hoverable=\"true\">\r\n                <b-table-column field=\"brandName\" label=\"Marca\" v-slot=\"props\">\r\n                  {{ props.row.brandName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"productName\" label=\"Producto\" v-slot=\"props\">\r\n                  {{ props.row.productName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"totalUnitsSold\" label=\"Unidades\" numeric v-slot=\"props\">\r\n                  {{ formatNumber(props.row.totalUnitsSold) }}\r\n                </b-table-column>\r\n              </b-table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Productos por categoría -->\r\n        <div class=\"column is-half\">\r\n          <div class=\"card dashboard-card\">\r\n            <header class=\"card-header\">\r\n              <p class=\"card-header-title\">\r\n                <b-icon icon=\"trophy\" type=\"is-danger\"></b-icon>\r\n                Top productos por categoría\r\n              </p>\r\n            </header>\r\n            <div class=\"card-content\">\r\n              <b-table :data=\"productosPorCategoria\" :loading=\"cargando.topByCategory\" :striped=\"true\"\r\n                :hoverable=\"true\">\r\n                <b-table-column field=\"categoryName\" label=\"Categoría\" v-slot=\"props\">\r\n                  {{ props.row.categoryName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"productName\" label=\"Producto\" v-slot=\"props\">\r\n                  {{ props.row.productName }}\r\n                </b-table-column>\r\n                <b-table-column field=\"totalUnitsSold\" label=\"Unidades\" numeric v-slot=\"props\">\r\n                  {{ formatNumber(props.row.totalUnitsSold) }}\r\n                </b-table-column>\r\n              </b-table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendarios flotantes para IVA -->\r\n    <div v-if=\"showIvaStartCalendar\" class=\"floating-calendar\" :style=\"ivaStartCalendarStyle\" ref=\"ivaStartCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMesIvaStart }} de {{ ivaStartCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('ivaStart')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('ivaStart')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in ivaStartCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedIvaStartDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectIvaStartDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearIvaStartDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsIvaStart\">Hoy</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"showIvaEndCalendar\" class=\"floating-calendar\" :style=\"ivaEndCalendarStyle\" ref=\"ivaEndCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMesIvaEnd }} de {{ ivaEndCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('ivaEnd')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('ivaEnd')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in ivaEndCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedIvaEndDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectIvaEndDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearIvaEndDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsIvaEnd\">Hoy</button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendarios flotantes para Cotizaciones -->\r\n    <div v-if=\"showCotizacionesStartCalendar\" class=\"floating-calendar\" :style=\"cotizacionesStartCalendarStyle\"\r\n      ref=\"cotizacionesStartCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMesCotizacionesStart }} de {{ cotizacionesStartCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('cotizacionesStart')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('cotizacionesStart')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in cotizacionesStartCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedCotizacionesStartDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectCotizacionesStartDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearCotizacionesStartDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsCotizacionesStart\">Hoy</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"showCotizacionesEndCalendar\" class=\"floating-calendar\" :style=\"cotizacionesEndCalendarStyle\"\r\n      ref=\"cotizacionesEndCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMesCotizacionesEnd }} de {{ cotizacionesEndCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('cotizacionesEnd')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('cotizacionesEnd')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in cotizacionesEndCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedCotizacionesEndDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectCotizacionesEndDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearCotizacionesEndDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsCotizacionesEnd\">Hoy</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiRequest from \"@/Servicios/HttpService\";\r\nimport HistorialVentas from \"../Ventas/HistorialVentas\";\r\nimport '@/components/stilos/detalles.css';\r\nimport { generateYearRange } from \"@/helpers/yearHelper\";\r\nimport AyudanteSesion from \"@/Servicios/AyudanteSesion\";\r\n\r\nexport default {\r\n  name: \"InicioComponent\",\r\n\r\n  components: {\r\n    HistorialVentas,\r\n  },\r\n\r\n  data() {\r\n    const today = new Date();\r\n    const currentYear = today.getFullYear();\r\n    const currentMonth = today.getMonth();\r\n\r\n    return {\r\n      isAdmin: false,\r\n      historialPagos: {\r\n        data: [],\r\n        total: 0,\r\n        page: 1,\r\n        limit: 10,\r\n        totalPages: 0,\r\n      },\r\n      productosMayoresVentas: [],\r\n      totalesPorMarca: [],\r\n      totalesPorCategoria: [],\r\n      productosPorMarca: [],\r\n      productosPorCategoria: [],\r\n      productosVendidos: [],\r\n      productosPaginacion: {\r\n        total: 0,\r\n        currentPage: 1,\r\n        perPage: 10,\r\n        totalPages: 0,\r\n      },\r\n      productosVendidosPorId: [],\r\n      filtroProductos: {\r\n        id: 1,\r\n        type: \"sale\",\r\n      },\r\n      limite: 5,\r\n      cargando: {\r\n        pagos: false,\r\n        productos: false,\r\n        topSold: false,\r\n        byBrand: false,\r\n        byCategory: false,\r\n        topByBrand: false,\r\n        topByCategory: false,\r\n        byIdAndType: false,\r\n        cuentas: false,\r\n        iva: false,\r\n        ivaRango: false,\r\n        ventasUsuario: false,\r\n        usuarios: false,\r\n        cotizaciones: false,\r\n        ingresosDiarios: false,\r\n        ingresosSemanales: false, // Nuevo estado de carga para ingresos semanales\r\n      },\r\n      filtroNombreProducto: \"\",\r\n      paginaActual: 1,\r\n      porPagina: 10,\r\n      filtroFechas: {\r\n        inicio: null,\r\n        fin: null,\r\n      },\r\n      paginaActualPagos: 1,\r\n      porPaginaPagos: 10,\r\n      cuentasPorCobrar: [],\r\n      cuentasPaginacion: {\r\n        total: 0,\r\n        currentPage: 1,\r\n        perPage: 10,\r\n        totalPages: 0,\r\n      },\r\n      paginaActualCuentas: 1,\r\n      porPaginaCuentas: 10,\r\n      filtroIVA: {\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n      },\r\n      ivaMensual: {\r\n        totalIVA: \"0.00\",\r\n        totalSales: \"0.00\",\r\n      },\r\n      filtroIVARango: {\r\n        startDate: null,\r\n        endDate: null,\r\n      },\r\n      ivaRango: {\r\n        totalIVA: \"0.00\",\r\n        totalSales: \"0.00\",\r\n      },\r\n      months: [\r\n        { value: 1, label: \"Enero\" },\r\n        { value: 2, label: \"Febrero\" },\r\n        { value: 3, label: \"Marzo\" },\r\n        { value: 4, label: \"Abril\" },\r\n        { value: 5, label: \"Mayo\" },\r\n        { value: 6, label: \"Junio\" },\r\n        { value: 7, label: \"Julio\" },\r\n        { value: 8, label: \"Agosto\" },\r\n        { value: 9, label: \"Septiembre\" },\r\n        { value: 10, label: \"Octubre\" },\r\n        { value: 11, label: \"Noviembre\" },\r\n        { value: 12, label: \"Diciembre\" },\r\n      ],\r\n      availableYears: generateYearRange(2000, currentYear),\r\n      ventasMensualesUsuario: [],\r\n      filtroVentasUsuario: {\r\n        id: 1,\r\n        year: new Date().getFullYear(),\r\n      },\r\n      usuarios: [],\r\n      cotizaciones: [],\r\n      filtroCotizaciones: {\r\n        startDate: null,\r\n        endDate: null,\r\n      },\r\n      busquedaCliente: \"\",\r\n      filtroEstado: \"\",\r\n      cuentasPorPagina: 10,\r\n\r\n      // Variables para ingresos diarios\r\n      ingresosDiarios: {\r\n        totalIncome: \"0.00\"\r\n      },\r\n      filtroIngresosDiarios: {\r\n        id: 1\r\n      },\r\n\r\n      // Nuevas variables para ingresos semanales\r\n      ingresosSemanales: {\r\n        totalIncome: \"0.00\"\r\n      },\r\n      filtroIngresosSemanales: {\r\n        id: 1\r\n      },\r\n\r\n      // Variables para los calendarios personalizados\r\n      // Calendario IVA\r\n      ivaFechaInicioInput: \"\",\r\n      ivaFechaFinInput: \"\",\r\n      showIvaStartCalendar: false,\r\n      showIvaEndCalendar: false,\r\n      ivaStartCalendarMonth: currentMonth,\r\n      ivaStartCalendarYear: currentYear,\r\n      ivaEndCalendarMonth: currentMonth,\r\n      ivaEndCalendarYear: currentYear,\r\n      ivaStartCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n      ivaEndCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n\r\n      // Calendario Cotizaciones\r\n      cotizacionesFechaInicioInput: \"\",\r\n      cotizacionesFechaFinInput: \"\",\r\n      showCotizacionesStartCalendar: false,\r\n      showCotizacionesEndCalendar: false,\r\n      cotizacionesStartCalendarMonth: currentMonth,\r\n      cotizacionesStartCalendarYear: currentYear,\r\n      cotizacionesEndCalendarMonth: currentMonth,\r\n      cotizacionesEndCalendarYear: currentYear,\r\n      cotizacionesStartCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n      cotizacionesEndCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n\r\n      // Variables comunes para los calendarios\r\n      diasSemana: [\"L\", \"M\", \"X\", \"J\", \"V\", \"S\", \"D\"],\r\n      meses: [\r\n        \"enero\",\r\n        \"febrero\",\r\n        \"marzo\",\r\n        \"abril\",\r\n        \"mayo\",\r\n        \"junio\",\r\n        \"julio\",\r\n        \"agosto\",\r\n        \"septiembre\",\r\n        \"octubre\",\r\n        \"noviembre\",\r\n        \"diciembre\",\r\n      ],\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    productosPaginados() {\r\n      if (!this.filtroNombreProducto) {\r\n        return this.productosVendidos;\r\n      }\r\n      const filtro = this.filtroNombreProducto.toLowerCase();\r\n      return this.productosVendidos.filter((producto) =>\r\n        producto.nombreProducto.toLowerCase().includes(filtro)\r\n      );\r\n    },\r\n    pagosFiltrados() {\r\n      if (!this.filtroFechas.inicio || !this.filtroFechas.fin) {\r\n        return this.historialPagos;\r\n      }\r\n      return this.historialPagos.filter((pago) => {\r\n        const fechaPago = new Date(pago.date);\r\n        return (\r\n          fechaPago >= this.filtroFechas.inicio &&\r\n          fechaPago <= this.filtroFechas.fin\r\n        );\r\n      });\r\n    },\r\n    pagosPaginados() {\r\n      return this.historialPagos.data || [];\r\n    },\r\n    cuentasAgrupadasPorCliente() {\r\n      const cuentasAgrupadas = this.cuentasPorCobrar.reduce((acc, cuenta) => {\r\n        const clienteId = cuenta.customer.id;\r\n        if (!acc[clienteId]) {\r\n          acc[clienteId] = {\r\n            id: clienteId,\r\n            customer: cuenta.customer,\r\n            cuentas: [],\r\n            totalAmount: 0,\r\n            totalPaid: 0,\r\n            totalToPay: 0,\r\n          };\r\n        }\r\n        acc[clienteId].cuentas.push(cuenta);\r\n        acc[clienteId].totalAmount += parseFloat(cuenta.total);\r\n        acc[clienteId].totalPaid += parseFloat(cuenta.paid);\r\n        acc[clienteId].totalToPay += parseFloat(cuenta.toPay);\r\n        return acc;\r\n      }, {});\r\n\r\n      return Object.values(cuentasAgrupadas);\r\n    },\r\n    cuentasAgrupadasFiltradas() {\r\n      return this.cuentasAgrupadasPorCliente.filter((cuenta) => {\r\n        const nombreCoincide =\r\n          !this.busquedaCliente ||\r\n          cuenta.customer.name\r\n            .toLowerCase()\r\n            .includes(this.busquedaCliente.toLowerCase());\r\n        const estadoCoincide =\r\n          !this.filtroEstado ||\r\n          this.obtenerEstadoCuenta(cuenta) === this.filtroEstado;\r\n        return nombreCoincide && estadoCoincide;\r\n      });\r\n    },\r\n    cuentasAgrupadasPaginadas() {\r\n      const inicio = (this.paginaActualCuentas - 1) * this.cuentasPorPagina;\r\n      const fin = inicio + this.cuentasPorPagina;\r\n      return this.cuentasAgrupadasFiltradas.slice(inicio, fin);\r\n    },\r\n\r\n    // Computed properties para los calendarios de IVA\r\n    nombreMesIvaStart() {\r\n      return this.meses[this.ivaStartCalendarMonth];\r\n    },\r\n    nombreMesIvaEnd() {\r\n      return this.meses[this.ivaEndCalendarMonth];\r\n    },\r\n    ivaStartCalendarDays() {\r\n      return this.getCalendarDays(this.ivaStartCalendarYear, this.ivaStartCalendarMonth);\r\n    },\r\n    ivaEndCalendarDays() {\r\n      return this.getCalendarDays(this.ivaEndCalendarYear, this.ivaEndCalendarMonth);\r\n    },\r\n\r\n    // Computed properties para los calendarios de Cotizaciones\r\n    nombreMesCotizacionesStart() {\r\n      return this.meses[this.cotizacionesStartCalendarMonth];\r\n    },\r\n    nombreMesCotizacionesEnd() {\r\n      return this.meses[this.cotizacionesEndCalendarMonth];\r\n    },\r\n    cotizacionesStartCalendarDays() {\r\n      return this.getCalendarDays(this.cotizacionesStartCalendarYear, this.cotizacionesStartCalendarMonth);\r\n    },\r\n    cotizacionesEndCalendarDays() {\r\n      return this.getCalendarDays(this.cotizacionesEndCalendarYear, this.cotizacionesEndCalendarMonth);\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.cargarTodosDatos();\r\n    document.addEventListener('click', this.handleClickOutside);\r\n    window.addEventListener('resize', this.updateCalendarPositions);\r\n    window.addEventListener('scroll', this.updateCalendarPositions);\r\n    this.validRol()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    document.removeEventListener('click', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateCalendarPositions);\r\n    window.removeEventListener('scroll', this.updateCalendarPositions);\r\n  },\r\n\r\n  methods: {\r\n    formatNumber(value) {\r\n      if (!value) return \"0.00\";\r\n      const num = typeof value === \"string\" ? parseFloat(value) : Number(value);\r\n      return isNaN(num)\r\n        ? \"0.00\"\r\n        : num.toLocaleString(\"es-MX\", {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        });\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString(\"es-MX\", {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      });\r\n    },\r\n\r\n    obtenerFechaActual() {\r\n      return new Date().toLocaleDateString(\"es-MX\", {\r\n        weekday: \"long\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n      });\r\n    },\r\n\r\n    obtenerRangoSemanaActual() {\r\n      const today = new Date();\r\n      const firstDayOfWeek = new Date(today);\r\n      const day = today.getDay();\r\n      const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Ajustar cuando el día es domingo\r\n      firstDayOfWeek.setDate(diff);\r\n      \r\n      const lastDayOfWeek = new Date(firstDayOfWeek);\r\n      lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);\r\n      \r\n      const formatOptions = { day: 'numeric', month: 'long' };\r\n      const firstDayFormatted = firstDayOfWeek.toLocaleDateString('es-MX', formatOptions);\r\n      const lastDayFormatted = lastDayOfWeek.toLocaleDateString('es-MX', formatOptions);\r\n      const yearFormatted = today.toLocaleDateString('es-MX', { year: 'numeric' });\r\n      \r\n      return `${firstDayFormatted} al ${lastDayFormatted} de ${yearFormatted}`;\r\n    },\r\n\r\n    async cargarTodosDatos() {\r\n      await Promise.all([\r\n        this.obtenerProductosVendidosConNombres(),\r\n        this.obtenerProductosMayoresVentas(),\r\n        this.obtenerTotalesPorMarca(),\r\n        this.obtenerTotalesPorCategoria(),\r\n        this.obtenerProductosPorMarca(),\r\n        this.obtenerProductosPorCategoria(),\r\n        this.obtenerIVAMensual(),\r\n        this.obtenerIVARango(),\r\n        this.obtenerVentasMensualesUsuario(),\r\n        this.obtenerUsuarios(),\r\n        this.obtenerIngresosDiariosUsuario(),\r\n        this.obtenerIngresosSemanalesUsuario(), // Agregamos la carga de ingresos semanales\r\n      ]);\r\n    },\r\n    validRol (){\r\n      const {rol} = AyudanteSesion.obtenerDatosSesion();\r\n      this.isAdmin = rol === 'Admin';\r\n    },\r\n\r\n    async obtenerProductosVendidosConNombres() {\r\n      this.cargando.productos = true;\r\n      try {\r\n        const respuestaProductosVendidos = await apiRequest({\r\n          method: \"GET\",\r\n          path: `sold-products?page=${this.productosPaginacion.currentPage}&limit=${this.productosPaginacion.perPage}`,\r\n        });\r\n\r\n        if (respuestaProductosVendidos?.data) {\r\n          const productosVendidos = respuestaProductosVendidos.data.data || [];\r\n\r\n          this.productosPaginacion.total =\r\n            respuestaProductosVendidos.data.total || 0;\r\n          this.productosPaginacion.totalPages =\r\n            respuestaProductosVendidos.data.totalPages || 0;\r\n\r\n          const peticionesDetallesProductos = productosVendidos.map(\r\n            (producto) =>\r\n              apiRequest({\r\n                method: \"GET\",\r\n                path: `sold-products/${producto.id}/${producto.type}`,\r\n              })\r\n          );\r\n\r\n          const respuestasDetallesProductos = await Promise.all(\r\n            peticionesDetallesProductos\r\n          );\r\n\r\n          this.productosVendidos = productosVendidos.map(\r\n            (producto, indice) => ({\r\n              ...producto,\r\n              nombreProducto:\r\n                respuestasDetallesProductos[indice].data[0]?.product_name ||\r\n                \"Desconocido\",\r\n            })\r\n          );\r\n\r\n          console.log(\r\n            \"Productos vendidos con nombres:\",\r\n            this.productosVendidos\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error obteniendo productos vendidos:\", error);\r\n        this.mostrarError(\"Error al cargar los productos vendidos\");\r\n      } finally {\r\n        this.cargando.productos = false;\r\n      }\r\n    },\r\n\r\n\r\n    async obtenerProductosMayoresVentas() {\r\n      this.cargando.topSold = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `sold-products/top-sold?limit=${this.limite}`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.productosMayoresVentas = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data.data || [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener productos más vendidos:\", error);\r\n        this.mostrarError(\"Error al cargar los productos más vendidos\");\r\n      } finally {\r\n        this.cargando.topSold = false;\r\n      }\r\n    },\r\n\r\n    async obtenerTotalesPorMarca() {\r\n      this.cargando.byBrand = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sold-products/totals-by-brand\",\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.totalesPorMarca = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data.data || [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener totales por marca:\", error);\r\n        this.mostrarError(\"Error al cargar los totales por marca\");\r\n      } finally {\r\n        this.cargando.byBrand = false;\r\n      }\r\n    },\r\n\r\n    async obtenerTotalesPorCategoria() {\r\n      this.cargando.byCategory = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sold-products/totals-by-category\",\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.totalesPorCategoria = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data.data || [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener totales por categoría:\", error);\r\n        this.mostrarError(\"Error al cargar los totales por categoría\");\r\n      } finally {\r\n        this.cargando.byCategory = false;\r\n      }\r\n    },\r\n\r\n    async obtenerProductosPorMarca() {\r\n      this.cargando.topByBrand = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sold-products/top-sold-by-brand\",\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.productosPorMarca = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data.data || [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener productos por marca:\", error);\r\n        this.mostrarError(\"Error al cargar los productos por marca\");\r\n      } finally {\r\n        this.cargando.topByBrand = false;\r\n      }\r\n    },\r\n\r\n    async obtenerProductosPorCategoria() {\r\n      this.cargando.topByCategory = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sold-products/top-sold-by-category\",\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.productosPorCategoria = Array.isArray(response.data)\r\n            ? response.data\r\n            : response.data.data || [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener productos por categoría:\", error);\r\n        this.mostrarError(\"Error al cargar los productos por categoría\");\r\n      } finally {\r\n        this.cargando.topByCategory = false;\r\n      }\r\n    },\r\n\r\n    // Método para obtener ingresos diarios del usuario\r\n    async obtenerIngresosDiariosUsuario() {\r\n      if (!this.filtroIngresosDiarios.id) {\r\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\r\n        return;\r\n      }\r\n\r\n      this.cargando.ingresosDiarios = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `users/${this.filtroIngresosDiarios.id}/today-income`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.ingresosDiarios.totalIncome = response.data.totalIncome || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ingresos diarios del usuario:\", error);\r\n        this.mostrarError(\"Error al cargar los ingresos diarios del usuario\");\r\n      } finally {\r\n        this.cargando.ingresosDiarios = false;\r\n      }\r\n    },\r\n\r\n    // Método para obtener ingresos semanales del usuario\r\n    async obtenerIngresosSemanalesUsuario() {\r\n      if (!this.filtroIngresosSemanales.id) {\r\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\r\n        return;\r\n      }\r\n\r\n      this.cargando.ingresosSemanales = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `users/${this.filtroIngresosSemanales.id}/weekly-income`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.ingresosSemanales.totalIncome = response.data.totalIncome || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ingresos semanales del usuario:\", error);\r\n        this.mostrarError(\"Error al cargar los ingresos semanales del usuario\");\r\n      } finally {\r\n        this.cargando.ingresosSemanales = false;\r\n      }\r\n    },\r\n\r\n    // Método para limpiar los ingresos diarios\r\n    limpiarIngresosDiariosUsuario() {\r\n      this.ingresosDiarios.totalIncome = \"0.00\";\r\n      this.filtroIngresosDiarios.id = null;\r\n    },\r\n\r\n    // Método para limpiar los ingresos semanales\r\n    limpiarIngresosSemanalesUsuario() {\r\n      this.ingresosSemanales.totalIncome = \"0.00\";\r\n      this.filtroIngresosSemanales.id = null;\r\n    },\r\n\r\n    async obtenerIVAMensual() {\r\n      this.cargando.iva = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `Tax/monthly?year=${this.filtroIVA.year}&month=${this.filtroIVA.month}`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.ivaMensual = response.data;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener IVA mensual:\", error);\r\n        this.mostrarError(\"Error al cargar el IVA mensual\");\r\n      } finally {\r\n        this.cargando.iva = false;\r\n      }\r\n    },\r\n\r\n    async obtenerIVARango() {\r\n      if (!this.filtroIVARango.startDate || !this.filtroIVARango.endDate) {\r\n\r\n        return;\r\n      }\r\n\r\n      this.cargando.ivaRango = true;\r\n      try {\r\n        const formatDate = (date) => {\r\n          return date.toISOString().split(\"T\")[0];\r\n        };\r\n\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `Tax/range?startDate=${formatDate(\r\n            this.filtroIVARango.startDate\r\n          )}&endDate=${formatDate(this.filtroIVARango.endDate)}`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.ivaRango = response.data;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener IVA por rango:\", error);\r\n        this.mostrarError(\"Error al cargar el IVA por rango\");\r\n      } finally {\r\n        this.cargando.ivaRango = false;\r\n      }\r\n    },\r\n\r\n    async obtenerVentasMensualesUsuario() {\r\n      if (!this.filtroVentasUsuario.id) {\r\n        this.mostrarError(\"Por favor, ingrese un ID de usuario válido\");\r\n        return;\r\n      }\r\n\r\n      this.ventasMensualesUsuario = []; // Limpiar datos antes de la consulta\r\n      this.cargando.ventasUsuario = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `users/${this.filtroVentasUsuario.id}/monthly-sales?year=${this.filtroVentasUsuario.year}`,\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.ventasMensualesUsuario = Array.isArray(response.data)\r\n            ? response.data\r\n            : [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ventas mensuales del usuario:\", error);\r\n        this.mostrarError(\"Error al cargar las ventas mensuales del usuario\");\r\n      } finally {\r\n        this.cargando.ventasUsuario = false;\r\n      }\r\n    },\r\n\r\n    async obtenerUsuarios() {\r\n      this.cargando.usuarios = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"users\",\r\n        });\r\n\r\n        if (response?.data) {\r\n          this.usuarios = Array.isArray(response.data) ? response.data : [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener usuarios:\", error);\r\n        this.mostrarError(\"Error al cargar los usuarios\");\r\n      } finally {\r\n        this.cargando.usuarios = false;\r\n      }\r\n    },\r\n\r\n    cambiarPaginaProductos(pagina) {\r\n      this.productosPaginacion.currentPage = pagina;\r\n      this.obtenerProductosVendidosConNombres();\r\n    },\r\n\r\n    obtenerNombreMes(numeroMes) {\r\n      const meses = [\r\n        \"Enero\",\r\n        \"Febrero\",\r\n        \"Marzo\",\r\n        \"Abril\",\r\n        \"Mayo\",\r\n        \"Junio\",\r\n        \"Julio\",\r\n        \"Agosto\",\r\n        \"Septiembre\",\r\n        \"Octubre\",\r\n        \"Noviembre\",\r\n        \"Diciembre\",\r\n      ];\r\n      return meses[numeroMes - 1] || \"\";\r\n    },\r\n\r\n    limpiarVentasMensualesUsuario() {\r\n      this.ventasMensualesUsuario = [];\r\n      this.filtroVentasUsuario.id = null;\r\n      this.filtroVentasUsuario.year = new Date().getFullYear();\r\n    },\r\n\r\n    mostrarError(mensaje) {\r\n      this.$buefy.toast.open({\r\n        message: mensaje,\r\n        type: \"is-danger\",\r\n        duration: 5000,\r\n      });\r\n    },\r\n\r\n    obtenerEstadoCuenta(cuenta) {\r\n      if (parseFloat(cuenta.totalToPay) === 0) {\r\n        return \"Pagada\";\r\n      } else {\r\n        return \"Pendiente\";\r\n      }\r\n    },\r\n\r\n    obtenerColorEstado(cuenta) {\r\n      const estado = this.obtenerEstadoCuenta(cuenta);\r\n      switch (estado) {\r\n        case \"Pagada\":\r\n          return \"is-success\";\r\n        case \"Pendiente\":\r\n          return \"is-danger\";\r\n        default:\r\n          return \"is-info\";\r\n      }\r\n    },\r\n\r\n    // Métodos para el calendario personalizado\r\n    getCalendarDays(year, month) {\r\n      const firstDay = new Date(year, month, 1);\r\n      const lastDay = new Date(year, month + 1, 0);\r\n      const daysInMonth = lastDay.getDate();\r\n\r\n      // Obtener el día de la semana del primer día (0 = domingo, 1 = lunes, ..., 6 = sábado)\r\n      let firstDayOfWeek = firstDay.getDay();\r\n      // Ajustar para que lunes sea 0\r\n      firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\r\n\r\n      const days = [];\r\n\r\n      // Días del mes anterior\r\n      const prevMonth = month === 0 ? 11 : month - 1;\r\n      const prevMonthYear = month === 0 ? year - 1 : year;\r\n      const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\r\n\r\n      for (let i = 0; i < firstDayOfWeek; i++) {\r\n        const day = daysInPrevMonth - firstDayOfWeek + i + 1;\r\n        days.push({\r\n          day,\r\n          date: new Date(prevMonthYear, prevMonth, day),\r\n          otherMonth: true,\r\n          id: `prev-${day}`\r\n        });\r\n      }\r\n\r\n      // Días del mes actual\r\n      for (let i = 1; i <= daysInMonth; i++) {\r\n        days.push({\r\n          day: i,\r\n          date: new Date(year, month, i),\r\n          otherMonth: false,\r\n          id: `current-${i}`\r\n        });\r\n      }\r\n\r\n      // Días del mes siguiente\r\n      const nextMonth = month === 11 ? 0 : month + 1;\r\n      const nextMonthYear = month === 11 ? year + 1 : year;\r\n      const remainingDays = 42 - days.length; // 6 filas x 7 días\r\n\r\n      for (let i = 1; i <= remainingDays; i++) {\r\n        days.push({\r\n          day: i,\r\n          date: new Date(nextMonthYear, nextMonth, i),\r\n          otherMonth: true,\r\n          id: `next-${i}`\r\n        });\r\n      }\r\n\r\n      return days;\r\n    },\r\n\r\n    isToday(date) {\r\n      const today = new Date();\r\n      return date.getDate() === today.getDate() &&\r\n        date.getMonth() === today.getMonth() &&\r\n        date.getFullYear() === today.getFullYear();\r\n    },\r\n\r\n    formatDateForInput(date) {\r\n      if (!date) return '';\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    },\r\n\r\n    // Métodos para el calendario de IVA\r\n    toggleIvaStartCalendar() {\r\n      if (this.showIvaEndCalendar) {\r\n        this.showIvaEndCalendar = false;\r\n      }\r\n\r\n      this.showIvaStartCalendar = !this.showIvaStartCalendar;\r\n      if (this.showIvaStartCalendar) {\r\n        this.$nextTick(() => {\r\n          this.positionIvaStartCalendar();\r\n        });\r\n      }\r\n    },\r\n\r\n    toggleIvaEndCalendar() {\r\n      if (this.showIvaStartCalendar) {\r\n        this.showIvaStartCalendar = false;\r\n      }\r\n      if (this.showCotizacionesStartCalendar) {\r\n        this.showCotizacionesStartCalendar = false;\r\n      }\r\n      if (this.showCotizacionesEndCalendar) {\r\n        this.showCotizacionesEndCalendar = false;\r\n      }\r\n      this.showIvaEndCalendar = !this.showIvaEndCalendar;\r\n      if (this.showIvaEndCalendar) {\r\n        this.$nextTick(() => {\r\n          this.positionIvaEndCalendar();\r\n        });\r\n      }\r\n    },\r\n\r\n    positionIvaStartCalendar() {\r\n      const inputEl = this.$refs.ivaStartDateContainer;\r\n      if (inputEl && this.$refs.ivaStartCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.ivaStartCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.ivaStartCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    positionIvaEndCalendar() {\r\n      const inputEl = this.$refs.ivaEndDateContainer;\r\n      if (inputEl && this.$refs.ivaEndCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.ivaEndCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.ivaEndCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    isSelectedIvaStartDate(date) {\r\n      if (!this.filtroIVARango.startDate) return false;\r\n\r\n      return date.getDate() === this.filtroIVARango.startDate.getDate() &&\r\n        date.getMonth() === this.filtroIVARango.startDate.getMonth() &&\r\n        date.getFullYear() === this.filtroIVARango.startDate.getFullYear();\r\n    },\r\n\r\n    isSelectedIvaEndDate(date) {\r\n      if (!this.filtroIVARango.endDate) return false;\r\n\r\n      return date.getDate() === this.filtroIVARango.endDate.getDate() &&\r\n        date.getMonth() === this.filtroIVARango.endDate.getMonth() &&\r\n        date.getFullYear() === this.filtroIVARango.endDate.getFullYear();\r\n    },\r\n\r\n    selectIvaStartDate(date) {\r\n      this.filtroIVARango.startDate = new Date(date);\r\n      this.ivaFechaInicioInput = this.formatDateForInput(date);\r\n      this.showIvaStartCalendar = false;\r\n    },\r\n\r\n    selectIvaEndDate(date) {\r\n      this.filtroIVARango.endDate = new Date(date);\r\n      this.ivaFechaFinInput = this.formatDateForInput(date);\r\n      this.showIvaEndCalendar = false;\r\n    },\r\n\r\n    clearIvaStartDate() {\r\n      this.filtroIVARango.startDate = null;\r\n      this.ivaFechaInicioInput = \"\";\r\n      this.showIvaStartCalendar = false;\r\n    },\r\n\r\n    clearIvaEndDate() {\r\n      this.filtroIVARango.endDate = null;\r\n      this.ivaFechaFinInput = \"\";\r\n      this.showIvaEndCalendar = false;\r\n    },\r\n\r\n    setTodayAsIvaStart() {\r\n      const today = new Date();\r\n      this.filtroIVARango.startDate = today;\r\n      this.ivaFechaInicioInput = this.formatDateForInput(today);\r\n      this.ivaStartCalendarMonth = today.getMonth();\r\n      this.ivaStartCalendarYear = today.getFullYear();\r\n      this.showIvaStartCalendar = false;\r\n    },\r\n\r\n    setTodayAsIvaEnd() {\r\n      const today = new Date();\r\n      this.filtroIVARango.endDate = today;\r\n      this.ivaFechaFinInput = this.formatDateForInput(today);\r\n      this.ivaEndCalendarMonth = today.getMonth();\r\n      this.ivaEndCalendarYear = today.getFullYear();\r\n      this.showIvaEndCalendar = false;\r\n    },\r\n\r\n    toggleCotizacionesEndCalendar() {\r\n      if (this.showIvaStartCalendar) {\r\n        this.showIvaStartCalendar = false;\r\n      }\r\n      if (this.showIvaEndCalendar) {\r\n        this.showIvaEndCalendar = false;\r\n      }\r\n      this.showCotizacionesEndCalendar = !this.showCotizacionesEndCalendar;\r\n      if (this.showCotizacionesEndCalendar) {\r\n        this.$nextTick(() => {\r\n          this.positionCotizacionesEndCalendar();\r\n        });\r\n      }\r\n    },\r\n\r\n    positionCotizacionesStartCalendar() {\r\n      const inputEl = this.$refs.cotizacionesStartDateContainer;\r\n      if (inputEl && this.$refs.cotizacionesStartCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.cotizacionesStartCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.cotizacionesStartCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    positionCotizacionesEndCalendar() {\r\n      const inputEl = this.$refs.cotizacionesEndDateContainer;\r\n      if (inputEl && this.$refs.cotizacionesEndCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.cotizacionesEndCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.cotizacionesEndCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    isSelectedCotizacionesStartDate(date) {\r\n      if (!this.filtroCotizaciones.startDate) return false;\r\n\r\n      return date.getDate() === this.filtroCotizaciones.startDate.getDate() &&\r\n        date.getMonth() === this.filtroCotizaciones.startDate.getMonth() &&\r\n        date.getFullYear() === this.filtroCotizaciones.startDate.getFullYear();\r\n    },\r\n\r\n    isSelectedCotizacionesEndDate(date) {\r\n      if (!this.filtroCotizaciones.endDate) return false;\r\n\r\n      return date.getDate() === this.filtroCotizaciones.endDate.getDate() &&\r\n        date.getMonth() === this.filtroCotizaciones.endDate.getMonth() &&\r\n        date.getFullYear() === this.filtroCotizaciones.endDate.getFullYear();\r\n    },\r\n\r\n    selectCotizacionesStartDate(date) {\r\n      this.filtroCotizaciones.startDate = new Date(date);\r\n      this.cotizacionesFechaInicioInput = this.formatDateForInput(date);\r\n      this.showCotizacionesStartCalendar = false;\r\n    },\r\n\r\n    selectCotizacionesEndDate(date) {\r\n      this.filtroCotizaciones.endDate = new Date(date);\r\n      this.cotizacionesFechaFinInput = this.formatDateForInput(date);\r\n      this.showCotizacionesEndCalendar = false;\r\n    },\r\n\r\n    clearCotizacionesStartDate() {\r\n      this.filtroCotizaciones.startDate = null;\r\n      this.cotizacionesFechaInicioInput = \"\";\r\n      this.showCotizacionesStartCalendar = false;\r\n    },\r\n\r\n    clearCotizacionesEndDate() {\r\n      this.filtroCotizaciones.endDate = null;\r\n      this.cotizacionesFechaFinInput = \"\";\r\n      this.showCotizacionesEndCalendar = false;\r\n    },\r\n\r\n    setTodayAsCotizacionesStart() {\r\n      const today = new Date();\r\n      this.filtroCotizaciones.startDate = today;\r\n      this.cotizacionesFechaInicioInput = this.formatDateForInput(today);\r\n      this.cotizacionesStartCalendarMonth = today.getMonth();\r\n      this.cotizacionesStartCalendarYear = today.getFullYear();\r\n      this.showCotizacionesStartCalendar = false;\r\n    },\r\n\r\n    setTodayAsCotizacionesEnd() {\r\n      const today = new Date();\r\n      this.filtroCotizaciones.endDate = today;\r\n      this.cotizacionesFechaFinInput = this.formatDateForInput(today);\r\n      this.cotizacionesEndCalendarMonth = today.getMonth();\r\n      this.cotizacionesEndCalendarYear = today.getFullYear();\r\n      this.showCotizacionesEndCalendar = false;\r\n    },\r\n\r\n    // Métodos comunes para todos los calendarios\r\n    prevMonth(type) {\r\n      switch (type) {\r\n        case 'ivaStart':\r\n          if (this.ivaStartCalendarMonth === 0) {\r\n            this.ivaStartCalendarMonth = 11;\r\n            this.ivaStartCalendarYear--;\r\n          } else {\r\n            this.ivaStartCalendarMonth--;\r\n          }\r\n          break;\r\n        case 'ivaEnd':\r\n          if (this.ivaEndCalendarMonth === 0) {\r\n            this.ivaEndCalendarMonth = 11;\r\n            this.ivaEndCalendarYear--;\r\n          } else {\r\n            this.ivaEndCalendarMonth--;\r\n          }\r\n          break;\r\n        case 'cotizacionesStart':\r\n          if (this.cotizacionesStartCalendarMonth === 0) {\r\n            this.cotizacionesStartCalendarMonth = 11;\r\n            this.cotizacionesStartCalendarYear--;\r\n          } else {\r\n            this.cotizacionesStartCalendarMonth--;\r\n          }\r\n          break;\r\n        case 'cotizacionesEnd':\r\n          if (this.cotizacionesEndCalendarMonth === 0) {\r\n            this.cotizacionesEndCalendarMonth = 11;\r\n            this.cotizacionesEndCalendarYear--;\r\n          } else {\r\n            this.cotizacionesEndCalendarMonth--;\r\n          }\r\n          break;\r\n      }\r\n    },\r\n\r\n    nextMonth(type) {\r\n      switch (type) {\r\n        case 'ivaStart':\r\n          if (this.ivaStartCalendarMonth === 11) {\r\n            this.ivaStartCalendarMonth = 0;\r\n            this.ivaStartCalendarYear++;\r\n          } else {\r\n            this.ivaStartCalendarMonth++;\r\n          }\r\n          break;\r\n        case 'ivaEnd':\r\n          if (this.ivaEndCalendarMonth === 11) {\r\n            this.ivaEndCalendarMonth = 0;\r\n            this.ivaEndCalendarYear++;\r\n          } else {\r\n            this.ivaEndCalendarMonth++;\r\n          }\r\n          break;\r\n        case 'cotizacionesStart':\r\n          if (this.cotizacionesStartCalendarMonth === 11) {\r\n            this.cotizacionesStartCalendarMonth = 0;\r\n            this.cotizacionesStartCalendarYear++;\r\n          } else {\r\n            this.cotizacionesStartCalendarMonth++;\r\n          }\r\n          break;\r\n        case 'cotizacionesEnd':\r\n          if (this.cotizacionesEndCalendarMonth === 11) {\r\n            this.cotizacionesEndCalendarMonth = 0;\r\n            this.cotizacionesEndCalendarYear++;\r\n          } else {\r\n            this.cotizacionesEndCalendarMonth++;\r\n          }\r\n          break;\r\n      }\r\n    },\r\n\r\n    updateCalendarPositions() {\r\n      if (this.showIvaStartCalendar) {\r\n        this.positionIvaStartCalendar();\r\n      }\r\n      if (this.showIvaEndCalendar) {\r\n        this.positionIvaEndCalendar();\r\n      }\r\n      if (this.showCotizacionesStartCalendar) {\r\n        this.positionCotizacionesStartCalendar();\r\n      }\r\n      if (this.showCotizacionesEndCalendar) {\r\n        this.positionCotizacionesEndCalendar();\r\n      }\r\n    },\r\n\r\n    handleClickOutside(event) {\r\n      // Cerrar calendario IVA inicio si se hace clic fuera\r\n      if (this.showIvaStartCalendar &&\r\n        this.$refs.ivaStartCalendarRef &&\r\n        !this.$refs.ivaStartCalendarRef.contains(event.target) &&\r\n        this.$refs.ivaStartDateContainer &&\r\n        !this.$refs.ivaStartDateContainer.contains(event.target)) {\r\n        this.showIvaStartCalendar = false;\r\n      }\r\n\r\n      // Cerrar calendario IVA fin si se hace clic fuera\r\n      if (this.showIvaEndCalendar &&\r\n        this.$refs.ivaEndCalendarRef &&\r\n        !this.$refs.ivaEndCalendarRef.contains(event.target) &&\r\n        this.$refs.ivaEndDateContainer &&\r\n        !this.$refs.ivaEndDateContainer.contains(event.target)) {\r\n        this.showIvaEndCalendar = false;\r\n      }\r\n\r\n      // Cerrar calendario Cotizaciones inicio si se hace clic fuera\r\n      if (this.showCotizacionesStartCalendar &&\r\n        this.$refs.cotizacionesStartCalendarRef &&\r\n        !this.$refs.cotizacionesStartCalendarRef.contains(event.target) &&\r\n        this.$refs.cotizacionesStartDateContainer &&\r\n        !this.$refs.cotizacionesStartDateContainer.contains(event.target)) {\r\n        this.showCotizacionesStartCalendar = false;\r\n      }\r\n\r\n      // Cerrar calendario Cotizaciones fin si se hace clic fuera\r\n      if (this.showCotizacionesEndCalendar &&\r\n        this.$refs.cotizacionesEndCalendarRef &&\r\n        !this.$refs.cotizacionesEndCalendarRef.contains(event.target) &&\r\n        this.$refs.cotizacionesEndDateContainer &&\r\n        !this.$refs.cotizacionesEndDateContainer.contains(event.target)) {\r\n        this.showCotizacionesEndCalendar = false;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 2rem;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.dashboard-header {\r\n  margin-bottom: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.dashboard-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.dashboard-card {\r\n  margin-bottom: 2rem;\r\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\r\n}\r\n\r\n.card-header-title {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.card-header-title .icon {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.card-content {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.b-table {\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.b-table .table {\r\n  background-color: transparent;\r\n}\r\n\r\n.mb-6 {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Estilos para el contenedor de entrada de fecha */\r\n.date-input-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.date-input-container .icon {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n}\r\n\r\n/* Estilos para el calendario flotante */\r\n.floating-calendar {\r\n  position: absolute;\r\n  width: 300px;\r\n  background-color: white;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  z-index: 1000;\r\n}\r\n\r\n.calendar-header {\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n}\r\n\r\n.month-year {\r\n  font-weight: bold;\r\n  position: relative;\r\n  font-size: 1.1rem;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.nav-buttons {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.nav-buttons button {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0 5px;\r\n  font-size: 1.2rem;\r\n  color: #3273dc;\r\n}\r\n\r\n.weekdays {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  text-align: center;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.days {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  gap: 5px;\r\n}\r\n\r\n.day {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 35px;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.day:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.day.other-month {\r\n  color: #b5b5b5;\r\n}\r\n\r\n.day.selected {\r\n  background-color: #3273dc;\r\n  color: white;\r\n}\r\n\r\n.day.today {\r\n  border: 1px solid #3273dc;\r\n}\r\n\r\n.calendar-footer {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 15px;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.btn-clear,\r\n.btn-today {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #3273dc;\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.btn-clear:hover,\r\n.btn-today:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.btn-today {\r\n  font-weight: bold;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .column {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .floating-calendar {\r\n    width: 280px;\r\n    left: 50% !important;\r\n    transform: translateX(-50%);\r\n  }\r\n}\r\n</style>"],"mappings":";;;;;AAokBA,OAAAA,UAAA;AACA,OAAAC,eAAA;AACA;AACA,SAAAC,iBAAA;AACA,OAAAC,cAAA;AAEA;EACAC,IAAA;EAEAC,UAAA;IACAJ;EACA;EAEAK,KAAA;IACA,MAAAC,KAAA,OAAAC,IAAA;IACA,MAAAC,WAAA,GAAAF,KAAA,CAAAG,WAAA;IACA,MAAAC,YAAA,GAAAJ,KAAA,CAAAK,QAAA;IAEA;MACAC,OAAA;MACAC,cAAA;QACAR,IAAA;QACAS,KAAA;QACAC,IAAA;QACAC,KAAA;QACAC,UAAA;MACA;MACAC,sBAAA;MACAC,eAAA;MACAC,mBAAA;MACAC,iBAAA;MACAC,qBAAA;MACAC,iBAAA;MACAC,mBAAA;QACAV,KAAA;QACAW,WAAA;QACAC,OAAA;QACAT,UAAA;MACA;MACAU,sBAAA;MACAC,eAAA;QACAC,EAAA;QACAC,IAAA;MACA;MACAC,MAAA;MACAC,QAAA;QACAC,KAAA;QACAC,SAAA;QACAC,OAAA;QACAC,OAAA;QACAC,UAAA;QACAC,UAAA;QACAC,aAAA;QACAC,WAAA;QACAC,OAAA;QACAC,GAAA;QACAC,QAAA;QACAC,aAAA;QACAC,QAAA;QACAC,YAAA;QACAC,eAAA;QACAC,iBAAA;MACA;MACAC,oBAAA;MACAC,YAAA;MACAC,SAAA;MACAC,YAAA;QACAC,MAAA;QACAC,GAAA;MACA;MACAC,iBAAA;MACAC,cAAA;MACAC,gBAAA;MACAC,iBAAA;QACA5C,KAAA;QACAW,WAAA;QACAC,OAAA;QACAT,UAAA;MACA;MACA0C,mBAAA;MACAC,gBAAA;MACAC,SAAA;QACAC,IAAA,MAAAvD,IAAA,GAAAE,WAAA;QACAsD,KAAA,MAAAxD,IAAA,GAAAI,QAAA;MACA;MACAqD,UAAA;QACAC,QAAA;QACAC,UAAA;MACA;MACAC,cAAA;QACAC,SAAA;QACAC,OAAA;MACA;MACA1B,QAAA;QACAsB,QAAA;QACAC,UAAA;MACA;MACAI,MAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,EACA;MACAC,cAAA,EAAAxE,iBAAA,OAAAO,WAAA;MACAkE,sBAAA;MACAC,mBAAA;QACA9C,EAAA;QACAiC,IAAA,MAAAvD,IAAA,GAAAE,WAAA;MACA;MACAoC,QAAA;MACAC,YAAA;MACA8B,kBAAA;QACAR,SAAA;QACAC,OAAA;MACA;MACAQ,eAAA;MACAC,YAAA;MACAC,gBAAA;MAEA;MACAhC,eAAA;QACAiC,WAAA;MACA;MACAC,qBAAA;QACApD,EAAA;MACA;MAEA;MACAmB,iBAAA;QACAgC,WAAA;MACA;MACAE,uBAAA;QACArD,EAAA;MACA;MAEA;MACA;MACAsD,mBAAA;MACAC,gBAAA;MACAC,oBAAA;MACAC,kBAAA;MACAC,qBAAA,EAAA7E,YAAA;MACA8E,oBAAA,EAAAhF,WAAA;MACAiF,mBAAA,EAAA/E,YAAA;MACAgF,kBAAA,EAAAlF,WAAA;MACAmF,qBAAA;QACAC,GAAA;QACAC,IAAA;MACA;MACAC,mBAAA;QACAF,GAAA;QACAC,IAAA;MACA;MAEA;MACAE,4BAAA;MACAC,yBAAA;MACAC,6BAAA;MACAC,2BAAA;MACAC,8BAAA,EAAAzF,YAAA;MACA0F,6BAAA,EAAA5F,WAAA;MACA6F,4BAAA,EAAA3F,YAAA;MACA4F,2BAAA,EAAA9F,WAAA;MACA+F,8BAAA;QACAX,GAAA;QACAC,IAAA;MACA;MACAW,4BAAA;QACAZ,GAAA;QACAC,IAAA;MACA;MAEA;MACAY,UAAA;MACAC,KAAA,GACA,SACA,WACA,SACA,SACA,QACA,SACA,SACA,UACA,cACA,WACA,aACA;IAEA;EACA;EAEAC,QAAA;IACAC,mBAAA;MACA,UAAA3D,oBAAA;QACA,YAAA1B,iBAAA;MACA;MACA,MAAAsF,MAAA,QAAA5D,oBAAA,CAAA6D,WAAA;MACA,YAAAvF,iBAAA,CAAAwF,MAAA,CAAAC,QAAA,IACAA,QAAA,CAAAC,cAAA,CAAAH,WAAA,GAAAI,QAAA,CAAAL,MAAA,CACA;IACA;IACAM,eAAA;MACA,UAAA/D,YAAA,CAAAC,MAAA,UAAAD,YAAA,CAAAE,GAAA;QACA,YAAAzC,cAAA;MACA;MACA,YAAAA,cAAA,CAAAkG,MAAA,CAAAK,IAAA;QACA,MAAAC,SAAA,OAAA9G,IAAA,CAAA6G,IAAA,CAAAE,IAAA;QACA,OACAD,SAAA,SAAAjE,YAAA,CAAAC,MAAA,IACAgE,SAAA,SAAAjE,YAAA,CAAAE,GAAA;MAEA;IACA;IACAiE,eAAA;MACA,YAAA1G,cAAA,CAAAR,IAAA;IACA;IACAmH,2BAAA;MACA,MAAAC,gBAAA,QAAAhE,gBAAA,CAAAiE,MAAA,EAAAC,GAAA,EAAAC,MAAA;QACA,MAAAC,SAAA,GAAAD,MAAA,CAAAE,QAAA,CAAAjG,EAAA;QACA,KAAA8F,GAAA,CAAAE,SAAA;UACAF,GAAA,CAAAE,SAAA;YACAhG,EAAA,EAAAgG,SAAA;YACAC,QAAA,EAAAF,MAAA,CAAAE,QAAA;YACArF,OAAA;YACAsF,WAAA;YACAC,SAAA;YACAC,UAAA;UACA;QACA;QACAN,GAAA,CAAAE,SAAA,EAAApF,OAAA,CAAAyF,IAAA,CAAAN,MAAA;QACAD,GAAA,CAAAE,SAAA,EAAAE,WAAA,IAAAI,UAAA,CAAAP,MAAA,CAAA9G,KAAA;QACA6G,GAAA,CAAAE,SAAA,EAAAG,SAAA,IAAAG,UAAA,CAAAP,MAAA,CAAAQ,IAAA;QACAT,GAAA,CAAAE,SAAA,EAAAI,UAAA,IAAAE,UAAA,CAAAP,MAAA,CAAAS,KAAA;QACA,OAAAV,GAAA;MACA;MAEA,OAAAW,MAAA,CAAAC,MAAA,CAAAd,gBAAA;IACA;IACAe,0BAAA;MACA,YAAAhB,0BAAA,CAAAT,MAAA,CAAAa,MAAA;QACA,MAAAa,cAAA,GACA,MAAA5D,eAAA,IACA+C,MAAA,CAAAE,QAAA,CAAA3H,IAAA,CACA2G,WAAA,GACAI,QAAA,MAAArC,eAAA,CAAAiC,WAAA;QACA,MAAA4B,cAAA,GACA,MAAA5D,YAAA,IACA,KAAA6D,mBAAA,CAAAf,MAAA,WAAA9C,YAAA;QACA,OAAA2D,cAAA,IAAAC,cAAA;MACA;IACA;IACAE,0BAAA;MACA,MAAAvF,MAAA,SAAAM,mBAAA,aAAAoB,gBAAA;MACA,MAAAzB,GAAA,GAAAD,MAAA,QAAA0B,gBAAA;MACA,YAAAyD,yBAAA,CAAAK,KAAA,CAAAxF,MAAA,EAAAC,GAAA;IACA;IAEA;IACAwF,kBAAA;MACA,YAAApC,KAAA,MAAAnB,qBAAA;IACA;IACAwD,gBAAA;MACA,YAAArC,KAAA,MAAAjB,mBAAA;IACA;IACAuD,qBAAA;MACA,YAAAC,eAAA,MAAAzD,oBAAA,OAAAD,qBAAA;IACA;IACA2D,mBAAA;MACA,YAAAD,eAAA,MAAAvD,kBAAA,OAAAD,mBAAA;IACA;IAEA;IACA0D,2BAAA;MACA,YAAAzC,KAAA,MAAAP,8BAAA;IACA;IACAiD,yBAAA;MACA,YAAA1C,KAAA,MAAAL,4BAAA;IACA;IACAgD,8BAAA;MACA,YAAAJ,eAAA,MAAA7C,6BAAA,OAAAD,8BAAA;IACA;IACAmD,4BAAA;MACA,YAAAL,eAAA,MAAA3C,2BAAA,OAAAD,4BAAA;IACA;EACA;EAEAkD,QAAA;IACA,KAAAC,gBAAA;IACAC,QAAA,CAAAC,gBAAA,eAAAC,kBAAA;IACAC,MAAA,CAAAF,gBAAA,gBAAAG,uBAAA;IACAD,MAAA,CAAAF,gBAAA,gBAAAG,uBAAA;IACA,KAAAC,QAAA;EACA;EAEAC,cAAA;IACAN,QAAA,CAAAO,mBAAA,eAAAL,kBAAA;IACAC,MAAA,CAAAI,mBAAA,gBAAAH,uBAAA;IACAD,MAAA,CAAAI,mBAAA,gBAAAH,uBAAA;EACA;EAEAI,OAAA;IACAC,aAAA3F,KAAA;MACA,KAAAA,KAAA;MACA,MAAA4F,GAAA,UAAA5F,KAAA,gBAAA4D,UAAA,CAAA5D,KAAA,IAAA6F,MAAA,CAAA7F,KAAA;MACA,OAAA8F,KAAA,CAAAF,GAAA,IACA,SACAA,GAAA,CAAAG,cAAA;QACAC,qBAAA;QACAC,qBAAA;MACA;IACA;IAEAC,WAAAC,UAAA;MACA,MAAApD,IAAA,OAAA/G,IAAA,CAAAmK,UAAA;MACA,OAAApD,IAAA,CAAAqD,kBAAA;QACAC,GAAA;QACA7G,KAAA;QACAD,IAAA;QACA+G,IAAA;QACAC,MAAA;MACA;IACA;IAEAC,mBAAA;MACA,WAAAxK,IAAA,GAAAoK,kBAAA;QACAK,OAAA;QACAlH,IAAA;QACAC,KAAA;QACA6G,GAAA;MACA;IACA;IAEAK,yBAAA;MACA,MAAA3K,KAAA,OAAAC,IAAA;MACA,MAAA2K,cAAA,OAAA3K,IAAA,CAAAD,KAAA;MACA,MAAAsK,GAAA,GAAAtK,KAAA,CAAA6K,MAAA;MACA,MAAAC,IAAA,GAAA9K,KAAA,CAAA+K,OAAA,KAAAT,GAAA,IAAAA,GAAA;MACAM,cAAA,CAAAI,OAAA,CAAAF,IAAA;MAEA,MAAAG,aAAA,OAAAhL,IAAA,CAAA2K,cAAA;MACAK,aAAA,CAAAD,OAAA,CAAAC,aAAA,CAAAF,OAAA;MAEA,MAAAG,aAAA;QAAAZ,GAAA;QAAA7G,KAAA;MAAA;MACA,MAAA0H,iBAAA,GAAAP,cAAA,CAAAP,kBAAA,UAAAa,aAAA;MACA,MAAAE,gBAAA,GAAAH,aAAA,CAAAZ,kBAAA,UAAAa,aAAA;MACA,MAAAG,aAAA,GAAArL,KAAA,CAAAqK,kBAAA;QAAA7G,IAAA;MAAA;MAEA,UAAA2H,iBAAA,OAAAC,gBAAA,OAAAC,aAAA;IACA;IAEA,MAAAnC,iBAAA;MACA,MAAAoC,OAAA,CAAAC,GAAA,EACA,KAAAC,kCAAA,IACA,KAAAC,6BAAA,IACA,KAAAC,sBAAA,IACA,KAAAC,0BAAA,IACA,KAAAC,wBAAA,IACA,KAAAC,4BAAA,IACA,KAAAC,iBAAA,IACA,KAAAC,eAAA,IACA,KAAAC,6BAAA,IACA,KAAAC,eAAA,IACA,KAAAC,6BAAA,IACA,KAAAC,+BAAA;MAAA,CACA;IACA;IACA3C,SAAA;MACA;QAAA4C;MAAA,IAAAxM,cAAA,CAAAyM,kBAAA;MACA,KAAA/L,OAAA,GAAA8L,GAAA;IACA;IAEA,MAAAZ,mCAAA;MACA,KAAA9J,QAAA,CAAAE,SAAA;MACA;QACA,MAAA0K,0BAAA,SAAA7M,UAAA;UACA8M,MAAA;UACAC,IAAA,6BAAAtL,mBAAA,CAAAC,WAAA,eAAAD,mBAAA,CAAAE,OAAA;QACA;QAEA,IAAAkL,0BAAA,EAAAvM,IAAA;UACA,MAAAkB,iBAAA,GAAAqL,0BAAA,CAAAvM,IAAA,CAAAA,IAAA;UAEA,KAAAmB,mBAAA,CAAAV,KAAA,GACA8L,0BAAA,CAAAvM,IAAA,CAAAS,KAAA;UACA,KAAAU,mBAAA,CAAAP,UAAA,GACA2L,0BAAA,CAAAvM,IAAA,CAAAY,UAAA;UAEA,MAAA8L,2BAAA,GAAAxL,iBAAA,CAAAyL,GAAA,CACAhG,QAAA,IACAjH,UAAA;YACA8M,MAAA;YACAC,IAAA,mBAAA9F,QAAA,CAAAnF,EAAA,IAAAmF,QAAA,CAAAlF,IAAA;UACA,EACA;UAEA,MAAAmL,2BAAA,SAAArB,OAAA,CAAAC,GAAA,CACAkB,2BACA;UAEA,KAAAxL,iBAAA,GAAAA,iBAAA,CAAAyL,GAAA,CACA,CAAAhG,QAAA,EAAAkG,MAAA;YACA,GAAAlG,QAAA;YACAC,cAAA,EACAgG,2BAAA,CAAAC,MAAA,EAAA7M,IAAA,KAAA8M,YAAA,IACA;UACA,EACA;UAEAC,OAAA,CAAAC,GAAA,CACA,mCACA,KAAA9L,iBACA;QACA;MACA,SAAA+L,KAAA;QACAF,OAAA,CAAAE,KAAA,yCAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAE,SAAA;MACA;IACA;IAGA,MAAA6J,8BAAA;MACA,KAAA/J,QAAA,CAAAG,OAAA;MACA;QACA,MAAAqL,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,uCAAA/K,MAAA;QACA;QAEA,IAAAyL,QAAA,EAAAnN,IAAA;UACA,KAAAa,sBAAA,GAAAuM,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACAmN,QAAA,CAAAnN,IAAA,CAAAA,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,6CAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAG,OAAA;MACA;IACA;IAEA,MAAA6J,uBAAA;MACA,KAAAhK,QAAA,CAAAI,OAAA;MACA;QACA,MAAAoL,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA;QACA;QAEA,IAAAU,QAAA,EAAAnN,IAAA;UACA,KAAAc,eAAA,GAAAsM,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACAmN,QAAA,CAAAnN,IAAA,CAAAA,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,wCAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAI,OAAA;MACA;IACA;IAEA,MAAA6J,2BAAA;MACA,KAAAjK,QAAA,CAAAK,UAAA;MACA;QACA,MAAAmL,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA;QACA;QAEA,IAAAU,QAAA,EAAAnN,IAAA;UACA,KAAAe,mBAAA,GAAAqM,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACAmN,QAAA,CAAAnN,IAAA,CAAAA,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,4CAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAK,UAAA;MACA;IACA;IAEA,MAAA6J,yBAAA;MACA,KAAAlK,QAAA,CAAAM,UAAA;MACA;QACA,MAAAkL,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA;QACA;QAEA,IAAAU,QAAA,EAAAnN,IAAA;UACA,KAAAgB,iBAAA,GAAAoM,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACAmN,QAAA,CAAAnN,IAAA,CAAAA,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,0CAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAM,UAAA;MACA;IACA;IAEA,MAAA6J,6BAAA;MACA,KAAAnK,QAAA,CAAAO,aAAA;MACA;QACA,MAAAiL,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA;QACA;QAEA,IAAAU,QAAA,EAAAnN,IAAA;UACA,KAAAiB,qBAAA,GAAAmM,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACAmN,QAAA,CAAAnN,IAAA,CAAAA,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,8CAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAO,aAAA;MACA;IACA;IAEA;IACA,MAAAiK,8BAAA;MACA,UAAAvH,qBAAA,CAAApD,EAAA;QACA,KAAA0L,YAAA;QACA;MACA;MAEA,KAAAvL,QAAA,CAAAe,eAAA;MACA;QACA,MAAAyK,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,gBAAA7H,qBAAA,CAAApD,EAAA;QACA;QAEA,IAAA2L,QAAA,EAAAnN,IAAA;UACA,KAAA0C,eAAA,CAAAiC,WAAA,GAAAwI,QAAA,CAAAnN,IAAA,CAAA2E,WAAA;QACA;MACA,SAAAsI,KAAA;QACAF,OAAA,CAAAE,KAAA,mDAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAe,eAAA;MACA;IACA;IAEA;IACA,MAAA0J,gCAAA;MACA,UAAAvH,uBAAA,CAAArD,EAAA;QACA,KAAA0L,YAAA;QACA;MACA;MAEA,KAAAvL,QAAA,CAAAgB,iBAAA;MACA;QACA,MAAAwK,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,gBAAA5H,uBAAA,CAAArD,EAAA;QACA;QAEA,IAAA2L,QAAA,EAAAnN,IAAA;UACA,KAAA2C,iBAAA,CAAAgC,WAAA,GAAAwI,QAAA,CAAAnN,IAAA,CAAA2E,WAAA;QACA;MACA,SAAAsI,KAAA;QACAF,OAAA,CAAAE,KAAA,qDAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAgB,iBAAA;MACA;IACA;IAEA;IACA2K,8BAAA;MACA,KAAA5K,eAAA,CAAAiC,WAAA;MACA,KAAAC,qBAAA,CAAApD,EAAA;IACA;IAEA;IACA+L,gCAAA;MACA,KAAA5K,iBAAA,CAAAgC,WAAA;MACA,KAAAE,uBAAA,CAAArD,EAAA;IACA;IAEA,MAAAuK,kBAAA;MACA,KAAApK,QAAA,CAAAU,GAAA;MACA;QACA,MAAA8K,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,2BAAAjJ,SAAA,CAAAC,IAAA,eAAAD,SAAA,CAAAE,KAAA;QACA;QAEA,IAAAyJ,QAAA,EAAAnN,IAAA;UACA,KAAA2D,UAAA,GAAAwJ,QAAA,CAAAnN,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,kCAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAU,GAAA;MACA;IACA;IAEA,MAAA2J,gBAAA;MACA,UAAAlI,cAAA,CAAAC,SAAA,UAAAD,cAAA,CAAAE,OAAA;QAEA;MACA;MAEA,KAAArC,QAAA,CAAAW,QAAA;MACA;QACA,MAAA8H,UAAA,GAAAnD,IAAA;UACA,OAAAA,IAAA,CAAAuG,WAAA,GAAAC,KAAA;QACA;QAEA,MAAAN,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,yBAAArC,UAAA,CACA,KAAAtG,cAAA,CAAAC,SACA,aAAAqG,UAAA,MAAAtG,cAAA,CAAAE,OAAA;QACA;QAEA,IAAAmJ,QAAA,EAAAnN,IAAA;UACA,KAAAsC,QAAA,GAAA6K,QAAA,CAAAnN,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,oCAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAW,QAAA;MACA;IACA;IAEA,MAAA2J,8BAAA;MACA,UAAA3H,mBAAA,CAAA9C,EAAA;QACA,KAAA0L,YAAA;QACA;MACA;MAEA,KAAA7I,sBAAA;MACA,KAAA1C,QAAA,CAAAY,aAAA;MACA;QACA,MAAA4K,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA,gBAAAnI,mBAAA,CAAA9C,EAAA,4BAAA8C,mBAAA,CAAAb,IAAA;QACA;QAEA,IAAA0J,QAAA,EAAAnN,IAAA;UACA,KAAAqE,sBAAA,GAAA+I,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IACAmN,QAAA,CAAAnN,IAAA,GACA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,mDAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAY,aAAA;MACA;IACA;IAEA,MAAA2J,gBAAA;MACA,KAAAvK,QAAA,CAAAa,QAAA;MACA;QACA,MAAA2K,QAAA,SAAAzN,UAAA;UACA8M,MAAA;UACAC,IAAA;QACA;QAEA,IAAAU,QAAA,EAAAnN,IAAA;UACA,KAAAwC,QAAA,GAAA4K,KAAA,CAAAC,OAAA,CAAAF,QAAA,CAAAnN,IAAA,IAAAmN,QAAA,CAAAnN,IAAA;QACA;MACA,SAAAiN,KAAA;QACAF,OAAA,CAAAE,KAAA,+BAAAA,KAAA;QACA,KAAAC,YAAA;MACA;QACA,KAAAvL,QAAA,CAAAa,QAAA;MACA;IACA;IAEAkL,uBAAAC,MAAA;MACA,KAAAxM,mBAAA,CAAAC,WAAA,GAAAuM,MAAA;MACA,KAAAlC,kCAAA;IACA;IAEAmC,iBAAAC,SAAA;MACA,MAAAxH,KAAA,IACA,SACA,WACA,SACA,SACA,QACA,SACA,SACA,UACA,cACA,WACA,aACA,YACA;MACA,OAAAA,KAAA,CAAAwH,SAAA;IACA;IAEAC,8BAAA;MACA,KAAAzJ,sBAAA;MACA,KAAAC,mBAAA,CAAA9C,EAAA;MACA,KAAA8C,mBAAA,CAAAb,IAAA,OAAAvD,IAAA,GAAAE,WAAA;IACA;IAEA8M,aAAAa,OAAA;MACA,KAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA;QACAC,OAAA,EAAAJ,OAAA;QACAtM,IAAA;QACA2M,QAAA;MACA;IACA;IAEA9F,oBAAAf,MAAA;MACA,IAAAO,UAAA,CAAAP,MAAA,CAAAK,UAAA;QACA;MACA;QACA;MACA;IACA;IAEAyG,mBAAA9G,MAAA;MACA,MAAA+G,MAAA,QAAAhG,mBAAA,CAAAf,MAAA;MACA,QAAA+G,MAAA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IAEA;IACA1F,gBAAAnF,IAAA,EAAAC,KAAA;MACA,MAAA6K,QAAA,OAAArO,IAAA,CAAAuD,IAAA,EAAAC,KAAA;MACA,MAAA8K,OAAA,OAAAtO,IAAA,CAAAuD,IAAA,EAAAC,KAAA;MACA,MAAA+K,WAAA,GAAAD,OAAA,CAAAxD,OAAA;;MAEA;MACA,IAAAH,cAAA,GAAA0D,QAAA,CAAAzD,MAAA;MACA;MACAD,cAAA,GAAAA,cAAA,aAAAA,cAAA;MAEA,MAAA6D,IAAA;;MAEA;MACA,MAAAC,SAAA,GAAAjL,KAAA,cAAAA,KAAA;MACA,MAAAkL,aAAA,GAAAlL,KAAA,SAAAD,IAAA,OAAAA,IAAA;MACA,MAAAoL,eAAA,OAAA3O,IAAA,CAAA0O,aAAA,EAAAD,SAAA,SAAA3D,OAAA;MAEA,SAAA8D,CAAA,MAAAA,CAAA,GAAAjE,cAAA,EAAAiE,CAAA;QACA,MAAAvE,GAAA,GAAAsE,eAAA,GAAAhE,cAAA,GAAAiE,CAAA;QACAJ,IAAA,CAAA7G,IAAA;UACA0C,GAAA;UACAtD,IAAA,MAAA/G,IAAA,CAAA0O,aAAA,EAAAD,SAAA,EAAApE,GAAA;UACAwE,UAAA;UACAvN,EAAA,UAAA+I,GAAA;QACA;MACA;;MAEA;MACA,SAAAuE,CAAA,MAAAA,CAAA,IAAAL,WAAA,EAAAK,CAAA;QACAJ,IAAA,CAAA7G,IAAA;UACA0C,GAAA,EAAAuE,CAAA;UACA7H,IAAA,MAAA/G,IAAA,CAAAuD,IAAA,EAAAC,KAAA,EAAAoL,CAAA;UACAC,UAAA;UACAvN,EAAA,aAAAsN,CAAA;QACA;MACA;;MAEA;MACA,MAAAE,SAAA,GAAAtL,KAAA,cAAAA,KAAA;MACA,MAAAuL,aAAA,GAAAvL,KAAA,UAAAD,IAAA,OAAAA,IAAA;MACA,MAAAyL,aAAA,QAAAR,IAAA,CAAAS,MAAA;;MAEA,SAAAL,CAAA,MAAAA,CAAA,IAAAI,aAAA,EAAAJ,CAAA;QACAJ,IAAA,CAAA7G,IAAA;UACA0C,GAAA,EAAAuE,CAAA;UACA7H,IAAA,MAAA/G,IAAA,CAAA+O,aAAA,EAAAD,SAAA,EAAAF,CAAA;UACAC,UAAA;UACAvN,EAAA,UAAAsN,CAAA;QACA;MACA;MAEA,OAAAJ,IAAA;IACA;IAEAU,QAAAnI,IAAA;MACA,MAAAhH,KAAA,OAAAC,IAAA;MACA,OAAA+G,IAAA,CAAA+D,OAAA,OAAA/K,KAAA,CAAA+K,OAAA,MACA/D,IAAA,CAAA3G,QAAA,OAAAL,KAAA,CAAAK,QAAA,MACA2G,IAAA,CAAA7G,WAAA,OAAAH,KAAA,CAAAG,WAAA;IACA;IAEAiP,mBAAApI,IAAA;MACA,KAAAA,IAAA;MACA,MAAAsD,GAAA,GAAA+E,MAAA,CAAArI,IAAA,CAAA+D,OAAA,IAAAuE,QAAA;MACA,MAAA7L,KAAA,GAAA4L,MAAA,CAAArI,IAAA,CAAA3G,QAAA,QAAAiP,QAAA;MACA,MAAA9L,IAAA,GAAAwD,IAAA,CAAA7G,WAAA;MACA,UAAAmK,GAAA,IAAA7G,KAAA,IAAAD,IAAA;IACA;IAEA;IACA+L,uBAAA;MACA,SAAAvK,kBAAA;QACA,KAAAA,kBAAA;MACA;MAEA,KAAAD,oBAAA,SAAAA,oBAAA;MACA,SAAAA,oBAAA;QACA,KAAAyK,SAAA;UACA,KAAAC,wBAAA;QACA;MACA;IACA;IAEAC,qBAAA;MACA,SAAA3K,oBAAA;QACA,KAAAA,oBAAA;MACA;MACA,SAAAY,6BAAA;QACA,KAAAA,6BAAA;MACA;MACA,SAAAC,2BAAA;QACA,KAAAA,2BAAA;MACA;MACA,KAAAZ,kBAAA,SAAAA,kBAAA;MACA,SAAAA,kBAAA;QACA,KAAAwK,SAAA;UACA,KAAAG,sBAAA;QACA;MACA;IACA;IAEAF,yBAAA;MACA,MAAAG,OAAA,QAAAC,KAAA,CAAAC,qBAAA;MACA,IAAAF,OAAA,SAAAC,KAAA,CAAAE,mBAAA;QACA,MAAAC,IAAA,GAAAJ,OAAA,CAAAK,qBAAA;QACA,MAAAC,cAAA,QAAAL,KAAA,CAAAE,mBAAA,CAAAI,YAAA;QACA,MAAAC,YAAA,GAAA9G,MAAA,CAAA+G,WAAA;;QAEA;QACA,MAAAC,UAAA,GAAAF,YAAA,GAAAJ,IAAA,CAAAO,MAAA;QACA,MAAAC,SAAA,GAAAF,UAAA,IAAAJ,cAAA;QAEA,KAAA7K,qBAAA;UACAC,GAAA,EAAAkL,SAAA,MAAAR,IAAA,CAAAO,MAAA,GAAAjH,MAAA,CAAAmH,OAAA,UAAAT,IAAA,CAAA1K,GAAA,GAAAgE,MAAA,CAAAmH,OAAA,GAAAP,cAAA;UACA3K,IAAA,KAAAyK,IAAA,CAAAzK,IAAA,GAAA+D,MAAA,CAAAoH,OAAA;UACAC,MAAA;QACA;MACA;IACA;IAEAhB,uBAAA;MACA,MAAAC,OAAA,QAAAC,KAAA,CAAAe,mBAAA;MACA,IAAAhB,OAAA,SAAAC,KAAA,CAAAgB,iBAAA;QACA,MAAAb,IAAA,GAAAJ,OAAA,CAAAK,qBAAA;QACA,MAAAC,cAAA,QAAAL,KAAA,CAAAgB,iBAAA,CAAAV,YAAA;QACA,MAAAC,YAAA,GAAA9G,MAAA,CAAA+G,WAAA;;QAEA;QACA,MAAAC,UAAA,GAAAF,YAAA,GAAAJ,IAAA,CAAAO,MAAA;QACA,MAAAC,SAAA,GAAAF,UAAA,IAAAJ,cAAA;QAEA,KAAA1K,mBAAA;UACAF,GAAA,EAAAkL,SAAA,MAAAR,IAAA,CAAAO,MAAA,GAAAjH,MAAA,CAAAmH,OAAA,UAAAT,IAAA,CAAA1K,GAAA,GAAAgE,MAAA,CAAAmH,OAAA,GAAAP,cAAA;UACA3K,IAAA,KAAAyK,IAAA,CAAAzK,IAAA,GAAA+D,MAAA,CAAAoH,OAAA;UACAC,MAAA;QACA;MACA;IACA;IAEAG,uBAAA9J,IAAA;MACA,UAAAnD,cAAA,CAAAC,SAAA;MAEA,OAAAkD,IAAA,CAAA+D,OAAA,YAAAlH,cAAA,CAAAC,SAAA,CAAAiH,OAAA,MACA/D,IAAA,CAAA3G,QAAA,YAAAwD,cAAA,CAAAC,SAAA,CAAAzD,QAAA,MACA2G,IAAA,CAAA7G,WAAA,YAAA0D,cAAA,CAAAC,SAAA,CAAA3D,WAAA;IACA;IAEA4Q,qBAAA/J,IAAA;MACA,UAAAnD,cAAA,CAAAE,OAAA;MAEA,OAAAiD,IAAA,CAAA+D,OAAA,YAAAlH,cAAA,CAAAE,OAAA,CAAAgH,OAAA,MACA/D,IAAA,CAAA3G,QAAA,YAAAwD,cAAA,CAAAE,OAAA,CAAA1D,QAAA,MACA2G,IAAA,CAAA7G,WAAA,YAAA0D,cAAA,CAAAE,OAAA,CAAA5D,WAAA;IACA;IAEA6Q,mBAAAhK,IAAA;MACA,KAAAnD,cAAA,CAAAC,SAAA,OAAA7D,IAAA,CAAA+G,IAAA;MACA,KAAAnC,mBAAA,QAAAuK,kBAAA,CAAApI,IAAA;MACA,KAAAjC,oBAAA;IACA;IAEAkM,iBAAAjK,IAAA;MACA,KAAAnD,cAAA,CAAAE,OAAA,OAAA9D,IAAA,CAAA+G,IAAA;MACA,KAAAlC,gBAAA,QAAAsK,kBAAA,CAAApI,IAAA;MACA,KAAAhC,kBAAA;IACA;IAEAkM,kBAAA;MACA,KAAArN,cAAA,CAAAC,SAAA;MACA,KAAAe,mBAAA;MACA,KAAAE,oBAAA;IACA;IAEAoM,gBAAA;MACA,KAAAtN,cAAA,CAAAE,OAAA;MACA,KAAAe,gBAAA;MACA,KAAAE,kBAAA;IACA;IAEAoM,mBAAA;MACA,MAAApR,KAAA,OAAAC,IAAA;MACA,KAAA4D,cAAA,CAAAC,SAAA,GAAA9D,KAAA;MACA,KAAA6E,mBAAA,QAAAuK,kBAAA,CAAApP,KAAA;MACA,KAAAiF,qBAAA,GAAAjF,KAAA,CAAAK,QAAA;MACA,KAAA6E,oBAAA,GAAAlF,KAAA,CAAAG,WAAA;MACA,KAAA4E,oBAAA;IACA;IAEAsM,iBAAA;MACA,MAAArR,KAAA,OAAAC,IAAA;MACA,KAAA4D,cAAA,CAAAE,OAAA,GAAA/D,KAAA;MACA,KAAA8E,gBAAA,QAAAsK,kBAAA,CAAApP,KAAA;MACA,KAAAmF,mBAAA,GAAAnF,KAAA,CAAAK,QAAA;MACA,KAAA+E,kBAAA,GAAApF,KAAA,CAAAG,WAAA;MACA,KAAA6E,kBAAA;IACA;IAEAsM,8BAAA;MACA,SAAAvM,oBAAA;QACA,KAAAA,oBAAA;MACA;MACA,SAAAC,kBAAA;QACA,KAAAA,kBAAA;MACA;MACA,KAAAY,2BAAA,SAAAA,2BAAA;MACA,SAAAA,2BAAA;QACA,KAAA4J,SAAA;UACA,KAAA+B,+BAAA;QACA;MACA;IACA;IAEAC,kCAAA;MACA,MAAA5B,OAAA,QAAAC,KAAA,CAAA4B,8BAAA;MACA,IAAA7B,OAAA,SAAAC,KAAA,CAAA6B,4BAAA;QACA,MAAA1B,IAAA,GAAAJ,OAAA,CAAAK,qBAAA;QACA,MAAAC,cAAA,QAAAL,KAAA,CAAA6B,4BAAA,CAAAvB,YAAA;QACA,MAAAC,YAAA,GAAA9G,MAAA,CAAA+G,WAAA;;QAEA;QACA,MAAAC,UAAA,GAAAF,YAAA,GAAAJ,IAAA,CAAAO,MAAA;QACA,MAAAC,SAAA,GAAAF,UAAA,IAAAJ,cAAA;QAEA,KAAAjK,8BAAA;UACAX,GAAA,EAAAkL,SAAA,MAAAR,IAAA,CAAAO,MAAA,GAAAjH,MAAA,CAAAmH,OAAA,UAAAT,IAAA,CAAA1K,GAAA,GAAAgE,MAAA,CAAAmH,OAAA,GAAAP,cAAA;UACA3K,IAAA,KAAAyK,IAAA,CAAAzK,IAAA,GAAA+D,MAAA,CAAAoH,OAAA;UACAC,MAAA;QACA;MACA;IACA;IAEAY,gCAAA;MACA,MAAA3B,OAAA,QAAAC,KAAA,CAAA8B,4BAAA;MACA,IAAA/B,OAAA,SAAAC,KAAA,CAAA+B,0BAAA;QACA,MAAA5B,IAAA,GAAAJ,OAAA,CAAAK,qBAAA;QACA,MAAAC,cAAA,QAAAL,KAAA,CAAA+B,0BAAA,CAAAzB,YAAA;QACA,MAAAC,YAAA,GAAA9G,MAAA,CAAA+G,WAAA;;QAEA;QACA,MAAAC,UAAA,GAAAF,YAAA,GAAAJ,IAAA,CAAAO,MAAA;QACA,MAAAC,SAAA,GAAAF,UAAA,IAAAJ,cAAA;QAEA,KAAAhK,4BAAA;UACAZ,GAAA,EAAAkL,SAAA,MAAAR,IAAA,CAAAO,MAAA,GAAAjH,MAAA,CAAAmH,OAAA,UAAAT,IAAA,CAAA1K,GAAA,GAAAgE,MAAA,CAAAmH,OAAA,GAAAP,cAAA;UACA3K,IAAA,KAAAyK,IAAA,CAAAzK,IAAA,GAAA+D,MAAA,CAAAoH,OAAA;UACAC,MAAA;QACA;MACA;IACA;IAEAkB,gCAAA7K,IAAA;MACA,UAAA1C,kBAAA,CAAAR,SAAA;MAEA,OAAAkD,IAAA,CAAA+D,OAAA,YAAAzG,kBAAA,CAAAR,SAAA,CAAAiH,OAAA,MACA/D,IAAA,CAAA3G,QAAA,YAAAiE,kBAAA,CAAAR,SAAA,CAAAzD,QAAA,MACA2G,IAAA,CAAA7G,WAAA,YAAAmE,kBAAA,CAAAR,SAAA,CAAA3D,WAAA;IACA;IAEA2R,8BAAA9K,IAAA;MACA,UAAA1C,kBAAA,CAAAP,OAAA;MAEA,OAAAiD,IAAA,CAAA+D,OAAA,YAAAzG,kBAAA,CAAAP,OAAA,CAAAgH,OAAA,MACA/D,IAAA,CAAA3G,QAAA,YAAAiE,kBAAA,CAAAP,OAAA,CAAA1D,QAAA,MACA2G,IAAA,CAAA7G,WAAA,YAAAmE,kBAAA,CAAAP,OAAA,CAAA5D,WAAA;IACA;IAEA4R,4BAAA/K,IAAA;MACA,KAAA1C,kBAAA,CAAAR,SAAA,OAAA7D,IAAA,CAAA+G,IAAA;MACA,KAAAvB,4BAAA,QAAA2J,kBAAA,CAAApI,IAAA;MACA,KAAArB,6BAAA;IACA;IAEAqM,0BAAAhL,IAAA;MACA,KAAA1C,kBAAA,CAAAP,OAAA,OAAA9D,IAAA,CAAA+G,IAAA;MACA,KAAAtB,yBAAA,QAAA0J,kBAAA,CAAApI,IAAA;MACA,KAAApB,2BAAA;IACA;IAEAqM,2BAAA;MACA,KAAA3N,kBAAA,CAAAR,SAAA;MACA,KAAA2B,4BAAA;MACA,KAAAE,6BAAA;IACA;IAEAuM,yBAAA;MACA,KAAA5N,kBAAA,CAAAP,OAAA;MACA,KAAA2B,yBAAA;MACA,KAAAE,2BAAA;IACA;IAEAuM,4BAAA;MACA,MAAAnS,KAAA,OAAAC,IAAA;MACA,KAAAqE,kBAAA,CAAAR,SAAA,GAAA9D,KAAA;MACA,KAAAyF,4BAAA,QAAA2J,kBAAA,CAAApP,KAAA;MACA,KAAA6F,8BAAA,GAAA7F,KAAA,CAAAK,QAAA;MACA,KAAAyF,6BAAA,GAAA9F,KAAA,CAAAG,WAAA;MACA,KAAAwF,6BAAA;IACA;IAEAyM,0BAAA;MACA,MAAApS,KAAA,OAAAC,IAAA;MACA,KAAAqE,kBAAA,CAAAP,OAAA,GAAA/D,KAAA;MACA,KAAA0F,yBAAA,QAAA0J,kBAAA,CAAApP,KAAA;MACA,KAAA+F,4BAAA,GAAA/F,KAAA,CAAAK,QAAA;MACA,KAAA2F,2BAAA,GAAAhG,KAAA,CAAAG,WAAA;MACA,KAAAyF,2BAAA;IACA;IAEA;IACA8I,UAAAlN,IAAA;MACA,QAAAA,IAAA;QACA;UACA,SAAAyD,qBAAA;YACA,KAAAA,qBAAA;YACA,KAAAC,oBAAA;UACA;YACA,KAAAD,qBAAA;UACA;UACA;QACA;UACA,SAAAE,mBAAA;YACA,KAAAA,mBAAA;YACA,KAAAC,kBAAA;UACA;YACA,KAAAD,mBAAA;UACA;UACA;QACA;UACA,SAAAU,8BAAA;YACA,KAAAA,8BAAA;YACA,KAAAC,6BAAA;UACA;YACA,KAAAD,8BAAA;UACA;UACA;QACA;UACA,SAAAE,4BAAA;YACA,KAAAA,4BAAA;YACA,KAAAC,2BAAA;UACA;YACA,KAAAD,4BAAA;UACA;UACA;MACA;IACA;IAEAgJ,UAAAvN,IAAA;MACA,QAAAA,IAAA;QACA;UACA,SAAAyD,qBAAA;YACA,KAAAA,qBAAA;YACA,KAAAC,oBAAA;UACA;YACA,KAAAD,qBAAA;UACA;UACA;QACA;UACA,SAAAE,mBAAA;YACA,KAAAA,mBAAA;YACA,KAAAC,kBAAA;UACA;YACA,KAAAD,mBAAA;UACA;UACA;QACA;UACA,SAAAU,8BAAA;YACA,KAAAA,8BAAA;YACA,KAAAC,6BAAA;UACA;YACA,KAAAD,8BAAA;UACA;UACA;QACA;UACA,SAAAE,4BAAA;YACA,KAAAA,4BAAA;YACA,KAAAC,2BAAA;UACA;YACA,KAAAD,4BAAA;UACA;UACA;MACA;IACA;IAEAwD,wBAAA;MACA,SAAAxE,oBAAA;QACA,KAAA0K,wBAAA;MACA;MACA,SAAAzK,kBAAA;QACA,KAAA2K,sBAAA;MACA;MACA,SAAAhK,6BAAA;QACA,KAAA6L,iCAAA;MACA;MACA,SAAA5L,2BAAA;QACA,KAAA2L,+BAAA;MACA;IACA;IAEAlI,mBAAAgJ,KAAA;MACA;MACA,SAAAtN,oBAAA,IACA,KAAA8K,KAAA,CAAAE,mBAAA,IACA,MAAAF,KAAA,CAAAE,mBAAA,CAAAuC,QAAA,CAAAD,KAAA,CAAAE,MAAA,KACA,KAAA1C,KAAA,CAAAC,qBAAA,IACA,MAAAD,KAAA,CAAAC,qBAAA,CAAAwC,QAAA,CAAAD,KAAA,CAAAE,MAAA;QACA,KAAAxN,oBAAA;MACA;;MAEA;MACA,SAAAC,kBAAA,IACA,KAAA6K,KAAA,CAAAgB,iBAAA,IACA,MAAAhB,KAAA,CAAAgB,iBAAA,CAAAyB,QAAA,CAAAD,KAAA,CAAAE,MAAA,KACA,KAAA1C,KAAA,CAAAe,mBAAA,IACA,MAAAf,KAAA,CAAAe,mBAAA,CAAA0B,QAAA,CAAAD,KAAA,CAAAE,MAAA;QACA,KAAAvN,kBAAA;MACA;;MAEA;MACA,SAAAW,6BAAA,IACA,KAAAkK,KAAA,CAAA6B,4BAAA,IACA,MAAA7B,KAAA,CAAA6B,4BAAA,CAAAY,QAAA,CAAAD,KAAA,CAAAE,MAAA,KACA,KAAA1C,KAAA,CAAA4B,8BAAA,IACA,MAAA5B,KAAA,CAAA4B,8BAAA,CAAAa,QAAA,CAAAD,KAAA,CAAAE,MAAA;QACA,KAAA5M,6BAAA;MACA;;MAEA;MACA,SAAAC,2BAAA,IACA,KAAAiK,KAAA,CAAA+B,0BAAA,IACA,MAAA/B,KAAA,CAAA+B,0BAAA,CAAAU,QAAA,CAAAD,KAAA,CAAAE,MAAA,KACA,KAAA1C,KAAA,CAAA8B,4BAAA,IACA,MAAA9B,KAAA,CAAA8B,4BAAA,CAAAW,QAAA,CAAAD,KAAA,CAAAE,MAAA;QACA,KAAA3M,2BAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}