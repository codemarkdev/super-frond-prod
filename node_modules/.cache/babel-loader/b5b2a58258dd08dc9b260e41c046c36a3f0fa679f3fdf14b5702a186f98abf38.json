{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport MensajeInicial from '../Extras/MensajeInicial';\nimport CartasTotales from '../Extras/CartasTotales';\nimport ProductosAbollados from '../Inventario/Productos-Abollados.vue';\nimport ProductosEliminados from '../Inventario/Productos-Eliminados.vue';\nimport GestionDescuentos from '../Descuentos/Descuentos.vue';\nimport apiRequest from '../../Servicios/HttpService';\nimport AyudanteSesion from '../../Servicios/AyudanteSesion';\nexport default {\n  name: \"ProductosComponent\",\n  components: {\n    MensajeInicial,\n    CartasTotales,\n    ProductosAbollados,\n    ProductosEliminados,\n    GestionDescuentos\n  },\n  data: () => ({\n    activeTab: 'inventario',\n    productos: [],\n    cargando: false,\n    isPaginated: true,\n    isPaginationSimple: false,\n    isPaginationRounded: true,\n    paginationPosition: 'bottom',\n    defaultSortDirection: 'asc',\n    sortIcon: 'arrow-up',\n    sortIconSize: 'is-medium',\n    currentPage: 1,\n    perPage: 10,\n    cartasTotales: [],\n    totalProductos: 0,\n    totalPages: 1,\n    isAdmin: false // Por defecto no es admin\n  }),\n  computed: {\n    // Asegurar que currentPage siempre sea un número\n    currentPageNumber: {\n      get() {\n        return Number(this.currentPage) || 1;\n      },\n      set(value) {\n        this.currentPage = Number(value) || 1;\n      }\n    },\n    // Asegurar que perPage siempre sea un número\n    perPageNumber: {\n      get() {\n        return Number(this.perPage) || 10;\n      },\n      set(value) {\n        this.perPage = Number(value) || 10;\n      }\n    }\n  },\n  mounted() {\n    // Inicializar con valores numéricos\n    this.currentPage = 1;\n    this.perPage = 10;\n    this.obtenerProductos();\n    this.verificarPermisos();\n  },\n  methods: {\n    verificarPermisos() {\n      // Usar AyudanteSesion para verificar si el usuario es administrador\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion();\n      this.isAdmin = datosUsuario.rol === 'Admin';\n      console.log(\"Rol del usuario:\", datosUsuario.rol);\n      console.log(\"Es administrador:\", this.isAdmin);\n    },\n    cambiarTab(tab) {\n      this.activeTab = tab;\n      if (tab === 'inventario') {\n        // Resetear paginación al cambiar a inventario\n        this.currentPage = 1;\n        this.obtenerProductos();\n      }\n      // Los otros tabs tienen sus propios componentes que manejan su carga de datos\n    },\n    onPageChange(page) {\n      // Asegurar que page sea un número\n      this.currentPage = Number(page) || 1;\n      this.obtenerProductos();\n    },\n    agregarExistencia(producto) {\n      this.$buefy.dialog.prompt({\n        message: '¿Cuántas piezas vas a agregar de ' + producto.name + '?',\n        cancelText: 'Cancelar',\n        confirmText: 'Agregar',\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Escribe la cantidad de productos',\n          value: '',\n          min: 1\n        },\n        trapFocus: true,\n        onConfirm: value => {\n          // Asegurarse de que value sea un número\n          const cantidad = Number(value);\n          if (isNaN(cantidad) || cantidad <= 0) {\n            this.$buefy.toast.open({\n              message: 'Por favor ingresa una cantidad válida',\n              type: 'is-danger'\n            });\n            return;\n          }\n          this.cargando = true;\n          apiRequest({\n            method: 'PATCH',\n            path: `products/${producto.id}/add-stock?quantity=${cantidad}`\n          }).then(registrado => {\n            if (registrado) {\n              this.cargando = false;\n              this.$buefy.toast.open(cantidad + ' Productos agregados a ' + producto.name);\n              this.obtenerProductos();\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al agregar existencia:', error);\n            this.$buefy.toast.open({\n              message: 'Error al agregar existencia',\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    quitarExistencia(producto) {\n      this.$buefy.dialog.prompt({\n        message: '¿Cuántas piezas vas a quitar de ' + producto.name + '?',\n        cancelText: 'Cancelar',\n        confirmText: 'Quitar',\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Escribe la cantidad de productos',\n          value: '',\n          min: 1\n        },\n        trapFocus: true,\n        onConfirm: value => {\n          // Asegurarse de que value sea un número\n          const cantidad = Number(value);\n          if (isNaN(cantidad) || cantidad <= 0) {\n            this.$buefy.toast.open({\n              message: 'Por favor ingresa una cantidad válida',\n              type: 'is-danger'\n            });\n            return;\n          }\n          if (cantidad > producto.stock) {\n            this.$buefy.toast.open('No puedes quitar más de ' + producto.stock + ' productos');\n            return;\n          }\n          this.cargando = true;\n          apiRequest({\n            method: 'PATCH',\n            path: `products/${producto.id}/subtract-stock?quantity=${cantidad}`\n          }).then(registrado => {\n            if (registrado) {\n              this.cargando = false;\n              this.$buefy.toast.open(cantidad + ' Productos quitados a ' + producto.name);\n              this.obtenerProductos();\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al quitar existencia:', error);\n            this.$buefy.toast.open({\n              message: 'Error al quitar existencia',\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    marcarComoDanado(producto) {\n      this.$buefy.dialog.prompt({\n        title: 'Marcar como abollado',\n        message: '¿Cuántas unidades de ' + producto.name + ' están abolladas?',\n        cancelText: 'Cancelar',\n        confirmText: 'Marcar como abollado',\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Cantidad',\n          value: '1',\n          min: 1,\n          max: producto.stock\n        },\n        trapFocus: true,\n        onConfirm: value => {\n          // Asegurarse de que cantidad sea un número\n          const cantidad = Number(value);\n          if (isNaN(cantidad) || cantidad <= 0) {\n            this.$buefy.toast.open({\n              message: 'Por favor ingresa una cantidad válida',\n              type: 'is-danger'\n            });\n            return;\n          }\n          if (cantidad > producto.stock) {\n            this.$buefy.toast.open({\n              message: 'No puedes marcar más unidades de las disponibles',\n              type: 'is-danger'\n            });\n            return;\n          }\n          this.$buefy.dialog.prompt({\n            title: 'Motivo del abollado',\n            message: 'Indica el motivo por el que el producto está abollado',\n            cancelText: 'Cancelar',\n            confirmText: 'Confirmar',\n            inputAttrs: {\n              type: 'text',\n              placeholder: 'Motivo del abollado',\n              maxlength: 200,\n              required: true\n            },\n            trapFocus: true,\n            onConfirm: motivo => {\n              this.cargando = true;\n              apiRequest({\n                method: 'POST',\n                path: 'damaged-products',\n                data: {\n                  productId: producto.id,\n                  quantity: cantidad,\n                  notes: motivo\n                }\n              }).then(resultado => {\n                this.cargando = false;\n                if (resultado) {\n                  this.$buefy.toast.open({\n                    message: 'Producto marcado como abollado correctamente',\n                    type: 'is-success'\n                  });\n                  this.obtenerProductos();\n                } else {\n                  this.$buefy.toast.open({\n                    message: 'Error al marcar el producto como abollado',\n                    type: 'is-danger'\n                  });\n                }\n              }).catch(error => {\n                this.cargando = false;\n                this.$buefy.toast.open({\n                  message: 'Error al marcar el producto como abollado: ' + (error.message || 'Error desconocido'),\n                  type: 'is-danger'\n                });\n              });\n            }\n          });\n        }\n      });\n    },\n    async eliminar(idProducto) {\n      this.$buefy.dialog.confirm({\n        title: 'Eliminar producto',\n        message: 'Seguro que quieres <b>eliminar</b> este producto? Esta acción no se puede revertir.',\n        confirmText: 'Sí, eliminar',\n        cancelText: 'Cancelar',\n        type: 'is-danger',\n        hasIcon: true,\n        onConfirm: () => {\n          this.cargando = true;\n          apiRequest({\n            method: 'DELETE',\n            path: `products/${idProducto}`\n          }).then(resultado => {\n            if (!resultado) {\n              this.$buefy.toast.open('Error al eliminar');\n              this.cargando = false;\n              return;\n            }\n            if (resultado) {\n              this.cargando = false;\n              this.$buefy.toast.open({\n                type: 'is-info',\n                message: 'Producto eliminado.'\n              });\n              this.obtenerProductos();\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al eliminar producto:', error);\n            this.$buefy.toast.open({\n              message: 'Error al eliminar el producto',\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    editar(idProducto) {\n      this.$router.push({\n        name: \"EditarProducto\",\n        params: {\n          id: idProducto\n        }\n      });\n    },\n    obtenerProductos() {\n      this.cargando = true;\n\n      // Asegurarse de que currentPage y perPage sean números válidos\n      const page = Number(this.currentPage);\n      const limit = Number(this.perPage);\n      if (isNaN(page) || isNaN(limit) || page < 1 || limit < 1) {\n        console.error('Parámetros de paginación inválidos:', {\n          page,\n          limit\n        });\n        this.$buefy.toast.open({\n          message: 'Error en los parámetros de paginación',\n          type: 'is-danger'\n        });\n        // Resetear a valores por defecto\n        this.currentPage = 1;\n        this.perPage = 10;\n        this.cargando = false;\n        return;\n      }\n      apiRequest({\n        method: \"GET\",\n        path: `products?page=${page}&limit=${limit}`\n      }).then(respuesta => {\n        if (respuesta && respuesta.data) {\n          this.productos = respuesta.data.data || [];\n          this.totalProductos = respuesta.data.total || 0;\n          this.totalPages = respuesta.data.totalPages || 1;\n          apiRequest({\n            method: \"GET\",\n            path: 'products/inventory/total-value'\n          }).then(respuesta => {\n            this.cartasTotales = [{\n              nombre: \"Número Productos\",\n              total: this.totalProductos,\n              icono: \"package-variant-closed\",\n              clase: \"has-text-danger\"\n            }, {\n              nombre: \"Total Inventario\",\n              total: `$ ${parseFloat(respuesta.data).toLocaleString('en-US', {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              })}`,\n              icono: \"chart-bar-stacked\",\n              clase: \"has-text-primary\"\n            }];\n          }).catch(error => {\n            console.error('Error al obtener valor total del inventario:', error);\n          });\n          apiRequest({\n            method: \"GET\",\n            path: 'products/inventory/total-profit'\n          }).then(respuesta => {\n            this.cartasTotales.push({\n              nombre: \"Ganancia a precio venta\",\n              total: `$ ${parseFloat(respuesta.data).toLocaleString('en-US', {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              })}`,\n              icono: \"currency-usd\",\n              clase: \"has-text-info\"\n            });\n          }).catch(error => {\n            console.error('Error al obtener ganancia total:', error);\n          }).finally(() => {\n            this.cargando = false;\n          });\n        } else {\n          this.productos = [];\n          this.totalProductos = 0;\n          this.totalPages = 1;\n          this.cartasTotales = [];\n          this.cargando = false;\n        }\n      }).catch(error => {\n        console.error('Error al obtener productos:', error);\n        this.$buefy.toast.open({\n          message: 'Error al cargar los productos',\n          type: 'is-danger'\n        });\n        this.productos = [];\n        this.totalProductos = 0;\n        this.totalPages = 1;\n        this.cartasTotales = [];\n        this.cargando = false;\n      });\n    },\n    resetPagination() {\n      this.currentPage = 1;\n      this.obtenerProductos();\n    }\n  }\n};","map":{"version":3,"names":["MensajeInicial","CartasTotales","ProductosAbollados","ProductosEliminados","GestionDescuentos","apiRequest","AyudanteSesion","name","components","data","activeTab","productos","cargando","isPaginated","isPaginationSimple","isPaginationRounded","paginationPosition","defaultSortDirection","sortIcon","sortIconSize","currentPage","perPage","cartasTotales","totalProductos","totalPages","isAdmin","computed","currentPageNumber","get","Number","set","value","perPageNumber","mounted","obtenerProductos","verificarPermisos","methods","datosUsuario","obtenerDatosSesion","rol","console","log","cambiarTab","tab","onPageChange","page","agregarExistencia","producto","$buefy","dialog","prompt","message","cancelText","confirmText","inputAttrs","type","placeholder","min","trapFocus","onConfirm","cantidad","isNaN","toast","open","method","path","id","then","registrado","catch","error","quitarExistencia","stock","marcarComoDanado","title","max","maxlength","required","motivo","productId","quantity","notes","resultado","eliminar","idProducto","confirm","hasIcon","editar","$router","push","params","limit","respuesta","total","nombre","icono","clase","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","finally","resetPagination"],"sources":["src/components/Inventario/ProductosComponent.vue"],"sourcesContent":["<template>\r\n    <section>\r\n        <!-- Título principal que cambia según la pestaña activa -->\r\n        <div v-if=\"activeTab === 'inventario'\">\r\n            <div class=\"level mb-5\">\r\n                <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                        <h1 class=\"title is-4\">Inventario</h1>\r\n                    </div>\r\n                </div>\r\n                <div class=\"level-right\">\r\n                    <div class=\"level-item\">\r\n                        <router-link to=\"/agregar-producto\" class=\"button is-primary\">\r\n                            <span class=\"icon\">\r\n                                <i class=\"mdi mdi-plus\"></i>\r\n                            </span>\r\n                            <span>Agregar producto</span>\r\n                        </router-link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div v-else-if=\"activeTab === 'abollados'\">\r\n            <div class=\"level mb-5\">\r\n                <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                        <h1 class=\"title is-4\">Productos Dañados</h1>\r\n                    </div>\r\n                </div>\r\n                <!-- Sin botón de agregar en esta vista -->\r\n            </div>\r\n        </div>\r\n        <div v-else-if=\"activeTab === 'eliminados'\">\r\n            <div class=\"level mb-5\">\r\n                <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                        <h1 class=\"title is-4\">Productos Eliminados</h1>\r\n                    </div>\r\n                </div>\r\n                <!-- Sin botón de agregar en esta vista -->\r\n            </div>\r\n        </div>\r\n        <div v-else-if=\"activeTab === 'descuentos'\">\r\n            <div class=\"level mb-5\">\r\n                <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                        <h1 class=\"title is-4\">Descuentos</h1>\r\n                    </div>\r\n                </div>\r\n                <!-- Sin botón de agregar en esta vista -->\r\n            </div>\r\n        </div>\r\n        \r\n        <!-- Implementando tabs de Bulma según la documentación -->\r\n        <div class=\"tabs is-boxed mb-4\">\r\n            <ul>\r\n                <li :class=\"{ 'is-active': activeTab === 'inventario' }\">\r\n                    <a @click=\"cambiarTab('inventario')\">\r\n                        <span class=\"icon is-small\"><i class=\"mdi mdi-package-variant-closed\"></i></span>\r\n                        <span>Inventario</span>\r\n                    </a>\r\n                </li>\r\n                <li :class=\"{ 'is-active': activeTab === 'abollados' }\">\r\n                    <a @click=\"cambiarTab('abollados')\">\r\n                        <span class=\"icon is-small\"><i class=\"mdi mdi-alert-circle\"></i></span>\r\n                        <span>Dañados</span>\r\n                    </a>\r\n                </li>\r\n                <li :class=\"{ 'is-active': activeTab === 'descuentos' }\">\r\n                    <a @click=\"cambiarTab('descuentos')\">\r\n                        <span class=\"icon is-small\"><i class=\"mdi mdi-tag-multiple\"></i></span>\r\n                        <span>Descuentos</span>\r\n                    </a>\r\n                </li>\r\n                <!-- Solo mostrar la pestaña de eliminados si el usuario es admin -->\r\n                <li v-if=\"isAdmin\" :class=\"{ 'is-active': activeTab === 'eliminados' }\">\r\n                    <a @click=\"cambiarTab('eliminados')\">\r\n                        <span class=\"icon is-small\"><i class=\"mdi mdi-archive\"></i></span>\r\n                        <span>Eliminados</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    \r\n        <!-- Inventario Tab Content -->\r\n        <div v-if=\"activeTab === 'inventario'\">\r\n            <mensaje-inicial :titulo=\"'No se han encontrado productos'\"\r\n                :subtitulo=\"'Agrega productos pulsando el botón de Agregar productos'\" v-if=\"productos.length < 1\" />\r\n    \r\n            <div class=\"\" v-if=\"productos.length > 0\">\r\n                <div class=\"is-flex\" style=\"gap: 10.5rem; flex-wrap: wrap;\">\r\n                    <cartas-totales :totales=\"cartasTotales\" class=\"mb-4\" />\r\n                </div>\r\n                <!-- Quitamos la clase table-container que añade scrollbar -->\r\n                <div>\r\n                    <b-table class=\"box\" :data=\"productos\" :per-page=\"perPageNumber\"\r\n                        :current-page.sync=\"currentPageNumber\" :pagination-simple=\"isPaginationSimple\"\r\n                        :pagination-position=\"paginationPosition\" :default-sort-direction=\"defaultSortDirection\"\r\n                        :pagination-rounded=\"isPaginationRounded\" :sort-icon=\"sortIcon\" :sort-icon-size=\"sortIconSize\"\r\n                        default-sort=\"user.first_name\" aria-next-label=\"Next page\" aria-previous-label=\"Previous page\"\r\n                        aria-page-label=\"Page\" aria-current-label=\"Current page\"\r\n                        :sticky-header=\"false\" :height=\"null\">\r\n                        <b-table-column label=\"ID\" sortable v-slot=\"props\">\r\n                            {{ props.row.id }}\r\n                        </b-table-column>\r\n                        <b-table-column field=\"code\" label=\"Código de barras\" sortable searchable v-slot=\"props\">\r\n                            {{ props.row.code }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"name\" label=\"Nombre\" sortable searchable v-slot=\"props\">\r\n                            {{ props.row.name }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"precioCompra\" label=\"Precio compra\" sortable v-slot=\"props\">\r\n                            ${{ props.row.purchasePrice }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"precioVenta\" label=\"Precio venta\" sortable v-slot=\"props\">\r\n                            ${{ props.row.salePrice }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"precioTurista\" label=\"Precio turista\" sortable v-slot=\"props\">\r\n                            ${{ props.row.touristPrice }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"ganancia\" label=\"Ganancia\" sortable v-slot=\"props\">\r\n                            <b>${{ (props.row.salePrice - props.row.purchasePrice).toFixed(2) }}</b>\r\n                        </b-table-column>\r\n                        <b-table-column field=\"ganancia\" label=\"Ganancia turista\" sortable v-slot=\"props\">\r\n                            <b>${{ (props.row.touristPrice - props.row.purchasePrice).toFixed(2)}}</b>\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"vendidoMayoreo\" label=\"¿Mayoreo?\" sortable v-slot=\"props\">\r\n                            <b-tag type=\"is-danger\" v-if=\"!props.row.wholesaleSale\">No</b-tag>\r\n    \r\n                            <div v-if=\"props.row.wholesaleSale\">\r\n                                <b>Precio: </b>${{ props.row.wholesalePrice }}<br>\r\n                                <b>A partir de: </b>{{ parseInt(props.row.wholesaleQuantity) }}\r\n                            </div>\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"existencia\" label=\"Existencia\" sortable v-slot=\"props\">\r\n                            {{ props.row.stock }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"brand.brandName\" label=\"Marca\" sortable searchable v-slot=\"props\">\r\n                            {{ props.row.brand.brandName }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"category.categoryName\" label=\"Categoría\" sortable searchable v-slot=\"props\">\r\n                            {{ props.row.category.categoryName }}\r\n                        </b-table-column>\r\n    \r\n                        <b-table-column field=\"acciones\" label=\"Acciones\" centered v-slot=\"props\">\r\n                            <div class=\"buttons is-centered\">\r\n                                <b-tooltip label=\"Agregar existencia\" position=\"is-top\">\r\n                                    <b-button class=\"btn-primary\" @click=\"agregarExistencia(props.row)\">\r\n                                        <b-icon icon=\"plus\" />\r\n                                    </b-button>\r\n                                </b-tooltip>\r\n                                <b-tooltip label=\"Quitar existencia\" position=\"is-top\">\r\n                                    <b-button class=\"btn-ghost\" @click=\"quitarExistencia(props.row)\">\r\n                                        <b-icon icon=\"minus\" />\r\n                                    </b-button>\r\n                                </b-tooltip>\r\n                                <b-tooltip label=\"Marcar como abollado\" position=\"is-top\">\r\n                                    <b-button class=\"btn-warning\" @click=\"marcarComoDanado(props.row)\">\r\n                                        <b-icon icon=\"alert-circle\" />\r\n                                    </b-button>\r\n                                </b-tooltip>\r\n                                <b-tooltip label=\"Editar producto\" position=\"is-top\">\r\n                                    <b-button class=\"btn-link-primary\" @click=\"editar(props.row.id)\">\r\n                                        <b-icon icon=\"pen\" />\r\n                                    </b-button>\r\n                                </b-tooltip>\r\n                                <b-tooltip label=\"Eliminar producto\" position=\"is-top\">\r\n                                    <b-button class=\"btn-link\" @click=\"eliminar(props.row.id)\">\r\n                                        <b-icon icon=\"delete\" />\r\n                                    </b-button>\r\n                                </b-tooltip>\r\n                            </div>\r\n                        </b-table-column>\r\n                    </b-table>\r\n                    <b-pagination\r\n                        v-if=\"totalPages > 1\"\r\n                        :total=\"totalProductos\"\r\n                        :current.sync=\"currentPageNumber\"\r\n                        :per-page=\"perPageNumber\"\r\n                        :rounded=\"isPaginationRounded\"\r\n                        :simple=\"isPaginationSimple\"\r\n                        :position=\"paginationPosition\"\r\n                        @change=\"onPageChange\"\r\n                    ></b-pagination>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <!-- Componente Abollados -->\r\n        <productos-abollados v-if=\"activeTab === 'abollados'\" @producto-restaurado=\"obtenerProductos\" />\r\n        \r\n        <!-- Componente Descuentos -->\r\n        <gestion-descuentos v-if=\"activeTab === 'descuentos'\" />\r\n        \r\n        <!-- Componente Eliminados (solo visible para admin) -->\r\n        <productos-eliminados v-if=\"activeTab === 'eliminados' && isAdmin\" @producto-restaurado=\"obtenerProductos\" />\r\n        \r\n        <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n    </section>\r\n    </template>\r\n    <script>\r\n    import MensajeInicial from '../Extras/MensajeInicial'\r\n    import CartasTotales from '../Extras/CartasTotales'\r\n    import ProductosAbollados from '../Inventario/Productos-Abollados.vue'\r\n    import ProductosEliminados from '../Inventario/Productos-Eliminados.vue'\r\n    import GestionDescuentos from '../Descuentos/Descuentos.vue'\r\n    import apiRequest from '../../Servicios/HttpService';\r\n    import AyudanteSesion from '../../Servicios/AyudanteSesion';\r\n    \r\n    export default {\r\n    name: \"ProductosComponent\",\r\n    components: { \r\n        MensajeInicial, \r\n        CartasTotales,\r\n        ProductosAbollados,\r\n        ProductosEliminados,\r\n        GestionDescuentos\r\n    },\r\n    \r\n    data: () => ({\r\n        activeTab: 'inventario',\r\n        productos: [],\r\n        cargando: false,\r\n        isPaginated: true,\r\n        isPaginationSimple: false,\r\n        isPaginationRounded: true,\r\n        paginationPosition: 'bottom',\r\n        defaultSortDirection: 'asc',\r\n        sortIcon: 'arrow-up',\r\n        sortIconSize: 'is-medium',\r\n        currentPage: 1,\r\n        perPage: 10,\r\n        cartasTotales: [],\r\n        totalProductos: 0,\r\n        totalPages: 1,\r\n        isAdmin: false // Por defecto no es admin\r\n    }),\r\n    \r\n    computed: {\r\n        // Asegurar que currentPage siempre sea un número\r\n        currentPageNumber: {\r\n            get() {\r\n                return Number(this.currentPage) || 1;\r\n            },\r\n            set(value) {\r\n                this.currentPage = Number(value) || 1;\r\n            }\r\n        },\r\n        // Asegurar que perPage siempre sea un número\r\n        perPageNumber: {\r\n            get() {\r\n                return Number(this.perPage) || 10;\r\n            },\r\n            set(value) {\r\n                this.perPage = Number(value) || 10;\r\n            }\r\n        }\r\n    },\r\n    \r\n    mounted() {\r\n        // Inicializar con valores numéricos\r\n        this.currentPage = 1;\r\n        this.perPage = 10;\r\n        this.obtenerProductos();\r\n        this.verificarPermisos();\r\n    },\r\n    \r\n    methods: {\r\n        verificarPermisos() {\r\n            // Usar AyudanteSesion para verificar si el usuario es administrador\r\n            const datosUsuario = AyudanteSesion.obtenerDatosSesion();\r\n            this.isAdmin = datosUsuario.rol === 'Admin';\r\n            console.log(\"Rol del usuario:\", datosUsuario.rol);\r\n            console.log(\"Es administrador:\", this.isAdmin);\r\n        },\r\n    \r\n        cambiarTab(tab) {\r\n            this.activeTab = tab\r\n            if (tab === 'inventario') {\r\n                // Resetear paginación al cambiar a inventario\r\n                this.currentPage = 1;\r\n                this.obtenerProductos()\r\n            }\r\n            // Los otros tabs tienen sus propios componentes que manejan su carga de datos\r\n        },\r\n    \r\n        onPageChange(page) {\r\n            // Asegurar que page sea un número\r\n            this.currentPage = Number(page) || 1;\r\n            this.obtenerProductos();\r\n        },\r\n    \r\n        agregarExistencia(producto) {\r\n            this.$buefy.dialog.prompt({\r\n                message: '¿Cuántas piezas vas a agregar de ' + producto.name+ '?',\r\n                cancelText: 'Cancelar',\r\n                confirmText: 'Agregar',\r\n                inputAttrs: {\r\n                    type: 'number',\r\n                    placeholder: 'Escribe la cantidad de productos', \r\n                    value: '',\r\n                    min: 1\r\n                },\r\n                trapFocus: true,\r\n                onConfirm: (value) => {\r\n                    // Asegurarse de que value sea un número\r\n                    const cantidad = Number(value);\r\n                    if (isNaN(cantidad) || cantidad <= 0) {\r\n                        this.$buefy.toast.open({\r\n                            message: 'Por favor ingresa una cantidad válida',\r\n                            type: 'is-danger'\r\n                        });\r\n                        return;\r\n                    }\r\n                    \r\n                    this.cargando = true\r\n                    apiRequest({\r\n                        method: 'PATCH', \r\n                        path: `products/${producto.id}/add-stock?quantity=${cantidad}`\r\n                    })\r\n                        .then(registrado => {\r\n                            if (registrado) {\r\n                                this.cargando = false\r\n                                this.$buefy.toast.open(cantidad + ' Productos agregados a ' + producto.name)\r\n                                this.obtenerProductos()\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            this.cargando = false;\r\n                            console.error('Error al agregar existencia:', error);\r\n                            this.$buefy.toast.open({\r\n                                message: 'Error al agregar existencia',\r\n                                type: 'is-danger'\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n        },\r\n    \r\n        quitarExistencia(producto) {\r\n            this.$buefy.dialog.prompt({\r\n                message: '¿Cuántas piezas vas a quitar de ' + producto.name + '?',\r\n                cancelText: 'Cancelar',\r\n                confirmText: 'Quitar',\r\n                inputAttrs: {\r\n                    type: 'number',\r\n                    placeholder: 'Escribe la cantidad de productos',\r\n                    value: '',\r\n                    min: 1\r\n                },\r\n                trapFocus: true,\r\n                onConfirm: (value) => {\r\n                    // Asegurarse de que value sea un número\r\n                    const cantidad = Number(value);\r\n                    if (isNaN(cantidad) || cantidad <= 0) {\r\n                        this.$buefy.toast.open({\r\n                            message: 'Por favor ingresa una cantidad válida',\r\n                            type: 'is-danger'\r\n                        });\r\n                        return;\r\n                    }\r\n                    \r\n                    if (cantidad > producto.stock) {\r\n                        this.$buefy.toast.open('No puedes quitar más de ' + producto.stock + ' productos')\r\n                        return\r\n                    }\r\n                    this.cargando = true\r\n                    \r\n                    apiRequest({\r\n                        method: 'PATCH', \r\n                        path: `products/${producto.id}/subtract-stock?quantity=${cantidad}`\r\n                    })\r\n                        .then(registrado => {\r\n                            if (registrado) {\r\n                                this.cargando = false\r\n                                this.$buefy.toast.open(cantidad + ' Productos quitados a ' + producto.name)\r\n                                this.obtenerProductos()\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            this.cargando = false;\r\n                            console.error('Error al quitar existencia:', error);\r\n                            this.$buefy.toast.open({\r\n                                message: 'Error al quitar existencia',\r\n                                type: 'is-danger'\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n        },\r\n    \r\n        marcarComoDanado(producto) {\r\n            this.$buefy.dialog.prompt({\r\n                title: 'Marcar como abollado',\r\n                message: '¿Cuántas unidades de ' + producto.name + ' están abolladas?',\r\n                cancelText: 'Cancelar',\r\n                confirmText: 'Marcar como abollado',\r\n                inputAttrs: {\r\n                    type: 'number',\r\n                    placeholder: 'Cantidad',\r\n                    value: '1',\r\n                    min: 1,\r\n                    max: producto.stock\r\n                },\r\n                trapFocus: true,\r\n                onConfirm: (value) => {\r\n                    // Asegurarse de que cantidad sea un número\r\n                    const cantidad = Number(value);\r\n                    if (isNaN(cantidad) || cantidad <= 0) {\r\n                        this.$buefy.toast.open({\r\n                            message: 'Por favor ingresa una cantidad válida',\r\n                            type: 'is-danger'\r\n                        });\r\n                        return;\r\n                    }\r\n                    \r\n                    if (cantidad > producto.stock) {\r\n                        this.$buefy.toast.open({\r\n                            message: 'No puedes marcar más unidades de las disponibles',\r\n                            type: 'is-danger'\r\n                        })\r\n                        return\r\n                    }\r\n    \r\n                    this.$buefy.dialog.prompt({\r\n                        title: 'Motivo del abollado',\r\n                        message: 'Indica el motivo por el que el producto está abollado',\r\n                        cancelText: 'Cancelar',\r\n                        confirmText: 'Confirmar',\r\n                        inputAttrs: {\r\n                            type: 'text',\r\n                            placeholder: 'Motivo del abollado',\r\n                            maxlength: 200,\r\n                            required: true\r\n                        },\r\n                        trapFocus: true,\r\n                        onConfirm: (motivo) => {\r\n                            this.cargando = true\r\n                            \r\n                            apiRequest({\r\n                                method: 'POST',\r\n                                path: 'damaged-products',\r\n                                data: {\r\n                                    productId: producto.id,\r\n                                    quantity: cantidad,\r\n                                    notes: motivo\r\n                                }\r\n                            })\r\n                            .then(resultado => {\r\n                                this.cargando = false\r\n                                if (resultado) {\r\n                                    this.$buefy.toast.open({\r\n                                        message: 'Producto marcado como abollado correctamente',\r\n                                        type: 'is-success'\r\n                                    })\r\n                                    this.obtenerProductos()\r\n                                } else {\r\n                                    this.$buefy.toast.open({\r\n                                        message: 'Error al marcar el producto como abollado',\r\n                                        type: 'is-danger'\r\n                                    })\r\n                                }\r\n                            })\r\n                            .catch(error => {\r\n                                this.cargando = false\r\n                                this.$buefy.toast.open({\r\n                                    message: 'Error al marcar el producto como abollado: ' + (error.message || 'Error desconocido'),\r\n                                    type: 'is-danger'\r\n                                })\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        },\r\n    \r\n        async eliminar(idProducto) {\r\n            this.$buefy.dialog.confirm({\r\n                title: 'Eliminar producto',\r\n                message: 'Seguro que quieres <b>eliminar</b> este producto? Esta acción no se puede revertir.',\r\n                confirmText: 'Sí, eliminar',\r\n                cancelText: 'Cancelar',\r\n                type: 'is-danger',\r\n                hasIcon: true,\r\n                onConfirm: () => {\r\n                    this.cargando = true\r\n    \r\n                    apiRequest({\r\n                        method: 'DELETE', \r\n                        path: `products/${idProducto}`\r\n                    })\r\n                        .then(resultado => {\r\n                            if (!resultado) {\r\n                                this.$buefy.toast.open('Error al eliminar')\r\n                                this.cargando = false\r\n                                return\r\n                            }\r\n    \r\n                            if (resultado) {\r\n                                this.cargando = false\r\n                                this.$buefy.toast.open({\r\n                                    type: 'is-info',\r\n                                    message: 'Producto eliminado.'\r\n                                })\r\n                                this.obtenerProductos()\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            this.cargando = false;\r\n                            console.error('Error al eliminar producto:', error);\r\n                            this.$buefy.toast.open({\r\n                                message: 'Error al eliminar el producto',\r\n                                type: 'is-danger'\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n        },\r\n    \r\n        editar(idProducto) {\r\n            this.$router.push({\r\n                name: \"EditarProducto\",\r\n                params: { id: idProducto }\r\n            })\r\n        },\r\n    \r\n        obtenerProductos() {\r\n            this.cargando = true\r\n            \r\n            // Asegurarse de que currentPage y perPage sean números válidos\r\n            const page = Number(this.currentPage);\r\n            const limit = Number(this.perPage);\r\n            \r\n            if (isNaN(page) || isNaN(limit) || page < 1 || limit < 1) {\r\n                console.error('Parámetros de paginación inválidos:', { page, limit });\r\n                this.$buefy.toast.open({\r\n                    message: 'Error en los parámetros de paginación',\r\n                    type: 'is-danger'\r\n                });\r\n                // Resetear a valores por defecto\r\n                this.currentPage = 1;\r\n                this.perPage = 10;\r\n                this.cargando = false;\r\n                return;\r\n            }\r\n            \r\n            apiRequest({\r\n                method: \"GET\",\r\n                path: `products?page=${page}&limit=${limit}`\r\n            })\r\n                .then(respuesta => {\r\n                    if (respuesta && respuesta.data) {\r\n                        this.productos = respuesta.data.data || [];\r\n                        this.totalProductos = respuesta.data.total || 0;\r\n                        this.totalPages = respuesta.data.totalPages || 1;\r\n                        \r\n                        apiRequest({\r\n                            method: \"GET\",\r\n                            path: 'products/inventory/total-value'\r\n                        })\r\n                        .then(respuesta => {\r\n                            this.cartasTotales = [\r\n                                { nombre: \"Número Productos\", total: this.totalProductos, icono: \"package-variant-closed\", clase: \"has-text-danger\" },\r\n                                { nombre: \"Total Inventario\", total: `$ ${parseFloat(respuesta.data).toLocaleString('en-US',{\r\n                                    minimumFractionDigits: 2,\r\n                                    maximumFractionDigits:2\r\n                                })}`, icono: \"chart-bar-stacked\", clase: \"has-text-primary\" },\r\n                            ]\r\n                        })\r\n                        .catch(error => {\r\n                            console.error('Error al obtener valor total del inventario:', error);\r\n                        });\r\n                  \r\n                        apiRequest({\r\n                            method: \"GET\",\r\n                            path: 'products/inventory/total-profit'\r\n                        })\r\n                        .then(respuesta => {\r\n                            this.cartasTotales.push(\r\n                                { nombre: \"Ganancia a precio venta\", total: `$ ${parseFloat(respuesta.data).toLocaleString('en-US',{\r\n                                    minimumFractionDigits: 2,\r\n                                    maximumFractionDigits: 2\r\n                                })}`, icono: \"currency-usd\", clase: \"has-text-info\" }\r\n                            )\r\n                        })\r\n                        .catch(error => {\r\n                            console.error('Error al obtener ganancia total:', error);\r\n                        })\r\n                        .finally(() => {\r\n                            this.cargando = false;\r\n                        });\r\n                    } else {\r\n                        this.productos = [];\r\n                        this.totalProductos = 0;\r\n                        this.totalPages = 1;\r\n                        this.cartasTotales = [];\r\n                        this.cargando = false;\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error al obtener productos:', error);\r\n                    this.$buefy.toast.open({\r\n                        message: 'Error al cargar los productos',\r\n                        type: 'is-danger'\r\n                    });\r\n                    this.productos = [];\r\n                    this.totalProductos = 0;\r\n                    this.totalPages = 1;\r\n                    this.cartasTotales = [];\r\n                    this.cargando = false;\r\n                });\r\n        },\r\n    \r\n        resetPagination() {\r\n            this.currentPage = 1;\r\n            this.obtenerProductos();\r\n        }\r\n    }\r\n    }\r\n    </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}