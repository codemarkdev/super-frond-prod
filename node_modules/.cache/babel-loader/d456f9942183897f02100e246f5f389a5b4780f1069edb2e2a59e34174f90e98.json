{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport FormProducto from './FormProducto.vue';\nimport apiRequest from '../../Servicios/HttpService';\nexport default {\n  name: \"AgregarProducto\",\n  components: {\n    FormProducto\n  },\n  data: () => ({\n    cargando: false,\n    producto: {}\n  }),\n  methods: {\n    async checkDuplicateCode(newCode) {\n      try {\n        const respuesta = await apiRequest({\n          method: \"GET\",\n          path: 'products'\n        });\n        const newCodeString = newCode.toString();\n        const found = respuesta.data.products.find(product => product.code === newCodeString);\n        if (found) {\n          console.log(`El código ${newCodeString} ya existe en el producto ${found.name}.`);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error(\"Error checking duplicate code:\", error);\n        return false;\n      }\n    },\n    async onRegistrado(producto) {\n      this.cargando = true;\n      const isDuplicate = await this.checkDuplicateCode(producto.code);\n      if (isDuplicate) {\n        this.cargando = false;\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'El código de barras ya existe.'\n        });\n        return;\n      }\n      try {\n        apiRequest({\n          method: 'POST',\n          path: 'products',\n          data: {\n            code: producto.code,\n            name: producto.name,\n            purchasePrice: producto.purchasePrice,\n            salePrice: producto.salePrice,\n            touristPrice: producto.touristPrice,\n            reservedStock: 0,\n            stock: producto.stock,\n            wholesaleSale: producto.wholesaleSale,\n            wholesalePrice: producto.wholesalePrice,\n            wholesaleQuantity: producto.wholesaleQuantity,\n            brandId: producto.brandId,\n            categoryId: producto.categoryId\n          }\n        });\n        this.cargando = false;\n        this.$buefy.toast.open({\n          type: 'is-info',\n          message: 'Producto registrado con éxito.'\n        });\n      } catch (error) {\n        this.cargando = false;\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'No se pudo registrar producto'\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["FormProducto","apiRequest","name","components","data","cargando","producto","methods","checkDuplicateCode","newCode","respuesta","method","path","newCodeString","toString","found","products","find","product","code","console","log","error","onRegistrado","isDuplicate","$buefy","toast","open","type","message","purchasePrice","salePrice","touristPrice","reservedStock","stock","wholesaleSale","wholesalePrice","wholesaleQuantity","brandId","categoryId"],"sources":["src/components/Inventario/AgregarProducto.vue"],"sourcesContent":["<template>\r\n    <section>\r\n        <p class=\"title is-1\">Agregar productos</p>\r\n        <b-breadcrumb align=\"is-left\">\r\n            <b-breadcrumb-item tag='router-link' to=\"/\">Inicio</b-breadcrumb-item>\r\n            <b-breadcrumb-item tag='router-link' to=\"/inventario\">Inventario</b-breadcrumb-item>\r\n            <b-breadcrumb-item active>Agregar producto</b-breadcrumb-item>\r\n        </b-breadcrumb>\r\n        <form-producto @registrado=\"onRegistrado\" :productoProp=\"producto\" />\r\n        <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n    </section>\r\n</template>\r\n<script>\r\nimport FormProducto from './FormProducto.vue'\r\nimport apiRequest from '../../Servicios/HttpService';\r\n\r\nexport default {\r\n    name: \"AgregarProducto\",\r\n    components: { FormProducto },\r\n\r\n    data: () => ({\r\n        cargando: false,\r\n        producto: {\r\n          \r\n        },\r\n    }),\r\n\r\n    methods: {\r\n        async checkDuplicateCode(newCode) {\r\n            try {\r\n                const respuesta = await apiRequest({\r\n                    method: \"GET\",\r\n                    path: 'products'\r\n                });\r\n\r\n                const newCodeString = newCode.toString();\r\n                const found = respuesta.data.products.find(product => product.code === newCodeString);\r\n                if (found) {\r\n                    console.log(`El código ${newCodeString} ya existe en el producto ${found.name}.`);\r\n                    return true; \r\n                }\r\n                return false;\r\n            } catch (error) {\r\n                console.error(\"Error checking duplicate code:\", error);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        async onRegistrado(producto) {\r\n            this.cargando = true\r\n\r\n            const isDuplicate = await this.checkDuplicateCode(producto.code);\r\n            if (isDuplicate) {\r\n                this.cargando = false\r\n                this.$buefy.toast.open({\r\n                    type: 'is-danger',\r\n                    message: 'El código de barras ya existe.'\r\n                })\r\n                return;\r\n            }\r\n\r\n           try {\r\n            apiRequest({\r\n                method: 'POST',\r\n                path: 'products',\r\n                data: {\r\n                    code: producto.code,\r\n                    name: producto.name,\r\n                    purchasePrice: producto.purchasePrice,\r\n                    salePrice: producto.salePrice,\r\n                    touristPrice: producto.touristPrice,\r\n                    reservedStock: 0,\r\n                    stock: producto.stock,\r\n                    wholesaleSale: producto.wholesaleSale,\r\n                    wholesalePrice: producto.wholesalePrice,\r\n                    wholesaleQuantity: producto.wholesaleQuantity,\r\n                    brandId: producto.brandId,\r\n                    categoryId: producto.categoryId\r\n                }\r\n            })\r\n            this.cargando = false\r\n                    this.$buefy.toast.open({\r\n                        type: 'is-info',\r\n                        message: 'Producto registrado con éxito.'\r\n                    })\r\n           } catch (error) {\r\n            this.cargando = false\r\n                this.$buefy.toast.open({\r\n                        type: 'is-danger',\r\n                        message: 'No se pudo registrar producto'\r\n                    })\r\n           }\r\n        }\r\n    }\r\n\r\n}\r\n</script>"],"mappings":";;AAaA,OAAAA,YAAA;AACA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAH;EAAA;EAEAI,IAAA,EAAAA,CAAA;IACAC,QAAA;IACAC,QAAA,GAEA;EACA;EAEAC,OAAA;IACA,MAAAC,mBAAAC,OAAA;MACA;QACA,MAAAC,SAAA,SAAAT,UAAA;UACAU,MAAA;UACAC,IAAA;QACA;QAEA,MAAAC,aAAA,GAAAJ,OAAA,CAAAK,QAAA;QACA,MAAAC,KAAA,GAAAL,SAAA,CAAAN,IAAA,CAAAY,QAAA,CAAAC,IAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAC,IAAA,KAAAN,aAAA;QACA,IAAAE,KAAA;UACAK,OAAA,CAAAC,GAAA,cAAAR,aAAA,6BAAAE,KAAA,CAAAb,IAAA;UACA;QACA;QACA;MACA,SAAAoB,KAAA;QACAF,OAAA,CAAAE,KAAA,mCAAAA,KAAA;QACA;MACA;IACA;IAEA,MAAAC,aAAAjB,QAAA;MACA,KAAAD,QAAA;MAEA,MAAAmB,WAAA,cAAAhB,kBAAA,CAAAF,QAAA,CAAAa,IAAA;MACA,IAAAK,WAAA;QACA,KAAAnB,QAAA;QACA,KAAAoB,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAC,IAAA;UACAC,OAAA;QACA;QACA;MACA;MAEA;QACA5B,UAAA;UACAU,MAAA;UACAC,IAAA;UACAR,IAAA;YACAe,IAAA,EAAAb,QAAA,CAAAa,IAAA;YACAjB,IAAA,EAAAI,QAAA,CAAAJ,IAAA;YACA4B,aAAA,EAAAxB,QAAA,CAAAwB,aAAA;YACAC,SAAA,EAAAzB,QAAA,CAAAyB,SAAA;YACAC,YAAA,EAAA1B,QAAA,CAAA0B,YAAA;YACAC,aAAA;YACAC,KAAA,EAAA5B,QAAA,CAAA4B,KAAA;YACAC,aAAA,EAAA7B,QAAA,CAAA6B,aAAA;YACAC,cAAA,EAAA9B,QAAA,CAAA8B,cAAA;YACAC,iBAAA,EAAA/B,QAAA,CAAA+B,iBAAA;YACAC,OAAA,EAAAhC,QAAA,CAAAgC,OAAA;YACAC,UAAA,EAAAjC,QAAA,CAAAiC;UACA;QACA;QACA,KAAAlC,QAAA;QACA,KAAAoB,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAC,IAAA;UACAC,OAAA;QACA;MACA,SAAAP,KAAA;QACA,KAAAjB,QAAA;QACA,KAAAoB,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAC,IAAA;UACAC,OAAA;QACA;MACA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}