{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport UserInfo from './UserInfo.vue';\nimport DateInfo from './DateInfo.vue';\nimport CashInput from './CashInput.vue';\nimport CierreInfo from './CierreInfo.vue';\nimport ActionBtn from './ActionBtn.vue';\nimport ConfirModal from './ConfirModal.vue';\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\nimport apiRequest from '@/Servicios/HttpService';\nexport default {\n  components: {\n    UserInfo,\n    DateInfo,\n    CashInput,\n    ActionBtn,\n    ConfirModal,\n    CierreInfo\n  },\n  data() {\n    return {\n      cargando: false,\n      cajaAbierta: true,\n      // Always set to true since we only want to close the register\n      cashInHand: null,\n      disableBtn: false,\n      userData: {\n        id: '',\n        name: '',\n        username: '',\n        phone: ''\n      },\n      fecha: this.getFormattedDate(),\n      hora: this.getFormattedTime(),\n      totalVentasHoy: 0,\n      totalCuentasPorPagar: 0,\n      showConfirmModal: false,\n      cierreInfo: null,\n      date: this.formatDateToYYYYMMDD(),\n      esAdmin: false // Nueva propiedad para verificar si el usuario es administrador\n    };\n  },\n  mounted() {\n    this.dataUser();\n    this.formatDateToYYYYMMDD();\n    this.obtenerTotalVentasHoy();\n    this.validCashRegister();\n    setInterval(this.actualizarFecha, 60000);\n\n    // Verificar si el usuario es administrador\n    const sesion = AyudanteSesion.obtenerDatosSesion();\n    this.esAdmin = sesion && sesion.rol === 'Admin';\n\n    // Si es admin, mostrar alerta\n    if (this.esAdmin) {\n      this.$buefy.toast.open({\n        message: 'El usuario admin NO CIERRA CAJAS',\n        type: 'is-warning',\n        duration: 5000,\n        position: 'is-top'\n      });\n    }\n  },\n  computed: {\n    isValidAmount() {\n      return this.cashInHand !== null && this.cashInHand >= 0 && !isNaN(this.cashInHand);\n    },\n    isButtonDisabled() {\n      return this.disableBtn || !this.isValidAmount || this.cargando || this.esAdmin;\n    }\n  },\n  methods: {\n    formatNumber(value) {\n      if (value === null || value === undefined) return '-';\n      return Number(value).toLocaleString('es-MX', {\n        style: 'currency',\n        currency: 'MXN'\n      });\n    },\n    mostrarError(mensaje) {\n      this.$buefy.toast.open({\n        message: mensaje,\n        type: 'is-danger',\n        duration: 5000\n      });\n    },\n    formatDateToYYYYMMDD() {\n      const d = new Date();\n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    async validCashRegister() {\n      const sesion = AyudanteSesion.obtenerDatosSesion();\n      if (!sesion) {\n        throw new Error('ID de usuario no encontrado');\n      }\n      const {\n        data,\n        status\n      } = await apiRequest({\n        method: 'GET',\n        path: `cash-register/details/${sesion.id}/${this.date}`\n      });\n      console.log(data);\n      if (status == 200) {\n        // Always set cajaAbierta to true since we only want to close the register\n        this.cajaAbierta = true;\n        const hasClosedState = data.some(item => item.state === 'closed');\n        hasClosedState ? this.disableBtn = true : this.disableBtn = false;\n      }\n    },\n    updateData(newData) {\n      this.cashInHand = newData;\n    },\n    getFormattedDate() {\n      const today = new Date();\n      return today.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    },\n    getFormattedTime() {\n      const now = new Date();\n      return now.toLocaleTimeString('es-MX', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    actualizarFecha() {\n      this.fecha = this.getFormattedDate();\n      this.hora = this.getFormattedTime();\n    },\n    handleCashAction() {\n      // Si es admin, mostrar alerta y no permitir cerrar caja\n      if (this.esAdmin) {\n        this.$buefy.toast.open({\n          message: 'El usuario admin NO CIERRA CAJAS',\n          type: 'is-warning',\n          duration: 5000,\n          position: 'is-top'\n        });\n        return;\n      }\n\n      // Prevent multiple clicks\n      if (this.cargando || this.showConfirmModal) return;\n      if (this.cajaAbierta) {\n        this.showConfirmModal = true;\n      } else {\n        this.abrirCaja();\n      }\n    },\n    async dataUser() {\n      this.cargando = true;\n      try {\n        const sesion = AyudanteSesion.obtenerDatosSesion();\n        if (!sesion) {\n          throw new Error('ID de usuario no encontrado');\n        }\n\n        // Guardar si el usuario es administrador\n        this.esAdmin = sesion.rol === 'Admin';\n        const {\n          data,\n          status\n        } = await apiRequest({\n          method: 'GET',\n          path: `users/${sesion.id}`\n        });\n        if (status === 200) {\n          this.userData = {\n            id: sesion.id,\n            name: data.name ?? '-',\n            username: data.username ?? '-',\n            phone: data.phone || '-'\n          };\n        } else {\n          this.mostrarError('Error al cargar datos del usuario');\n        }\n      } catch (error) {\n        this.mostrarError('Error al cargar datos del usuario');\n        this.userData = {\n          id: '',\n          name: '-',\n          username: '-',\n          phone: '-'\n        };\n      } finally {\n        this.cargando = false;\n      }\n    },\n    volverAtras() {\n      this.$router.go(-1);\n    },\n    async confirmarCierre() {\n      // Si es admin, no permitir cerrar caja\n      if (this.esAdmin) {\n        this.$buefy.toast.open({\n          message: 'El usuario admin NO CIERRA CAJAS',\n          type: 'is-warning',\n          duration: 5000,\n          position: 'is-top'\n        });\n        this.showConfirmModal = false;\n        return;\n      }\n\n      // Prevent multiple submissions\n      if (this.cargando) return;\n      this.cargando = true;\n      try {\n        const {\n          id: userId\n        } = AyudanteSesion.obtenerDatosSesion();\n        if (!userId) {\n          throw new Error('ID de usuario no encontrado');\n        }\n        const {\n          status,\n          data\n        } = await apiRequest({\n          method: 'POST',\n          path: `cash-register/close/${userId}`,\n          data: {\n            cashInHand: Number(this.cashInHand),\n            expectedCash: Number(this.totalVentasHoy),\n            // Add this line to include the expected cash\n            state: \"closed\",\n            totalPayments: 0\n          }\n        });\n        if (status === 201) {\n          this.cierreInfo = data;\n          this.$buefy.toast.open({\n            message: 'Caja cerrada exitosamente',\n            type: 'is-success',\n            duration: 5000\n          });\n          this.validCashRegister();\n          this.cashInHand = null;\n          this.showConfirmModal = false;\n          // this.cajaAbierta = false\n        } else {\n          throw new Error('Error al cerrar la caja');\n        }\n      } catch (error) {\n        console.error('Error al cerrar la caja:', error);\n        this.$buefy.toast.open({\n          message: error.response?.data?.message || 'Error al cerrar la caja. Por favor intente nuevamente.',\n          type: 'is-danger',\n          duration: 5000\n        });\n      } finally {\n        this.cargando = false;\n        this.showConfirmModal = false;\n      }\n    },\n    confirmarCierreCaja() {\n      // Si es admin, no permitir cerrar caja\n      if (this.esAdmin) {\n        this.$buefy.toast.open({\n          message: 'El usuario admin NO CIERRA CAJAS',\n          type: 'is-warning',\n          duration: 5000,\n          position: 'is-top'\n        });\n        this.showConfirmModal = false;\n        return;\n      }\n\n      // Prevent multiple submissions\n      if (this.cargando) return;\n      this.confirmarCierre();\n    },\n    async obtenerTotalVentasHoy() {\n      try {\n        const sesion = AyudanteSesion.obtenerDatosSesion();\n        if (!sesion) return;\n        const userId = sesion.id;\n\n        // Usar el endpoint para obtener las ventas específicas del usuario actual\n        const response = await apiRequest({\n          method: 'GET',\n          path: `users/${userId}/today-income`\n        }).catch(() => ({\n          data: null\n        }));\n        if (response && response.data !== null && response.data !== undefined) {\n          // Si tenemos datos específicos del usuario\n          this.totalVentasHoy = Number(response.data.totalIncome || 0);\n        } else {\n          // Intentar con el endpoint general\n          const generalResponse = await apiRequest({\n            method: 'GET',\n            path: 'sales/today-income'\n          });\n          this.totalVentasHoy = generalResponse.data ?? 0;\n        }\n      } catch (error) {\n        console.error('Error al obtener el total de ventas de hoy:', error);\n        if (error.response?.status === 404) {\n          console.warn('El endpoint de ventas no está disponible');\n        } else {\n          this.mostrarError('No se pudo cargar el total de ventas de hoy');\n        }\n        this.totalVentasHoy = 0;\n      }\n    },\n    obtenerTotalCuentasPorPagar() {\n      // Keeping this empty method as it was in your original code\n    }\n  }\n};","map":{"version":3,"names":["UserInfo","DateInfo","CashInput","CierreInfo","ActionBtn","ConfirModal","AyudanteSesion","apiRequest","components","data","cargando","cajaAbierta","cashInHand","disableBtn","userData","id","name","username","phone","fecha","getFormattedDate","hora","getFormattedTime","totalVentasHoy","totalCuentasPorPagar","showConfirmModal","cierreInfo","date","formatDateToYYYYMMDD","esAdmin","mounted","dataUser","obtenerTotalVentasHoy","validCashRegister","setInterval","actualizarFecha","sesion","obtenerDatosSesion","rol","$buefy","toast","open","message","type","duration","position","computed","isValidAmount","isNaN","isButtonDisabled","methods","formatNumber","value","undefined","Number","toLocaleString","style","currency","mostrarError","mensaje","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","Error","status","method","path","console","log","hasClosedState","some","item","state","updateData","newData","today","toLocaleDateString","now","toLocaleTimeString","hour","minute","handleCashAction","abrirCaja","error","volverAtras","$router","go","confirmarCierre","userId","expectedCash","totalPayments","response","confirmarCierreCaja","catch","totalIncome","generalResponse","warn","obtenerTotalCuentasPorPagar"],"sources":["src/components/Caja/CierreCaja.vue"],"sourcesContent":["<template>\r\n    <section class=\"section\">\r\n        <div class=\"container\">\r\n            <div class=\"card\">\r\n                <div class=\"card-content\">\r\n                    <h1 class=\"title has-text-centered\">\r\n                        <span class=\"icon-text\">\r\n                            <span class=\"icon\">\r\n                                <i class=\"mdi mdi-cash-register\"></i>\r\n                            </span>\r\n                            <span>Cerrar Caja</span>\r\n                        </span>\r\n                    </h1>\r\n                    <user-info :cargando=\"cargando\" :userData=\"userData\" />\r\n                    <date-info :fecha=\"fecha\" :hora=\"hora\" />\r\n                    \r\n                    <!-- Alerta para usuarios administradores -->\r\n                    <div v-if=\"esAdmin\" class=\"notification is-warning mt-4\">\r\n                        <p class=\"has-text-centered has-text-weight-bold\">\r\n                            <span class=\"icon\">\r\n                                <i class=\"mdi mdi-alert\"></i>\r\n                            </span>\r\n                            El usuario admin NO CIERRA CAJAS\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    <!-- Resumen de ventas del turno actual (solo visible cuando la caja está abierta y no es admin) -->\r\n                    <div class=\"card mt-4 mb-4\" v-if=\"cajaAbierta && !esAdmin\">\r\n                        <header class=\"card-header\">\r\n                            <p class=\"card-header-title\">\r\n                                Resumen del Turno Actual\r\n                            </p>\r\n                        </header>\r\n                        <div class=\"card-content\">\r\n                            <div class=\"content\">\r\n                                <div class=\"columns is-multiline\">\r\n                                    <div class=\"column is-full\">\r\n                                        <div class=\"box p-3\">\r\n                                            <div class=\"columns is-mobile\">\r\n                                                <div class=\"column is-8\">\r\n                                                    <p>\r\n                                                        <span class=\"icon\">\r\n                                                            <i class=\"mdi mdi-cart\"></i>\r\n                                                        </span>\r\n                                                        <span>Ventas de {{ userData.name }} en este turno:</span>\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"column is-4 has-text-right\">\r\n                                                    <p class=\"has-text-weight-bold\">{{ formatNumber(totalVentasHoy) }}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div class=\"is-divider\" style=\"margin: 0.5rem 0;\"></div>\r\n                                            \r\n                                            <div class=\"columns is-mobile\">\r\n                                                <div class=\"column is-8\">\r\n                                                    <p class=\"has-text-weight-bold\">\r\n                                                        <span class=\"icon\">\r\n                                                            <i class=\"mdi mdi-cash-register\"></i>\r\n                                                        </span>\r\n                                                        <span>EFECTIVO ESPERADO EN CAJA:</span>\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"column is-4 has-text-right\">\r\n                                                    <p class=\"has-text-weight-bold is-size-5\">{{ formatNumber(totalVentasHoy) }}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div class=\"notification is-info is-light mt-2\">\r\n                                    <p class=\"has-text-centered\">\r\n                                        <span class=\"icon\">\r\n                                            <i class=\"mdi mdi-information\"></i>\r\n                                        </span>\r\n                                        Este es el primer cierre del día. El efectivo esperado corresponde a las ventas realizadas por {{ userData.name }} en su turno.\r\n                                        <br>\r\n                                        <strong>Debe ingresar exactamente {{ formatNumber(totalVentasHoy) }} para evitar discrepancias.</strong>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Solo mostrar los campos de entrada y botones si no es admin -->\r\n                    <template v-if=\"!esAdmin\">\r\n                        <cash-input :cajaAbierta=\"cajaAbierta\" @inputData=\"updateData\" />\r\n                        <action-btn :cajaAbierta=\"cajaAbierta\" :isValidAmount=\"isValidAmount\" :cargando=\"cargando\"\r\n                            :actionCash=\"handleCashAction\" :isButtonDisabled=\"isButtonDisabled\" />\r\n                        <div class=\"notification is-info is-light mt-4\">\r\n                            <p class=\"has-text-centered\">\r\n                                <span class=\"icon\">\r\n                                    <i class=\"mdi mdi-information\"></i>\r\n                                </span>\r\n                                Asegúrese de contar correctamente el efectivo antes de cerrar la caja.\r\n                            </p>\r\n                        </div>\r\n                    </template>\r\n                    \r\n                    <!-- Si es admin, mostrar botón para volver -->\r\n                    <div v-else class=\"mt-4\">\r\n                        <button class=\"button is-fullwidth is-primary\" @click=\"volverAtras\">\r\n                            <span class=\"icon\">\r\n                                <i class=\"mdi mdi-arrow-left\"></i>\r\n                            </span>\r\n                            <span>Volver</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <confir-modal \r\n            :cashInHand=\"cashInHand\" \r\n            :cargando=\"cargando\"\r\n            :showConfirmModal.sync=\"showConfirmModal\" \r\n            :ventasTurno=\"totalVentasHoy\"\r\n            :efectivoEsperado=\"totalVentasHoy\"\r\n            @confirmar-cierre=\"confirmarCierreCaja\" \r\n        />\r\n        <cierre-info \r\n            v-if=\"cierreInfo\" \r\n            :cierreInfo.sync=\"cierreInfo\" \r\n            :userData=\"userData\"\r\n            :hayTurnoPrevio=\"false\"\r\n            :esTurnoPrevioMismoUsuario=\"false\"\r\n            :turnoPrevioInfo=\"{}\"\r\n            :ventasTurno=\"totalVentasHoy\"\r\n        />\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport UserInfo from './UserInfo.vue';\r\nimport DateInfo from './DateInfo.vue';\r\nimport CashInput from './CashInput.vue';\r\nimport CierreInfo from './CierreInfo.vue';\r\nimport ActionBtn from './ActionBtn.vue';\r\nimport ConfirModal from './ConfirModal.vue';\r\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\r\nimport apiRequest from '@/Servicios/HttpService';\r\nexport default {\r\n    components: {\r\n        UserInfo,\r\n        DateInfo,\r\n        CashInput,\r\n        ActionBtn,\r\n        ConfirModal,\r\n        CierreInfo\r\n    },\r\n    data() {\r\n        return {\r\n            cargando: false,\r\n            cajaAbierta: true, // Always set to true since we only want to close the register\r\n            cashInHand: null,\r\n            disableBtn: false,\r\n            userData: {\r\n                id: '',\r\n                name: '',\r\n                username: '',\r\n                phone: ''\r\n            },\r\n            fecha: this.getFormattedDate(),\r\n            hora: this.getFormattedTime(),\r\n            totalVentasHoy: 0,\r\n            totalCuentasPorPagar: 0,\r\n            showConfirmModal: false,\r\n            cierreInfo: null,\r\n            date: this.formatDateToYYYYMMDD(),\r\n            esAdmin: false // Nueva propiedad para verificar si el usuario es administrador\r\n        };\r\n    },\r\n\r\n    mounted() {\r\n        this.dataUser();\r\n        this.formatDateToYYYYMMDD();\r\n        this.obtenerTotalVentasHoy();\r\n        this.validCashRegister();\r\n        setInterval(this.actualizarFecha, 60000);\r\n        \r\n        // Verificar si el usuario es administrador\r\n        const sesion = AyudanteSesion.obtenerDatosSesion();\r\n        this.esAdmin = sesion && sesion.rol === 'Admin';\r\n        \r\n        // Si es admin, mostrar alerta\r\n        if (this.esAdmin) {\r\n            this.$buefy.toast.open({\r\n                message: 'El usuario admin NO CIERRA CAJAS',\r\n                type: 'is-warning',\r\n                duration: 5000,\r\n                position: 'is-top'\r\n            });\r\n        }\r\n    },\r\n    computed: {\r\n        isValidAmount() {\r\n            return this.cashInHand !== null &&\r\n                this.cashInHand >= 0 &&\r\n                !isNaN(this.cashInHand)\r\n        },\r\n        isButtonDisabled() {\r\n            return this.disableBtn || !this.isValidAmount || this.cargando || this.esAdmin;\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        formatNumber(value) {\r\n            if (value === null || value === undefined) return '-';\r\n            return Number(value).toLocaleString('es-MX', { style: 'currency', currency: 'MXN' });\r\n        },\r\n        \r\n        mostrarError(mensaje) {\r\n            this.$buefy.toast.open({\r\n                message: mensaje,\r\n                type: 'is-danger',\r\n                duration: 5000\r\n            });\r\n        },\r\n\r\n        formatDateToYYYYMMDD() {\r\n            const d = new Date();\r\n            const year = d.getFullYear();\r\n            const month = String(d.getMonth() + 1).padStart(2, '0');\r\n            const day = String(d.getDate()).padStart(2, '0');\r\n            return `${year}-${month}-${day}`;\r\n        },\r\n\r\n        async validCashRegister() {\r\n            const sesion = AyudanteSesion.obtenerDatosSesion();\r\n            if (!sesion) {\r\n                throw new Error('ID de usuario no encontrado');\r\n            }\r\n            const {data, status} = await apiRequest({\r\n                method: 'GET',\r\n                path: `cash-register/details/${sesion.id}/${this.date}`\r\n            })\r\n\r\n            console.log(data)\r\n\r\n            if (status == 200) {\r\n                // Always set cajaAbierta to true since we only want to close the register\r\n                this.cajaAbierta = true;\r\n                const hasClosedState = data.some(item => item.state === 'closed');\r\n                hasClosedState ? this.disableBtn = true : this.disableBtn = false;\r\n            }\r\n        },\r\n        updateData(newData) {\r\n            this.cashInHand = newData;\r\n        },\r\n        getFormattedDate() {\r\n            const today = new Date();\r\n            return today.toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' });\r\n        },\r\n        getFormattedTime() {\r\n            const now = new Date();\r\n            return now.toLocaleTimeString('es-MX', { hour: '2-digit', minute: '2-digit' });\r\n        },\r\n        actualizarFecha() {\r\n            this.fecha = this.getFormattedDate();\r\n            this.hora = this.getFormattedTime();\r\n        },\r\n        handleCashAction() {\r\n            // Si es admin, mostrar alerta y no permitir cerrar caja\r\n            if (this.esAdmin) {\r\n                this.$buefy.toast.open({\r\n                    message: 'El usuario admin NO CIERRA CAJAS',\r\n                    type: 'is-warning',\r\n                    duration: 5000,\r\n                    position: 'is-top'\r\n                });\r\n                return;\r\n            }\r\n            \r\n            // Prevent multiple clicks\r\n            if (this.cargando || this.showConfirmModal) return;\r\n            \r\n            if (this.cajaAbierta) {\r\n                this.showConfirmModal = true;\r\n            } else {\r\n                this.abrirCaja();\r\n            }\r\n        },\r\n        async dataUser() {\r\n            this.cargando = true;\r\n            try {\r\n                const sesion = AyudanteSesion.obtenerDatosSesion();\r\n                if (!sesion) {\r\n                    throw new Error('ID de usuario no encontrado');\r\n                }\r\n                \r\n                // Guardar si el usuario es administrador\r\n                this.esAdmin = sesion.rol === 'Admin';\r\n                \r\n                const { data, status } = await apiRequest({\r\n                    method: 'GET',\r\n                    path: `users/${sesion.id}`\r\n                })\r\n                if (status === 200) {\r\n                    this.userData = {\r\n                        id: sesion.id,\r\n                        name: data.name ?? '-',\r\n                        username: data.username ?? '-',\r\n                        phone: data.phone || '-'\r\n                    };\r\n                } else {\r\n                    this.mostrarError('Error al cargar datos del usuario');\r\n                }\r\n            } catch (error) {\r\n                this.mostrarError('Error al cargar datos del usuario');\r\n                this.userData = { id: '', name: '-', username: '-', phone: '-' };\r\n            } finally {\r\n                this.cargando = false;\r\n            }\r\n        },\r\n\r\n        volverAtras() {\r\n            this.$router.go(-1);\r\n        },\r\n\r\n        async confirmarCierre() {\r\n            // Si es admin, no permitir cerrar caja\r\n            if (this.esAdmin) {\r\n                this.$buefy.toast.open({\r\n                    message: 'El usuario admin NO CIERRA CAJAS',\r\n                    type: 'is-warning',\r\n                    duration: 5000,\r\n                    position: 'is-top'\r\n                });\r\n                this.showConfirmModal = false;\r\n                return;\r\n            }\r\n            \r\n            // Prevent multiple submissions\r\n            if (this.cargando) return;\r\n            \r\n            this.cargando = true\r\n            try {\r\n                const { id: userId } = AyudanteSesion.obtenerDatosSesion()\r\n\r\n                if (!userId) {\r\n                    throw new Error('ID de usuario no encontrado')\r\n                }\r\n                const { status, data } = await apiRequest({\r\n                    method: 'POST',\r\n                    path: `cash-register/close/${userId}`,\r\n                    data: {\r\n                        cashInHand: Number(this.cashInHand), \r\n                        expectedCash: Number(this.totalVentasHoy), // Add this line to include the expected cash\r\n                        state: \"closed\",\r\n                        totalPayments: 0\r\n                    }\r\n                })\r\n\r\n                if (status === 201) {\r\n                    this.cierreInfo = data\r\n                    this.$buefy.toast.open({\r\n                        message: 'Caja cerrada exitosamente',\r\n                        type: 'is-success',\r\n                        duration: 5000\r\n                    })\r\n                    this.validCashRegister()\r\n                    this.cashInHand = null\r\n                    this.showConfirmModal = false\r\n                    // this.cajaAbierta = false\r\n                } else {\r\n                    throw new Error('Error al cerrar la caja')\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al cerrar la caja:', error)\r\n                this.$buefy.toast.open({\r\n                    message: error.response?.data?.message || 'Error al cerrar la caja. Por favor intente nuevamente.',\r\n                    type: 'is-danger',\r\n                    duration: 5000\r\n                })\r\n            } finally {\r\n                this.cargando = false\r\n                this.showConfirmModal = false\r\n            }\r\n        },\r\n        confirmarCierreCaja() {\r\n            // Si es admin, no permitir cerrar caja\r\n            if (this.esAdmin) {\r\n                this.$buefy.toast.open({\r\n                    message: 'El usuario admin NO CIERRA CAJAS',\r\n                    type: 'is-warning',\r\n                    duration: 5000,\r\n                    position: 'is-top'\r\n                });\r\n                this.showConfirmModal = false;\r\n                return;\r\n            }\r\n            \r\n            // Prevent multiple submissions\r\n            if (this.cargando) return;\r\n            this.confirmarCierre();\r\n        },\r\n        async obtenerTotalVentasHoy() {\r\n            try {\r\n                const sesion = AyudanteSesion.obtenerDatosSesion();\r\n                if (!sesion) return;\r\n                \r\n                const userId = sesion.id;\r\n                \r\n                // Usar el endpoint para obtener las ventas específicas del usuario actual\r\n                const response = await apiRequest({\r\n                    method: 'GET',\r\n                    path: `users/${userId}/today-income`\r\n                }).catch(() => ({ data: null }));\r\n                \r\n                if (response && response.data !== null && response.data !== undefined) {\r\n                    // Si tenemos datos específicos del usuario\r\n                    this.totalVentasHoy = Number(response.data.totalIncome || 0);\r\n                } else {\r\n                    // Intentar con el endpoint general\r\n                    const generalResponse = await apiRequest({\r\n                        method: 'GET',\r\n                        path: 'sales/today-income'\r\n                    });\r\n                    this.totalVentasHoy = generalResponse.data ?? 0;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al obtener el total de ventas de hoy:', error);\r\n                if (error.response?.status === 404) {\r\n                    console.warn('El endpoint de ventas no está disponible');\r\n                } else {\r\n                    this.mostrarError('No se pudo cargar el total de ventas de hoy');\r\n                }\r\n                this.totalVentasHoy = 0;\r\n            }\r\n        },\r\n        obtenerTotalCuentasPorPagar() {\r\n            // Keeping this empty method as it was in your original code\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.card {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\r\n}\r\n\r\n.card-content {\r\n    padding: 2rem;\r\n}\r\n\r\n.button .icon {\r\n    margin-right: 0.5rem;\r\n}\r\n\r\n.modal-card-body {\r\n    padding: 1.5rem;\r\n}\r\n\r\n.modal-card-foot {\r\n    justify-content: flex-end;\r\n    padding: 1rem;\r\n}\r\n\r\n.notification {\r\n    margin-top: 1.5rem;\r\n}\r\n\r\n.user-info {\r\n    text-align: left;\r\n}\r\n\r\n.date-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.date-info p {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.icon-text .icon {\r\n    margin-right: 0.5rem;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n    .card-content {\r\n        padding: 1.5rem;\r\n    }\r\n\r\n    .level-left,\r\n    .level-right {\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    .date-info {\r\n        text-align: left;\r\n        margin-top: 1rem;\r\n    }\r\n}\r\n\r\n.mt-2 {\r\n    margin-top: 0.5rem;\r\n}\r\n\r\n.mt-3 {\r\n    margin-top: 0.75rem;\r\n}\r\n\r\n.mt-4 {\r\n    margin-top: 1rem;\r\n}\r\n\r\n.mb-4 {\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.mt-6 {\r\n    margin-top: 1.5rem;\r\n}\r\n\r\n.p-3 {\r\n    padding: 0.75rem;\r\n}\r\n\r\n.is-divider {\r\n    height: 1px;\r\n    background-color: #dbdbdb;\r\n    margin: 1rem 0;\r\n}\r\n\r\n.is-loading {\r\n    color: #7a7a7a;\r\n    font-style: italic;\r\n}\r\n\r\n.user-info .icon-text {\r\n    align-items: center;\r\n}\r\n\r\n.user-info .icon-text .icon {\r\n    margin-right: 0.5rem;\r\n}\r\n\r\n.user-info .title,\r\n.user-info .subtitle {\r\n    margin-bottom: 0.5rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}