{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport apiRequest from '../../Servicios/HttpService';\nimport AyudanteSesion from '../../Servicios/AyudanteSesion';\nexport default {\n  name: 'CreateOrden',\n  data() {\n    return {\n      // Lista de proveedores\n      proveedores: [],\n      cargandoProveedores: false,\n      // Datos de la nueva orden\n      nuevaOrden: {\n        providerId: '',\n        orderDate: this.obtenerFechaActual(),\n        invoiceNumber: '',\n        isActive: true\n      },\n      // Proveedor seleccionado\n      proveedorSeleccionado: null,\n      // Estado del formulario\n      enviando: false,\n      cargando: false,\n      error: null,\n      exitoso: false,\n      // Estado de administrador\n      esAdmin: false\n    };\n  },\n  computed: {\n    ordenValida() {\n      return this.nuevaOrden.providerId && this.nuevaOrden.orderDate && this.nuevaOrden.invoiceNumber;\n    }\n  },\n  created() {\n    // Verificar si el usuario es administrador\n    this.verificarAdmin();\n\n    // Cargar proveedores\n    this.cargarProveedores();\n  },\n  methods: {\n    // Método para verificar si el usuario es administrador\n    verificarAdmin() {\n      // Obtener el rol del usuario desde AyudanteSesion\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion();\n      this.esAdmin = datosUsuario.rol === 'Admin';\n    },\n    // Obtener la fecha actual en formato YYYY-MM-DD\n    obtenerFechaActual() {\n      const fecha = new Date();\n      const year = fecha.getFullYear();\n      const month = String(fecha.getMonth() + 1).padStart(2, '0');\n      const day = String(fecha.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // Cargar la lista de proveedores\n    async cargarProveedores() {\n      this.cargandoProveedores = true;\n      this.cargando = true;\n      try {\n        const respuesta = await apiRequest({\n          method: 'GET',\n          path: 'providers'\n        });\n        if (respuesta && Array.isArray(respuesta.data)) {\n          this.proveedores = respuesta.data;\n        } else {\n          console.error('Formato de respuesta inesperado:', respuesta);\n          this.error = 'Error al cargar los proveedores. Formato de respuesta inesperado.';\n        }\n      } catch (error) {\n        console.error('Error al cargar proveedores:', error);\n        this.error = 'Error al cargar los proveedores. Por favor, intente nuevamente.';\n      } finally {\n        this.cargandoProveedores = false;\n        this.cargando = false;\n      }\n    },\n    // Actualizar el proveedor seleccionado cuando cambia el select\n    actualizarProveedor() {\n      if (!this.nuevaOrden.providerId) {\n        this.proveedorSeleccionado = null;\n        return;\n      }\n      const proveedorId = parseInt(this.nuevaOrden.providerId);\n      this.proveedorSeleccionado = this.proveedores.find(p => p.id === proveedorId) || null;\n    },\n    // Crear una nueva orden\n    async crearOrden() {\n      if (!this.ordenValida) return;\n      this.enviando = true;\n      this.cargando = true;\n      this.error = null;\n      this.exitoso = false;\n      try {\n        const respuesta = await apiRequest({\n          method: 'POST',\n          path: 'orders',\n          data: {\n            providerId: parseInt(this.nuevaOrden.providerId),\n            orderDate: this.nuevaOrden.orderDate,\n            invoiceNumber: this.nuevaOrden.invoiceNumber,\n            isActive: this.nuevaOrden.isActive\n          }\n        });\n        if (respuesta && respuesta.status === 201) {\n          this.exitoso = true;\n\n          // Mostrar mensaje de éxito\n          this.$buefy.toast.open({\n            message: 'Orden creada exitosamente',\n            type: 'is-success'\n          });\n\n          // Limpiar formulario después de 2 segundos\n          setTimeout(() => {\n            this.limpiarFormulario();\n          }, 2000);\n        } else {\n          this.error = `Error ${respuesta.status}: No se pudo crear la orden`;\n        }\n      } catch (error) {\n        console.error('Error al crear orden:', error);\n        this.error = error.message || 'Error al crear la orden. Por favor, intente nuevamente.';\n      } finally {\n        this.enviando = false;\n        this.cargando = false;\n      }\n    },\n    // Limpiar el formulario\n    limpiarFormulario() {\n      this.nuevaOrden = {\n        providerId: '',\n        orderDate: this.obtenerFechaActual(),\n        invoiceNumber: '',\n        isActive: true\n      };\n      this.proveedorSeleccionado = null;\n      this.error = null;\n      this.exitoso = false;\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","AyudanteSesion","name","data","proveedores","cargandoProveedores","nuevaOrden","providerId","orderDate","obtenerFechaActual","invoiceNumber","isActive","proveedorSeleccionado","enviando","cargando","error","exitoso","esAdmin","computed","ordenValida","created","verificarAdmin","cargarProveedores","methods","datosUsuario","obtenerDatosSesion","rol","fecha","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","respuesta","method","path","Array","isArray","console","actualizarProveedor","proveedorId","parseInt","find","p","id","crearOrden","status","$buefy","toast","open","message","type","setTimeout","limpiarFormulario"],"sources":["src/components/OrdenesDetalles/CreateOrden.vue"],"sourcesContent":["<template>\r\n    <div class=\"create-orden\">\r\n        <div class=\"section\">\r\n            <div class=\"section-header\">\r\n                <div class=\"header-left\">\r\n                    <i class=\"fas fa-plus-circle section-icon\"></i>\r\n                    <h3>Crear Nueva Orden</h3>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"section-content\">\r\n                <form @submit.prevent=\"crearOrden\" class=\"form\">\r\n                    <!-- Selección de proveedor -->\r\n                    <div class=\"field\">\r\n                        <label class=\"label\">\r\n                            <i class=\"fas fa-truck label-icon\"></i> Proveedor:\r\n                        </label>\r\n                        <div class=\"control is-expanded\">\r\n                            <div class=\"select is-fullwidth\">\r\n                                <select v-model=\"nuevaOrden.providerId\" required @change=\"actualizarProveedor\">\r\n                                    <option value=\"\" disabled>Seleccione un proveedor</option>\r\n                                    <option v-for=\"proveedor in proveedores\" :key=\"proveedor.id\" :value=\"proveedor.id\">\r\n                                        {{ proveedor.name }}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Información del proveedor seleccionado -->\r\n                    <div v-if=\"proveedorSeleccionado\" class=\"box provider-info mb-4\">\r\n                        <h4 class=\"title is-5 mb-3\">\r\n                            <i class=\"fas fa-info-circle mr-2\"></i> Información del Proveedor\r\n                        </h4>\r\n                        <div class=\"columns is-multiline\">\r\n                            <div class=\"column is-6\">\r\n                                <div class=\"field\">\r\n                                    <label class=\"label\">Nombre:</label>\r\n                                    <p>{{ proveedorSeleccionado.name }}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-6\">\r\n                                <div class=\"field\">\r\n                                    <label class=\"label\">ID Fiscal:</label>\r\n                                    <p>{{ proveedorSeleccionado.taxId }}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-6\">\r\n                                <div class=\"field\">\r\n                                    <label class=\"label\">Teléfono:</label>\r\n                                    <p>{{ proveedorSeleccionado.phone }}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-6\">\r\n                                <div class=\"field\">\r\n                                    <label class=\"label\">Dirección:</label>\r\n                                    <p>{{ proveedorSeleccionado.address }}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Fecha de la orden -->\r\n                    <div class=\"field\">\r\n                        <label class=\"label\">\r\n                            <i class=\"fas fa-calendar-alt label-icon\"></i> Fecha de la Orden:\r\n                        </label>\r\n                        <div class=\"control\">\r\n                            <input type=\"date\" class=\"input\" v-model=\"nuevaOrden.orderDate\" required>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Número de factura -->\r\n                    <div class=\"field\">\r\n                        <label class=\"label\">\r\n                            <i class=\"fas fa-file-invoice label-icon\"></i> Número de Factura:\r\n                        </label>\r\n                        <div class=\"control\">\r\n                            <input type=\"text\" class=\"input\" v-model=\"nuevaOrden.invoiceNumber\" \r\n                                placeholder=\"Ej: INV-12345\" required>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Botones de acción -->\r\n                    <div class=\"field is-grouped mt-5\">\r\n                        <div class=\"control\">\r\n                            <button type=\"submit\" class=\"button is-primary\" :disabled=\"enviando || !ordenValida\">\r\n                                <i class=\"fas fa-save mr-2\"></i>\r\n                                {{ enviando ? 'Creando...' : 'Crear Orden' }}\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"control\">\r\n                            <button type=\"button\" class=\"button is-light\" @click=\"limpiarFormulario\">\r\n                                <i class=\"fas fa-times mr-2\"></i> Cancelar\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Mensajes de error y éxito -->\r\n                    <div v-if=\"error\" class=\"notification is-danger mt-4\">\r\n                        <button class=\"delete\" @click=\"error = null\"></button>\r\n                        <i class=\"fas fa-exclamation-circle mr-2\"></i> {{ error }}\r\n                    </div>\r\n\r\n                    <div v-if=\"exitoso\" class=\"notification is-success mt-4\">\r\n                        <button class=\"delete\" @click=\"exitoso = false\"></button>\r\n                        <i class=\"fas fa-check-circle mr-2\"></i> Orden creada exitosamente.\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n        <b-loading :is-full-page=\"false\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport apiRequest from '../../Servicios/HttpService';\r\nimport AyudanteSesion from '../../Servicios/AyudanteSesion';\r\n\r\nexport default {\r\n    name: 'CreateOrden',\r\n    \r\n    data() {\r\n        return {\r\n            // Lista de proveedores\r\n            proveedores: [],\r\n            cargandoProveedores: false,\r\n            \r\n            // Datos de la nueva orden\r\n            nuevaOrden: {\r\n                providerId: '',\r\n                orderDate: this.obtenerFechaActual(),\r\n                invoiceNumber: '',\r\n                isActive: true\r\n            },\r\n            \r\n            // Proveedor seleccionado\r\n            proveedorSeleccionado: null,\r\n            \r\n            // Estado del formulario\r\n            enviando: false,\r\n            cargando: false,\r\n            error: null,\r\n            exitoso: false,\r\n            \r\n            // Estado de administrador\r\n            esAdmin: false\r\n        };\r\n    },\r\n    \r\n    computed: {\r\n        ordenValida() {\r\n            return this.nuevaOrden.providerId && \r\n                   this.nuevaOrden.orderDate && \r\n                   this.nuevaOrden.invoiceNumber;\r\n        }\r\n    },\r\n    \r\n    created() {\r\n        // Verificar si el usuario es administrador\r\n        this.verificarAdmin();\r\n        \r\n        // Cargar proveedores\r\n        this.cargarProveedores();\r\n    },\r\n    \r\n    methods: {\r\n        // Método para verificar si el usuario es administrador\r\n        verificarAdmin() {\r\n            // Obtener el rol del usuario desde AyudanteSesion\r\n            const datosUsuario = AyudanteSesion.obtenerDatosSesion();\r\n            this.esAdmin = datosUsuario.rol === 'Admin';\r\n        },\r\n        \r\n        // Obtener la fecha actual en formato YYYY-MM-DD\r\n        obtenerFechaActual() {\r\n            const fecha = new Date();\r\n            const year = fecha.getFullYear();\r\n            const month = String(fecha.getMonth() + 1).padStart(2, '0');\r\n            const day = String(fecha.getDate()).padStart(2, '0');\r\n            return `${year}-${month}-${day}`;\r\n        },\r\n        \r\n        // Cargar la lista de proveedores\r\n        async cargarProveedores() {\r\n            this.cargandoProveedores = true;\r\n            this.cargando = true;\r\n            \r\n            try {\r\n                const respuesta = await apiRequest({\r\n                    method: 'GET',\r\n                    path: 'providers'\r\n                });\r\n                \r\n                if (respuesta && Array.isArray(respuesta.data)) {\r\n                    this.proveedores = respuesta.data;\r\n                } else {\r\n                    console.error('Formato de respuesta inesperado:', respuesta);\r\n                    this.error = 'Error al cargar los proveedores. Formato de respuesta inesperado.';\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al cargar proveedores:', error);\r\n                this.error = 'Error al cargar los proveedores. Por favor, intente nuevamente.';\r\n            } finally {\r\n                this.cargandoProveedores = false;\r\n                this.cargando = false;\r\n            }\r\n        },\r\n        \r\n        // Actualizar el proveedor seleccionado cuando cambia el select\r\n        actualizarProveedor() {\r\n            if (!this.nuevaOrden.providerId) {\r\n                this.proveedorSeleccionado = null;\r\n                return;\r\n            }\r\n            \r\n            const proveedorId = parseInt(this.nuevaOrden.providerId);\r\n            this.proveedorSeleccionado = this.proveedores.find(p => p.id === proveedorId) || null;\r\n        },\r\n        \r\n        // Crear una nueva orden\r\n        async crearOrden() {\r\n            if (!this.ordenValida) return;\r\n            \r\n            this.enviando = true;\r\n            this.cargando = true;\r\n            this.error = null;\r\n            this.exitoso = false;\r\n            \r\n            try {\r\n                const respuesta = await apiRequest({\r\n                    method: 'POST',\r\n                    path: 'orders',\r\n                    data: {\r\n                        providerId: parseInt(this.nuevaOrden.providerId),\r\n                        orderDate: this.nuevaOrden.orderDate,\r\n                        invoiceNumber: this.nuevaOrden.invoiceNumber,\r\n                        isActive: this.nuevaOrden.isActive\r\n                    }\r\n                });\r\n                \r\n                if (respuesta && respuesta.status === 201) {\r\n                    this.exitoso = true;\r\n                    \r\n                    // Mostrar mensaje de éxito\r\n                    this.$buefy.toast.open({\r\n                        message: 'Orden creada exitosamente',\r\n                        type: 'is-success'\r\n                    });\r\n                    \r\n                    // Limpiar formulario después de 2 segundos\r\n                    setTimeout(() => {\r\n                        this.limpiarFormulario();\r\n                    }, 2000);\r\n                } else {\r\n                    this.error = `Error ${respuesta.status}: No se pudo crear la orden`;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al crear orden:', error);\r\n                this.error = error.message || 'Error al crear la orden. Por favor, intente nuevamente.';\r\n            } finally {\r\n                this.enviando = false;\r\n                this.cargando = false;\r\n            }\r\n        },\r\n        \r\n        // Limpiar el formulario\r\n        limpiarFormulario() {\r\n            this.nuevaOrden = {\r\n                providerId: '',\r\n                orderDate: this.obtenerFechaActual(),\r\n                invoiceNumber: '',\r\n                isActive: true\r\n            };\r\n            this.proveedorSeleccionado = null;\r\n            this.error = null;\r\n            this.exitoso = false;\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}