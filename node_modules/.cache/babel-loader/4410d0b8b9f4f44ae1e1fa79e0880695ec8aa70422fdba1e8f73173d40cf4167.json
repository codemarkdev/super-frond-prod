{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport MensajeInicial from '../Extras/MensajeInicial';\nimport CartasTotales from '../Extras/CartasTotales';\nimport apiRequest from '../../Servicios/HttpService';\nimport AyudanteSesion from '../../Servicios/AyudanteSesion';\nexport default {\n  name: 'ProductosAbollados',\n  components: {\n    MensajeInicial,\n    CartasTotales\n  },\n  data: () => ({\n    productosAbollados: [],\n    cargando: false,\n    isPaginationSimple: false,\n    isPaginationRounded: true,\n    paginationPosition: 'bottom',\n    sortIcon: 'arrow-up',\n    sortIconSize: 'is-medium',\n    currentPage: 1,\n    perPage: 10,\n    totalProductosAbollados: 0,\n    totalPages: 1,\n    isAdmin: false,\n    isDetallesModalActive: false,\n    productoSeleccionado: null,\n    // PROPIEDADES PARA ESTADÍSTICAS\n    estadisticasPerdidas: null,\n    cartasEstadisticasPerdidas: [],\n    filtroProveedor: null,\n    nombreProveedor: '',\n    columnasPorMarca: [{\n      field: 'brandName',\n      label: 'Marca',\n      sortable: true\n    }, {\n      field: 'totalLoss',\n      label: 'Pérdida Total ($)',\n      numeric: true,\n      sortable: true,\n      formatter: value => `$${parseFloat(value).toFixed(2)}`\n    }, {\n      field: 'replacedLoss',\n      label: 'Pérdida Reemplazada ($)',\n      numeric: true,\n      sortable: true,\n      formatter: value => `$${parseFloat(value).toFixed(2)}`\n    }, {\n      field: 'netLoss',\n      label: 'Pérdida Neta ($)',\n      numeric: true,\n      sortable: true,\n      formatter: value => {\n        const netLoss = parseFloat(value) || 0;\n        return `$${netLoss.toFixed(2)}`;\n      }\n    }],\n    // PROPIEDAD PARA PROVEEDORES\n    proveedores: []\n  }),\n  mounted() {\n    this.obtenerProductosAbollados();\n    this.verificarPermisos();\n    this.cargarEstadisticasPerdidas();\n    this.cargarProveedores();\n  },\n  methods: {\n    verificarPermisos() {\n      // Usar AyudanteSesion para verificar si el usuario es administrador\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion();\n      this.isAdmin = datosUsuario.rol === 'Admin';\n      console.log(\"Rol del usuario:\", datosUsuario.rol);\n      console.log(\"Es administrador:\", this.isAdmin);\n    },\n    obtenerProductosAbollados() {\n      this.cargando = true;\n      console.log(\"Obteniendo productos abollados...\");\n      apiRequest({\n        method: 'GET',\n        path: 'damaged-products'\n      }).then(respuesta => {\n        console.log(\"Respuesta de damaged-products:\", respuesta);\n\n        // Verificar si la respuesta tiene una estructura diferente\n        if (respuesta && respuesta.data) {\n          this.productosAbollados = respuesta.data;\n        } else {\n          this.productosAbollados = respuesta || [];\n        }\n        this.totalProductosAbollados = this.productosAbollados.length;\n        this.totalPages = Math.ceil(this.totalProductosAbollados / this.perPage);\n        this.cargando = false;\n        console.log(\"Productos abollados procesados:\", this.productosAbollados);\n        console.log(\"Total productos abollados:\", this.totalProductosAbollados);\n      }).catch(error => {\n        console.error('Error al obtener productos abollados:', error);\n        this.$buefy.toast.open({\n          message: 'Error al cargar los productos abollados: ' + (error.message || 'Error desconocido'),\n          type: 'is-danger'\n        });\n        this.cargando = false;\n      });\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    truncateText(text, maxLength) {\n      if (!text) return '';\n      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n    },\n    getReplacementStatus(producto) {\n      if (producto.replaced) {\n        return 'Reemplazado';\n      } else if (producto.replacementRequested) {\n        return producto.replacementApproved ? 'Aprobado' : 'Pendiente de aprobación';\n      }\n      return 'No solicitado';\n    },\n    getReplacementTagType(producto) {\n      if (producto.replaced) {\n        return 'is-success';\n      } else if (producto.replacementRequested) {\n        return producto.replacementApproved ? 'is-info' : 'is-warning';\n      }\n      return 'is-light';\n    },\n    verDetalles(producto) {\n      this.productoSeleccionado = producto;\n      this.isDetallesModalActive = true;\n    },\n    solicitarReemplazo(producto) {\n      // Verificar si el usuario es administrador\n      if (!this.isAdmin) {\n        this.$buefy.toast.open({\n          message: 'No tienes permisos para realizar esta acción',\n          type: 'is-danger'\n        });\n        return;\n      }\n      this.$buefy.dialog.confirm({\n        title: 'Solicitar reposición',\n        message: `¿Deseas solicitar la reposición de ${producto.quantity} unidades de ${producto.product.name} al proveedor ${producto.brand.provider.name}?`,\n        confirmText: 'Sí, solicitar',\n        cancelText: 'Cancelar',\n        type: 'is-warning',\n        hasIcon: true,\n        onConfirm: () => {\n          this.cargando = true;\n          console.log(`Solicitando reposición para el producto dañado ID: ${producto.id}`);\n          apiRequest({\n            method: 'PATCH',\n            path: `damaged-products/${producto.id}/request-replacement`\n          }).then(resultado => {\n            this.cargando = false;\n            console.log(\"Resultado de la solicitud de reposición:\", resultado);\n            if (resultado) {\n              this.$buefy.toast.open({\n                message: 'Reposición solicitada correctamente al proveedor',\n                type: 'is-success'\n              });\n              this.obtenerProductosAbollados();\n              this.cargarEstadisticasPerdidas(); // ACTUALIZAR ESTADÍSTICAS\n              this.isDetallesModalActive = false;\n            } else {\n              this.$buefy.toast.open({\n                message: 'Error al solicitar la reposición',\n                type: 'is-danger'\n              });\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al solicitar reposición:', error);\n            this.$buefy.toast.open({\n              message: 'Error al solicitar la reposición: ' + (error.message || 'Error desconocido'),\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    aprobarReposicion(producto) {\n      // Verificar si el usuario es administrador\n      if (!this.isAdmin) {\n        this.$buefy.toast.open({\n          message: 'No tienes permisos para realizar esta acción',\n          type: 'is-danger'\n        });\n        return;\n      }\n      this.$buefy.dialog.prompt({\n        title: 'Aprobar reposición',\n        message: `¿Cuántas unidades de ${producto.product.name} apruebas para reposición? (Máximo: ${producto.quantity})`,\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Cantidad a aprobar',\n          min: 1,\n          max: producto.quantity,\n          value: producto.quantity\n        },\n        confirmText: 'Aprobar',\n        cancelText: 'Cancelar',\n        type: 'is-info',\n        hasIcon: true,\n        onConfirm: cantidad => {\n          if (cantidad > producto.quantity) {\n            this.$buefy.toast.open({\n              message: `No puedes aprobar más de ${producto.quantity} unidades`,\n              type: 'is-danger'\n            });\n            return;\n          }\n          this.cargando = true;\n          console.log(`Aprobando reposición para el producto dañado ID: ${producto.id}, cantidad: ${cantidad}`);\n          apiRequest({\n            method: 'PATCH',\n            path: `damaged-products/${producto.id}/approve-replacement`,\n            data: {\n              approvedQuantity: Number(cantidad)\n            }\n          }).then(resultado => {\n            this.cargando = false;\n            console.log(\"Resultado de la aprobación de reposición:\", resultado);\n            if (resultado) {\n              this.$buefy.toast.open({\n                message: `Reposición de ${cantidad} unidades aprobada correctamente`,\n                type: 'is-success'\n              });\n              this.obtenerProductosAbollados();\n              this.cargarEstadisticasPerdidas(); // ACTUALIZAR ESTADÍSTICAS\n              this.isDetallesModalActive = false;\n            } else {\n              this.$buefy.toast.open({\n                message: 'Error al aprobar la reposición',\n                type: 'is-danger'\n              });\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al aprobar reposición:', error);\n            this.$buefy.toast.open({\n              message: 'Error al aprobar la reposición: ' + (error.message || 'Error desconocido'),\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    procesarReposicion(producto) {\n      // Verificar si el usuario es administrador\n      if (!this.isAdmin) {\n        this.$buefy.toast.open({\n          message: 'No tienes permisos para realizar esta acción',\n          type: 'is-danger'\n        });\n        return;\n      }\n      this.$buefy.dialog.prompt({\n        title: 'Procesar reposición recibida',\n        message: `¿Cuántas unidades de ${producto.product.name} has recibido como reposición?`,\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Cantidad recibida',\n          min: 1,\n          value: producto.quantity\n        },\n        confirmText: 'Procesar',\n        cancelText: 'Cancelar',\n        type: 'is-success',\n        hasIcon: true,\n        onConfirm: cantidad => {\n          this.cargando = true;\n          console.log(`Procesando reposición para el producto dañado ID: ${producto.id}, cantidad recibida: ${cantidad}`);\n          apiRequest({\n            method: 'PATCH',\n            path: `damaged-products/${producto.id}/process-replacement`,\n            data: {\n              actualReplacedQuantity: Number(cantidad)\n            }\n          }).then(resultado => {\n            this.cargando = false;\n            console.log(\"Resultado del procesamiento de reposición:\", resultado);\n            if (resultado) {\n              this.$buefy.toast.open({\n                message: `Reposición de ${cantidad} unidades procesada correctamente`,\n                type: 'is-success'\n              });\n              this.obtenerProductosAbollados();\n              this.cargarEstadisticasPerdidas(); // ACTUALIZAR ESTADÍSTICAS\n              this.isDetallesModalActive = false;\n            } else {\n              this.$buefy.toast.open({\n                message: 'Error al procesar la reposición',\n                type: 'is-danger'\n              });\n            }\n          }).catch(error => {\n            this.cargando = false;\n            console.error('Error al procesar reposición:', error);\n            let errorMessage = 'Error al procesar la reposición';\n\n            // Manejar códigos de error específicos\n            if (error.status === 400) {\n              errorMessage = 'La cantidad recibida es mayor que la cantidad aprobada';\n            } else if (error.status === 404) {\n              errorMessage = 'Producto dañado no encontrado';\n            } else if (error.status === 409) {\n              errorMessage = 'La reposición no ha sido aprobada previamente';\n            }\n            this.$buefy.toast.open({\n              message: errorMessage,\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    restaurarProducto(producto) {\n      // Verificar si el usuario es administrador\n      if (!this.isAdmin) {\n        this.$buefy.toast.open({\n          message: 'No tienes permisos para realizar esta acción',\n          type: 'is-danger'\n        });\n        return;\n      }\n      this.$buefy.dialog.prompt({\n        title: 'Restaurar producto',\n        message: `¿Cuántas unidades de ${producto.product.name} deseas restaurar al inventario? (Máximo: ${producto.quantity})`,\n        inputAttrs: {\n          type: 'number',\n          placeholder: 'Cantidad a restaurar',\n          min: 1,\n          max: producto.quantity,\n          value: producto.quantity\n        },\n        confirmText: 'Restaurar',\n        cancelText: 'Cancelar',\n        type: 'is-success',\n        hasIcon: true,\n        onConfirm: cantidad => {\n          if (cantidad > producto.quantity) {\n            this.$buefy.toast.open({\n              message: `No puedes restaurar más de ${producto.quantity} unidades`,\n              type: 'is-danger'\n            });\n            return;\n          }\n          this.cargando = true;\n          apiRequest({\n            method: 'PATCH',\n            path: `damaged-products/${producto.id}/restore`,\n            data: {\n              quantity: Number(cantidad)\n            }\n          }).then(resultado => {\n            this.cargando = false;\n            if (resultado) {\n              this.$buefy.toast.open({\n                message: `${cantidad} unidades restauradas al inventario correctamente`,\n                type: 'is-success'\n              });\n              this.obtenerProductosAbollados();\n              this.cargarEstadisticasPerdidas(); // ACTUALIZAR ESTADÍSTICAS\n              this.isDetallesModalActive = false;\n              this.$emit('producto-restaurado');\n            } else {\n              this.$buefy.toast.open({\n                message: 'Error al restaurar el producto',\n                type: 'is-danger'\n              });\n            }\n          }).catch(error => {\n            this.cargando = false;\n            this.$buefy.toast.open({\n              message: 'Error al restaurar el producto: ' + (error.message || 'Error desconocido'),\n              type: 'is-danger'\n            });\n          });\n        }\n      });\n    },\n    // MÉTODOS PARA ESTADÍSTICAS DE PÉRDIDAS\n    cargarEstadisticasPerdidas() {\n      this.cargando = true;\n\n      // Construir la ruta con el filtro de proveedor si existe\n      let path = 'damaged-products/statistics';\n      if (this.filtroProveedor) {\n        path += `?providerId=${this.filtroProveedor}`;\n      }\n      console.log(\"Cargando estadísticas de pérdidas...\");\n      apiRequest({\n        method: \"GET\",\n        path: path\n      }).then(respuesta => {\n        console.log(\"Respuesta de estadísticas:\", respuesta);\n        if (respuesta && respuesta.data) {\n          this.estadisticasPerdidas = respuesta.data;\n\n          // Calcular pérdida neta para cada marca si no viene en la respuesta\n          if (this.estadisticasPerdidas.byBrand && this.estadisticasPerdidas.byBrand.length > 0) {\n            this.estadisticasPerdidas.byBrand.forEach(marca => {\n              if (!marca.netLoss) {\n                marca.netLoss = (parseFloat(marca.totalLoss) - parseFloat(marca.replacedLoss)).toFixed(2);\n              }\n            });\n          }\n\n          // Actualizar las cartas de estadísticas con formato de miles\n          this.cartasEstadisticasPerdidas = [{\n            nombre: \"Pérdida Total\",\n            total: `$ ${parseFloat(this.estadisticasPerdidas.totalLoss).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"alert-circle\",\n            clase: \"has-text-danger\"\n          }, {\n            nombre: \"Pérdida Reemplazada\",\n            total: `$ ${parseFloat(this.estadisticasPerdidas.replacedLoss).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"refresh\",\n            clase: \"has-text-info\"\n          }, {\n            nombre: \"Pérdida Neta\",\n            total: `$ ${parseFloat(this.estadisticasPerdidas.netLoss).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"calculator\",\n            clase: \"has-text-warning\"\n          }];\n        } else {\n          // Si no hay datos, inicializar con valores por defecto\n          this.estadisticasPerdidas = {\n            totalLoss: 0,\n            replacedLoss: 0,\n            netLoss: 0,\n            byBrand: []\n          };\n          this.cartasEstadisticasPerdidas = [{\n            nombre: \"Pérdida Total\",\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"alert-circle\",\n            clase: \"has-text-danger\"\n          }, {\n            nombre: \"Pérdida Reemplazada\",\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"refresh\",\n            clase: \"has-text-info\"\n          }, {\n            nombre: \"Pérdida Neta\",\n            clase: \"has-text-info\"\n          }, {\n            nombre: \"Pérdida Neta\",\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}`,\n            icono: \"calculator\",\n            clase: \"has-text-warning\"\n          }];\n        }\n        this.cargando = false;\n      }).catch(error => {\n        console.error(\"Error al obtener estadísticas de pérdidas:\", error);\n        this.cargando = false;\n        this.estadisticasPerdidas = {\n          totalLoss: 0,\n          replacedLoss: 0,\n          netLoss: 0,\n          byBrand: []\n        };\n        this.cartasEstadisticasPerdidas = [{\n          nombre: \"Pérdida Total\",\n          total: `$ ${parseFloat(0).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })}`,\n          icono: \"alert-circle\",\n          clase: \"has-text-danger\"\n        }, {\n          nombre: \"Pérdida Reemplazada\",\n          total: `$ ${parseFloat(0).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })}`,\n          icono: \"refresh\",\n          clase: \"has-text-info\"\n        }, {\n          nombre: \"Pérdida Neta\",\n          total: `$ ${parseFloat(0).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })}`,\n          icono: \"calculator\",\n          clase: \"has-text-warning\"\n        }];\n        this.$buefy.toast.open({\n          message: 'Error al cargar las estadísticas de pérdidas',\n          type: 'is-danger'\n        });\n      });\n    },\n    // MÉTODO PARA CARGAR PROVEEDORES\n    cargarProveedores() {\n      apiRequest({\n        method: 'GET',\n        path: 'providers'\n      }).then(respuesta => {\n        console.log(\"Respuesta de proveedores:\", respuesta);\n        if (respuesta && respuesta.data) {\n          this.proveedores = respuesta.data;\n        } else if (Array.isArray(respuesta)) {\n          this.proveedores = respuesta;\n        } else {\n          this.proveedores = [];\n          console.error(\"Formato de respuesta de proveedores inesperado:\", respuesta);\n        }\n      }).catch(error => {\n        console.error(\"Error al cargar proveedores:\", error);\n        this.$buefy.toast.open({\n          message: 'Error al cargar la lista de proveedores',\n          type: 'is-danger'\n        });\n        this.proveedores = [];\n      });\n    },\n    // Método para filtrar por nombre de proveedor\n    filtrarPorNombreProveedor() {\n      // Si el campo está vacío, limpiar el filtro\n      if (!this.nombreProveedor.trim()) {\n        this.limpiarFiltro();\n        return;\n      }\n\n      // Buscar el proveedor por nombre\n      const proveedorEncontrado = this.proveedores.find(proveedor => proveedor.name.toLowerCase().includes(this.nombreProveedor.toLowerCase()));\n      if (proveedorEncontrado) {\n        this.filtroProveedor = proveedorEncontrado.id;\n        this.cargarEstadisticasPerdidas();\n      } else {\n        this.$buefy.toast.open({\n          message: 'No se encontró ningún proveedor con ese nombre',\n          type: 'is-warning'\n        });\n      }\n    },\n    // Método para limpiar el filtro de proveedor\n    limpiarFiltro() {\n      this.filtroProveedor = null;\n      this.nombreProveedor = '';\n      this.cargarEstadisticasPerdidas();\n    }\n  }\n};","map":{"version":3,"names":["MensajeInicial","CartasTotales","apiRequest","AyudanteSesion","name","components","data","productosAbollados","cargando","isPaginationSimple","isPaginationRounded","paginationPosition","sortIcon","sortIconSize","currentPage","perPage","totalProductosAbollados","totalPages","isAdmin","isDetallesModalActive","productoSeleccionado","estadisticasPerdidas","cartasEstadisticasPerdidas","filtroProveedor","nombreProveedor","columnasPorMarca","field","label","sortable","numeric","formatter","value","parseFloat","toFixed","netLoss","proveedores","mounted","obtenerProductosAbollados","verificarPermisos","cargarEstadisticasPerdidas","cargarProveedores","methods","datosUsuario","obtenerDatosSesion","rol","console","log","method","path","then","respuesta","length","Math","ceil","catch","error","$buefy","toast","open","message","type","formatDate","dateString","date","Date","toLocaleDateString","day","month","year","hour","minute","truncateText","text","maxLength","substring","getReplacementStatus","producto","replaced","replacementRequested","replacementApproved","getReplacementTagType","verDetalles","solicitarReemplazo","dialog","confirm","title","quantity","product","brand","provider","confirmText","cancelText","hasIcon","onConfirm","id","resultado","aprobarReposicion","prompt","inputAttrs","placeholder","min","max","cantidad","approvedQuantity","Number","procesarReposicion","actualReplacedQuantity","errorMessage","status","restaurarProducto","$emit","byBrand","forEach","marca","totalLoss","replacedLoss","nombre","total","toLocaleString","minimumFractionDigits","maximumFractionDigits","icono","clase","Array","isArray","filtrarPorNombreProveedor","trim","limpiarFiltro","proveedorEncontrado","find","proveedor","toLowerCase","includes"],"sources":["src/components/Inventario/Productos-Abollados.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Estadísticas de pérdidas -->\r\n    <div class=\"box mb-4\" v-if=\"productosAbollados && productosAbollados.length > 0\">\r\n      <h3 class=\"title is-5 mb-3\">Estadísticas de Pérdidas</h3>\r\n      <div class=\"is-flex\" style=\"gap: 10.5rem; flex-wrap: wrap;\">\r\n        <cartas-totales :totales=\"cartasEstadisticasPerdidas\" class=\"mb-4\" />\r\n      </div>\r\n      \r\n      <!-- Pérdidas por marca -->\r\n      <div v-if=\"estadisticasPerdidas && estadisticasPerdidas.byBrand && estadisticasPerdidas.byBrand.length > 0\">\r\n        <h4 class=\"subtitle is-6 mt-4 mb-2\">Pérdidas por Marca</h4>\r\n        <b-table \r\n          :data=\"estadisticasPerdidas.byBrand\"\r\n          :columns=\"columnasPorMarca\"\r\n          :striped=\"true\"\r\n          :narrowed=\"true\"\r\n          :hoverable=\"true\">\r\n        </b-table>\r\n      </div>\r\n      \r\n      <!-- Filtro por nombre de proveedor -->\r\n      <div class=\"field mt-4\">\r\n        <label class=\"label\">Filtrar por Proveedor</label>\r\n        <div class=\"control\">\r\n          <div class=\"is-flex\">\r\n            <b-input v-model=\"nombreProveedor\" placeholder=\"Nombre del proveedor\" expanded class=\"mr-2\"></b-input>\r\n            <b-button @click=\"filtrarPorNombreProveedor\" type=\"is-primary\">Filtrar</b-button>\r\n            <b-button @click=\"limpiarFiltro\" type=\"is-light\" class=\"ml-2\" v-if=\"filtroProveedor\">Limpiar</b-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <mensaje-inicial \r\n      :titulo=\"'No se han encontrado productos abollados'\" \r\n      :subtitulo=\"'Los productos marcados como abollados aparecerán aquí'\" \r\n      v-if=\"productosAbollados.length < 1\" \r\n    />\r\n\r\n    <div v-if=\"productosAbollados.length > 0\">\r\n      <div class=\"box\">\r\n        <b-table \r\n          :data=\"productosAbollados\" \r\n          :per-page=\"perPage\"\r\n          :current-page.sync=\"currentPage\" \r\n          :pagination-simple=\"isPaginationSimple\"\r\n          :pagination-position=\"paginationPosition\" \r\n          :pagination-rounded=\"isPaginationRounded\"\r\n          :sort-icon=\"sortIcon\" \r\n          :sort-icon-size=\"sortIconSize\"\r\n          default-sort=\"dateReported\" \r\n          default-sort-direction=\"desc\"\r\n          aria-next-label=\"Next page\" \r\n          aria-previous-label=\"Previous page\"\r\n          aria-page-label=\"Page\" \r\n          aria-current-label=\"Current page\"\r\n        >\r\n          <b-table-column field=\"id\" label=\"ID\" sortable v-slot=\"props\">\r\n            {{ props.row.id }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"product.code\" label=\"Código\" sortable searchable v-slot=\"props\">\r\n            {{ props.row.product.code }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"product.name\" label=\"Producto\" sortable searchable v-slot=\"props\">\r\n            {{ props.row.product.name }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"brand.brandName\" label=\"Marca\" sortable searchable v-slot=\"props\">\r\n            {{ props.row.brand.brandName }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"quantity\" label=\"Cantidad\" sortable v-slot=\"props\">\r\n            {{ props.row.quantity }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"dateReported\" label=\"Fecha reporte\" sortable v-slot=\"props\">\r\n            {{ formatDate(props.row.dateReported) }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"notes\" label=\"Notas\" v-slot=\"props\">\r\n            <b-tooltip :label=\"props.row.notes\" position=\"is-top\" multilined>\r\n              <span>{{ truncateText(props.row.notes, 20) }}</span>\r\n            </b-tooltip>\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"replaced\" label=\"Estado\" v-slot=\"props\">\r\n            <b-tag type=\"is-danger\" v-if=\"!props.row.replaced\">Pendiente</b-tag>\r\n            <b-tag type=\"is-success\" v-else>Reemplazado</b-tag>\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"replacementRequested\" label=\"Reposición\" v-slot=\"props\">\r\n            <b-tag \r\n              :type=\"getReplacementTagType(props.row)\"\r\n            >\r\n              {{ getReplacementStatus(props.row) }}\r\n            </b-tag>\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"acciones\" label=\"Acciones\" centered v-slot=\"props\">\r\n            <div class=\"buttons is-centered\">\r\n              <b-tooltip label=\"Ver detalles\" position=\"is-top\">\r\n                <b-button class=\"btn-primary\" @click=\"verDetalles(props.row)\">\r\n                  <b-icon icon=\"eye\" />\r\n                </b-button>\r\n              </b-tooltip>\r\n              \r\n              <!-- Botón para solicitar reposición (primer paso) -->\r\n              <b-tooltip label=\"Solicitar reposición\" position=\"is-top\" v-if=\"!props.row.replacementRequested && !props.row.replaced && isAdmin\">\r\n                <b-button class=\"btn-warning\" @click=\"solicitarReemplazo(props.row)\">\r\n                  <b-icon icon=\"refresh\" />\r\n                </b-button>\r\n              </b-tooltip>\r\n              \r\n              <!-- Botón para aprobar reposición (segundo paso) -->\r\n              <b-tooltip label=\"Aprobar reposición\" position=\"is-top\" v-if=\"props.row.replacementRequested && !props.row.replacementApproved && !props.row.replaced && isAdmin\">\r\n                <b-button class=\"btn-info\" @click=\"aprobarReposicion(props.row)\">\r\n                  <b-icon icon=\"check\" />\r\n                </b-button>\r\n              </b-tooltip>\r\n              \r\n              <!-- Botón para procesar reposición (tercer paso) -->\r\n              <b-tooltip label=\"Procesar reposición\" position=\"is-top\" v-if=\"props.row.replacementApproved && !props.row.replaced && isAdmin\">\r\n                <b-button class=\"btn-success\" @click=\"procesarReposicion(props.row)\">\r\n                  <b-icon icon=\"package-variant-closed\" />\r\n                </b-button>\r\n              </b-tooltip>\r\n            </div>\r\n          </b-table-column>\r\n        </b-table>\r\n        \r\n        <b-pagination\r\n          v-if=\"totalPages > 1\"\r\n          :total=\"totalProductosAbollados\"\r\n          :current.sync=\"currentPage\"\r\n          :per-page=\"perPage\"\r\n          :rounded=\"isPaginationRounded\"\r\n          :simple=\"isPaginationSimple\"\r\n          :position=\"paginationPosition\"\r\n          @change=\"obtenerProductosAbollados\"\r\n        ></b-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de detalles -->\r\n    <b-modal :active.sync=\"isDetallesModalActive\" has-modal-card>\r\n      <div class=\"modal-card\" style=\"width: auto\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">Detalles del producto abollado</p>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <div v-if=\"productoSeleccionado\">\r\n            <div class=\"columns\">\r\n              <div class=\"column\">\r\n                <h4 class=\"subtitle is-5\">Información del producto</h4>\r\n                <div class=\"content\">\r\n                  <p><strong>Nombre:</strong> {{ productoSeleccionado.product.name }}</p>\r\n                  <p><strong>Código:</strong> {{ productoSeleccionado.product.code }}</p>\r\n                  <p><strong>Marca:</strong> {{ productoSeleccionado.brand.brandName }}</p>\r\n                  <p><strong>Proveedor:</strong> {{ productoSeleccionado.brand.provider.name }}</p>\r\n                  <p><strong>Precio de compra:</strong> ${{ productoSeleccionado.product.purchasePrice }}</p>\r\n                  <p><strong>Precio de venta:</strong> ${{ productoSeleccionado.product.salePrice }}</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"column\">\r\n                <h4 class=\"subtitle is-5\">Información del daño</h4>\r\n                <div class=\"content\">\r\n                  <p><strong>Cantidad:</strong> {{ productoSeleccionado.quantity }}</p>\r\n                  <p><strong>Fecha de reporte:</strong> {{ formatDate(productoSeleccionado.dateReported) }}</p>\r\n                  <p><strong>Notas:</strong> {{ productoSeleccionado.notes }}</p>\r\n                  <p><strong>Estado:</strong> \r\n                    <b-tag type=\"is-danger\" v-if=\"!productoSeleccionado.replaced\">Pendiente</b-tag>\r\n                    <b-tag type=\"is-success\" v-else>Reemplazado</b-tag>\r\n                  </p>\r\n                  <p><strong>Reposición:</strong> \r\n                    <b-tag :type=\"getReplacementTagType(productoSeleccionado)\">\r\n                      {{ getReplacementStatus(productoSeleccionado) }}\r\n                    </b-tag>\r\n                  </p>\r\n                  <p v-if=\"productoSeleccionado.replaced\">\r\n                    <strong>Cantidad reemplazada:</strong> {{ productoSeleccionado.replacedQuantity }}\r\n                  </p>\r\n                  <p v-if=\"productoSeleccionado.replaced\">\r\n                    <strong>Fecha de reemplazo:</strong> {{ formatDate(productoSeleccionado.dateReplaced) }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <button class=\"button\" @click=\"isDetallesModalActive = false\">Cerrar</button>\r\n          \r\n          <!-- Solo mantener el botón de procesar reposición -->\r\n          <button \r\n            class=\"button is-success\" \r\n            v-if=\"productoSeleccionado && productoSeleccionado.replacementApproved && !productoSeleccionado.replaced && isAdmin\"\r\n            @click=\"procesarReposicion(productoSeleccionado)\"\r\n          >\r\n            Procesar reposición\r\n          </button>\r\n        </footer>\r\n      </div>\r\n    </b-modal>\r\n\r\n    <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MensajeInicial from '../Extras/MensajeInicial'\r\nimport CartasTotales from '../Extras/CartasTotales'\r\nimport apiRequest from '../../Servicios/HttpService'\r\nimport AyudanteSesion from '../../Servicios/AyudanteSesion'\r\n\r\nexport default {\r\n  name: 'ProductosAbollados',\r\n  components: {\r\n    MensajeInicial,\r\n    CartasTotales\r\n  },\r\n  \r\n  data: () => ({\r\n    productosAbollados: [],\r\n    cargando: false,\r\n    isPaginationSimple: false,\r\n    isPaginationRounded: true,\r\n    paginationPosition: 'bottom',\r\n    sortIcon: 'arrow-up',\r\n    sortIconSize: 'is-medium',\r\n    currentPage: 1,\r\n    perPage: 10,\r\n    totalProductosAbollados: 0,\r\n    totalPages: 1,\r\n    isAdmin: false,\r\n    isDetallesModalActive: false,\r\n    productoSeleccionado: null,\r\n    \r\n    // PROPIEDADES PARA ESTADÍSTICAS\r\n    estadisticasPerdidas: null,\r\n    cartasEstadisticasPerdidas: [],\r\n    filtroProveedor: null,\r\n    nombreProveedor: '',\r\n    columnasPorMarca: [\r\n      {\r\n        field: 'brandName',\r\n        label: 'Marca',\r\n        sortable: true\r\n      },\r\n      {\r\n        field: 'totalLoss',\r\n        label: 'Pérdida Total ($)',\r\n        numeric: true,\r\n        sortable: true,\r\n        formatter: value => `$${parseFloat(value).toFixed(2)}`\r\n      },\r\n      {\r\n        field: 'replacedLoss',\r\n        label: 'Pérdida Reemplazada ($)',\r\n        numeric: true,\r\n        sortable: true,\r\n        formatter: value => `$${parseFloat(value).toFixed(2)}`\r\n      },\r\n      {\r\n        field: 'netLoss',\r\n        label: 'Pérdida Neta ($)',\r\n        numeric: true,\r\n        sortable: true,\r\n        formatter: value => {\r\n          const netLoss = parseFloat(value) || 0;\r\n          return `$${netLoss.toFixed(2)}`;\r\n        }\r\n      }\r\n    ],\r\n    // PROPIEDAD PARA PROVEEDORES\r\n    proveedores: [],\r\n  }),\r\n  \r\n  mounted() {\r\n    this.obtenerProductosAbollados()\r\n    this.verificarPermisos()\r\n    this.cargarEstadisticasPerdidas()\r\n    this.cargarProveedores()\r\n  },\r\n  \r\n  methods: {\r\n    verificarPermisos() {\r\n      // Usar AyudanteSesion para verificar si el usuario es administrador\r\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion()\r\n      this.isAdmin = datosUsuario.rol === 'Admin'\r\n      console.log(\"Rol del usuario:\", datosUsuario.rol)\r\n      console.log(\"Es administrador:\", this.isAdmin)\r\n    },\r\n    \r\n    obtenerProductosAbollados() {\r\n      this.cargando = true\r\n      \r\n      console.log(\"Obteniendo productos abollados...\")\r\n      \r\n      apiRequest({\r\n        method: 'GET',\r\n        path: 'damaged-products'\r\n      })\r\n      .then(respuesta => {\r\n        console.log(\"Respuesta de damaged-products:\", respuesta)\r\n        \r\n        // Verificar si la respuesta tiene una estructura diferente\r\n        if (respuesta && respuesta.data) {\r\n          this.productosAbollados = respuesta.data\r\n        } else {\r\n          this.productosAbollados = respuesta || []\r\n        }\r\n        \r\n        this.totalProductosAbollados = this.productosAbollados.length\r\n        this.totalPages = Math.ceil(this.totalProductosAbollados / this.perPage)\r\n        this.cargando = false\r\n        \r\n        console.log(\"Productos abollados procesados:\", this.productosAbollados)\r\n        console.log(\"Total productos abollados:\", this.totalProductosAbollados)\r\n      })\r\n      .catch(error => {\r\n        console.error('Error al obtener productos abollados:', error)\r\n        this.$buefy.toast.open({\r\n          message: 'Error al cargar los productos abollados: ' + (error.message || 'Error desconocido'),\r\n          type: 'is-danger'\r\n        })\r\n        this.cargando = false\r\n      })\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A'\r\n      const date = new Date(dateString)\r\n      return date.toLocaleDateString('es-ES', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    },\r\n    \r\n    truncateText(text, maxLength) {\r\n      if (!text) return ''\r\n      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text\r\n    },\r\n    \r\n    getReplacementStatus(producto) {\r\n      if (producto.replaced) {\r\n        return 'Reemplazado'\r\n      } else if (producto.replacementRequested) {\r\n        return producto.replacementApproved ? 'Aprobado' : 'Pendiente de aprobación'\r\n      }\r\n      return 'No solicitado'\r\n    },\r\n    \r\n    getReplacementTagType(producto) {\r\n      if (producto.replaced) {\r\n        return 'is-success'\r\n      } else if (producto.replacementRequested) {\r\n        return producto.replacementApproved ? 'is-info' : 'is-warning'\r\n      }\r\n      return 'is-light'\r\n    },\r\n    \r\n    verDetalles(producto) {\r\n      this.productoSeleccionado = producto\r\n      this.isDetallesModalActive = true\r\n    },\r\n    \r\n    solicitarReemplazo(producto) {\r\n      // Verificar si el usuario es administrador\r\n      if (!this.isAdmin) {\r\n        this.$buefy.toast.open({\r\n          message: 'No tienes permisos para realizar esta acción',\r\n          type: 'is-danger'\r\n        })\r\n        return\r\n      }\r\n      \r\n      this.$buefy.dialog.confirm({\r\n        title: 'Solicitar reposición',\r\n        message: `¿Deseas solicitar la reposición de ${producto.quantity} unidades de ${producto.product.name} al proveedor ${producto.brand.provider.name}?`,\r\n        confirmText: 'Sí, solicitar',\r\n        cancelText: 'Cancelar',\r\n        type: 'is-warning',\r\n        hasIcon: true,\r\n        onConfirm: () => {\r\n          this.cargando = true\r\n          \r\n          console.log(`Solicitando reposición para el producto dañado ID: ${producto.id}`)\r\n          \r\n          apiRequest({\r\n            method: 'PATCH',\r\n            path: `damaged-products/${producto.id}/request-replacement`\r\n          })\r\n          .then(resultado => {\r\n            this.cargando = false\r\n            console.log(\"Resultado de la solicitud de reposición:\", resultado)\r\n            \r\n            if (resultado) {\r\n              this.$buefy.toast.open({\r\n                message: 'Reposición solicitada correctamente al proveedor',\r\n                type: 'is-success'\r\n              })\r\n              this.obtenerProductosAbollados()\r\n              this.cargarEstadisticasPerdidas() // ACTUALIZAR ESTADÍSTICAS\r\n              this.isDetallesModalActive = false\r\n            } else {\r\n              this.$buefy.toast.open({\r\n                message: 'Error al solicitar la reposición',\r\n                type: 'is-danger'\r\n              })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.cargando = false\r\n            console.error('Error al solicitar reposición:', error)\r\n            this.$buefy.toast.open({\r\n              message: 'Error al solicitar la reposición: ' + (error.message || 'Error desconocido'),\r\n              type: 'is-danger'\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    \r\n    aprobarReposicion(producto) {\r\n      // Verificar si el usuario es administrador\r\n      if (!this.isAdmin) {\r\n        this.$buefy.toast.open({\r\n          message: 'No tienes permisos para realizar esta acción',\r\n          type: 'is-danger'\r\n        })\r\n        return\r\n      }\r\n      \r\n      this.$buefy.dialog.prompt({\r\n        title: 'Aprobar reposición',\r\n        message: `¿Cuántas unidades de ${producto.product.name} apruebas para reposición? (Máximo: ${producto.quantity})`,\r\n        inputAttrs: {\r\n          type: 'number',\r\n          placeholder: 'Cantidad a aprobar',\r\n          min: 1,\r\n          max: producto.quantity,\r\n          value: producto.quantity\r\n        },\r\n        confirmText: 'Aprobar',\r\n        cancelText: 'Cancelar',\r\n        type: 'is-info',\r\n        hasIcon: true,\r\n        onConfirm: (cantidad) => {\r\n          if (cantidad > producto.quantity) {\r\n            this.$buefy.toast.open({\r\n              message: `No puedes aprobar más de ${producto.quantity} unidades`,\r\n              type: 'is-danger'\r\n            })\r\n            return\r\n          }\r\n          \r\n          this.cargando = true\r\n          \r\n          console.log(`Aprobando reposición para el producto dañado ID: ${producto.id}, cantidad: ${cantidad}`)\r\n          \r\n          apiRequest({\r\n            method: 'PATCH',\r\n            path: `damaged-products/${producto.id}/approve-replacement`,\r\n            data: {\r\n              approvedQuantity: Number(cantidad)\r\n            }\r\n          })\r\n          .then(resultado => {\r\n            this.cargando = false\r\n            console.log(\"Resultado de la aprobación de reposición:\", resultado)\r\n            \r\n            if (resultado) {\r\n              this.$buefy.toast.open({\r\n                message: `Reposición de ${cantidad} unidades aprobada correctamente`,\r\n                type: 'is-success'\r\n              })\r\n              this.obtenerProductosAbollados()\r\n              this.cargarEstadisticasPerdidas() // ACTUALIZAR ESTADÍSTICAS\r\n              this.isDetallesModalActive = false\r\n            } else {\r\n              this.$buefy.toast.open({\r\n                message: 'Error al aprobar la reposición',\r\n                type: 'is-danger'\r\n              })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.cargando = false\r\n            console.error('Error al aprobar reposición:', error)\r\n            this.$buefy.toast.open({\r\n              message: 'Error al aprobar la reposición: ' + (error.message || 'Error desconocido'),\r\n              type: 'is-danger'\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    \r\n    procesarReposicion(producto) {\r\n      // Verificar si el usuario es administrador\r\n      if (!this.isAdmin) {\r\n        this.$buefy.toast.open({\r\n          message: 'No tienes permisos para realizar esta acción',\r\n          type: 'is-danger'\r\n        })\r\n        return\r\n      }\r\n      \r\n      this.$buefy.dialog.prompt({\r\n        title: 'Procesar reposición recibida',\r\n        message: `¿Cuántas unidades de ${producto.product.name} has recibido como reposición?`,\r\n        inputAttrs: {\r\n          type: 'number',\r\n          placeholder: 'Cantidad recibida',\r\n          min: 1,\r\n          value: producto.quantity\r\n        },\r\n        confirmText: 'Procesar',\r\n        cancelText: 'Cancelar',\r\n        type: 'is-success',\r\n        hasIcon: true,\r\n        onConfirm: (cantidad) => {\r\n          this.cargando = true\r\n          \r\n          console.log(`Procesando reposición para el producto dañado ID: ${producto.id}, cantidad recibida: ${cantidad}`)\r\n          \r\n          apiRequest({\r\n            method: 'PATCH',\r\n            path: `damaged-products/${producto.id}/process-replacement`,\r\n            data: {\r\n              actualReplacedQuantity: Number(cantidad)\r\n            }\r\n          })\r\n          .then(resultado => {\r\n            this.cargando = false\r\n            console.log(\"Resultado del procesamiento de reposición:\", resultado)\r\n            \r\n            if (resultado) {\r\n              this.$buefy.toast.open({\r\n                message: `Reposición de ${cantidad} unidades procesada correctamente`,\r\n                type: 'is-success'\r\n              })\r\n              this.obtenerProductosAbollados()\r\n              this.cargarEstadisticasPerdidas() // ACTUALIZAR ESTADÍSTICAS\r\n              this.isDetallesModalActive = false\r\n            } else {\r\n              this.$buefy.toast.open({\r\n                message: 'Error al procesar la reposición',\r\n                type: 'is-danger'\r\n              })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.cargando = false\r\n            console.error('Error al procesar reposición:', error)\r\n            \r\n            let errorMessage = 'Error al procesar la reposición';\r\n            \r\n            // Manejar códigos de error específicos\r\n            if (error.status === 400) {\r\n              errorMessage = 'La cantidad recibida es mayor que la cantidad aprobada';\r\n            } else if (error.status === 404) {\r\n              errorMessage = 'Producto dañado no encontrado';\r\n            } else if (error.status === 409) {\r\n              errorMessage = 'La reposición no ha sido aprobada previamente';\r\n            }\r\n            \r\n            this.$buefy.toast.open({\r\n              message: errorMessage,\r\n              type: 'is-danger'\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    \r\n    restaurarProducto(producto) {\r\n      // Verificar si el usuario es administrador\r\n      if (!this.isAdmin) {\r\n        this.$buefy.toast.open({\r\n          message: 'No tienes permisos para realizar esta acción',\r\n          type: 'is-danger'\r\n        })\r\n        return\r\n      }\r\n      \r\n      this.$buefy.dialog.prompt({\r\n        title: 'Restaurar producto',\r\n        message: `¿Cuántas unidades de ${producto.product.name} deseas restaurar al inventario? (Máximo: ${producto.quantity})`,\r\n        inputAttrs: {\r\n          type: 'number',\r\n          placeholder: 'Cantidad a restaurar',\r\n          min: 1,\r\n          max: producto.quantity,\r\n          value: producto.quantity\r\n        },\r\n        confirmText: 'Restaurar',\r\n        cancelText: 'Cancelar',\r\n        type: 'is-success',\r\n        hasIcon: true,\r\n        onConfirm: (cantidad) => {\r\n          if (cantidad > producto.quantity) {\r\n            this.$buefy.toast.open({\r\n              message: `No puedes restaurar más de ${producto.quantity} unidades`,\r\n              type: 'is-danger'\r\n            })\r\n            return\r\n          }\r\n          \r\n          this.cargando = true\r\n          \r\n          apiRequest({\r\n            method: 'PATCH',\r\n            path: `damaged-products/${producto.id}/restore`,\r\n            data: {\r\n              quantity: Number(cantidad)\r\n            }\r\n          })\r\n          .then(resultado => {\r\n            this.cargando = false\r\n            if (resultado) {\r\n              this.$buefy.toast.open({\r\n                message: `${cantidad} unidades restauradas al inventario correctamente`,\r\n                type: 'is-success'\r\n              })\r\n              this.obtenerProductosAbollados()\r\n              this.cargarEstadisticasPerdidas() // ACTUALIZAR ESTADÍSTICAS\r\n              this.isDetallesModalActive = false\r\n              this.$emit('producto-restaurado')\r\n            } else {\r\n              this.$buefy.toast.open({\r\n                message: 'Error al restaurar el producto',\r\n                type: 'is-danger'\r\n              })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.cargando = false\r\n            this.$buefy.toast.open({\r\n              message: 'Error al restaurar el producto: ' + (error.message || 'Error desconocido'),\r\n              type: 'is-danger'\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    \r\n    // MÉTODOS PARA ESTADÍSTICAS DE PÉRDIDAS\r\n    cargarEstadisticasPerdidas() {\r\n      this.cargando = true;\r\n      \r\n      // Construir la ruta con el filtro de proveedor si existe\r\n      let path = 'damaged-products/statistics';\r\n      if (this.filtroProveedor) {\r\n        path += `?providerId=${this.filtroProveedor}`;\r\n      }\r\n      \r\n      console.log(\"Cargando estadísticas de pérdidas...\");\r\n      \r\n      apiRequest({\r\n        method: \"GET\",\r\n        path: path\r\n      })\r\n      .then(respuesta => {\r\n        console.log(\"Respuesta de estadísticas:\", respuesta);\r\n        \r\n        if (respuesta && respuesta.data) {\r\n          this.estadisticasPerdidas = respuesta.data;\r\n          \r\n          // Calcular pérdida neta para cada marca si no viene en la respuesta\r\n          if (this.estadisticasPerdidas.byBrand && this.estadisticasPerdidas.byBrand.length > 0) {\r\n            this.estadisticasPerdidas.byBrand.forEach(marca => {\r\n              if (!marca.netLoss) {\r\n                marca.netLoss = (parseFloat(marca.totalLoss) - parseFloat(marca.replacedLoss)).toFixed(2);\r\n              }\r\n            });\r\n          }\r\n          \r\n          // Actualizar las cartas de estadísticas con formato de miles\r\n          this.cartasEstadisticasPerdidas = [\r\n            { \r\n              nombre: \"Pérdida Total\", \r\n              total: `$ ${parseFloat(this.estadisticasPerdidas.totalLoss).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"alert-circle\", \r\n              clase: \"has-text-danger\" \r\n            },\r\n            { \r\n              nombre: \"Pérdida Reemplazada\", \r\n              total: `$ ${parseFloat(this.estadisticasPerdidas.replacedLoss).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"refresh\", \r\n              clase: \"has-text-info\" \r\n            },\r\n            { \r\n              nombre: \"Pérdida Neta\", \r\n              total: `$ ${parseFloat(this.estadisticasPerdidas.netLoss).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"calculator\", \r\n              clase: \"has-text-warning\" \r\n            }\r\n          ];\r\n        } else {\r\n          // Si no hay datos, inicializar con valores por defecto\r\n          this.estadisticasPerdidas = {\r\n            totalLoss: 0,\r\n            replacedLoss: 0,\r\n            netLoss: 0,\r\n            byBrand: []\r\n          };\r\n          \r\n          this.cartasEstadisticasPerdidas = [\r\n            { \r\n              nombre: \"Pérdida Total\", \r\n              total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"alert-circle\", \r\n              clase: \"has-text-danger\" \r\n            },\r\n            { \r\n              nombre: \"Pérdida Reemplazada\", \r\n              total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"refresh\", \r\n              clase: \"has-text-info\" \r\n            },\r\n            { \r\n              nombre: \"Pérdida Neta\", \r\n              clase: \"has-text-info\" \r\n            },\r\n            { \r\n              nombre: \"Pérdida Neta\", \r\n              total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2\r\n              })}`, \r\n              icono: \"calculator\", \r\n              clase: \"has-text-warning\" \r\n            }\r\n          ];\r\n        }\r\n        \r\n        this.cargando = false;\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al obtener estadísticas de pérdidas:\", error);\r\n        this.cargando = false;\r\n        \r\n        this.estadisticasPerdidas = {\r\n          totalLoss: 0,\r\n          replacedLoss: 0,\r\n          netLoss: 0,\r\n          byBrand: []\r\n        };\r\n        \r\n        this.cartasEstadisticasPerdidas = [\r\n          { \r\n            nombre: \"Pérdida Total\", \r\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2\r\n            })}`, \r\n            icono: \"alert-circle\", \r\n            clase: \"has-text-danger\" \r\n          },\r\n          { \r\n            nombre: \"Pérdida Reemplazada\", \r\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2\r\n            })}`, \r\n            icono: \"refresh\", \r\n            clase: \"has-text-info\" \r\n          },\r\n          { \r\n            nombre: \"Pérdida Neta\", \r\n            total: `$ ${parseFloat(0).toLocaleString('en-US', {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2\r\n            })}`, \r\n            icono: \"calculator\", \r\n            clase: \"has-text-warning\" \r\n          }\r\n        ];\r\n        \r\n        this.$buefy.toast.open({\r\n          message: 'Error al cargar las estadísticas de pérdidas',\r\n          type: 'is-danger'\r\n        });\r\n      });\r\n    },\r\n\r\n    // MÉTODO PARA CARGAR PROVEEDORES\r\n    cargarProveedores() {\r\n      apiRequest({\r\n        method: 'GET',\r\n        path: 'providers'\r\n      })\r\n      .then(respuesta => {\r\n        console.log(\"Respuesta de proveedores:\", respuesta);\r\n        \r\n        if (respuesta && respuesta.data) {\r\n          this.proveedores = respuesta.data;\r\n        } else if (Array.isArray(respuesta)) {\r\n          this.proveedores = respuesta;\r\n        } else {\r\n          this.proveedores = [];\r\n          console.error(\"Formato de respuesta de proveedores inesperado:\", respuesta);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al cargar proveedores:\", error);\r\n        this.$buefy.toast.open({\r\n          message: 'Error al cargar la lista de proveedores',\r\n          type: 'is-danger'\r\n        });\r\n        this.proveedores = [];\r\n      });\r\n    },\r\n    \r\n    // Método para filtrar por nombre de proveedor\r\n    filtrarPorNombreProveedor() {\r\n      // Si el campo está vacío, limpiar el filtro\r\n      if (!this.nombreProveedor.trim()) {\r\n        this.limpiarFiltro();\r\n        return;\r\n      }\r\n      \r\n      // Buscar el proveedor por nombre\r\n      const proveedorEncontrado = this.proveedores.find(\r\n        proveedor => proveedor.name.toLowerCase().includes(this.nombreProveedor.toLowerCase())\r\n      );\r\n      \r\n      if (proveedorEncontrado) {\r\n        this.filtroProveedor = proveedorEncontrado.id;\r\n        this.cargarEstadisticasPerdidas();\r\n      } else {\r\n        this.$buefy.toast.open({\r\n          message: 'No se encontró ningún proveedor con ese nombre',\r\n          type: 'is-warning'\r\n        });\r\n      }\r\n    },\r\n\r\n    // Método para limpiar el filtro de proveedor\r\n    limpiarFiltro() {\r\n      this.filtroProveedor = null;\r\n      this.nombreProveedor = '';\r\n      this.cargarEstadisticasPerdidas();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.box {\r\n  margin-bottom: 1.5rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}