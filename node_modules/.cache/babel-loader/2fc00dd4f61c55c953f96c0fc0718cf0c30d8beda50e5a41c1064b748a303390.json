{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport BuscarProducto from '../Inventario/BuscarProducto.vue';\nimport TablaProductos from './TablaProductos.vue';\nimport DialogoTerminarVenta from './DialogoTerminarVenta';\nimport DialogoAgregarCuenta from './DialogoAgregarCuenta';\nimport DialogoAgregarApartado from './DialogoAgregarApartado';\nimport DialogoCotizar from './DialogoCotizar';\nimport ComprobanteCompra from './ComprobanteCompra';\nimport AyudanteSesion from '../../Servicios/AyudanteSesion';\nimport apiRequest from '@/Servicios/HttpService';\nimport { formatLocalDateTime } from '@/helpers/formatDate';\nimport VisorPDF from './VisorPDF.vue';\nexport default {\n  name: \"RealizarVenta\",\n  components: {\n    BuscarProducto,\n    TablaProductos,\n    DialogoTerminarVenta,\n    DialogoAgregarCuenta,\n    DialogoAgregarApartado,\n    DialogoCotizar,\n    ComprobanteCompra,\n    VisorPDF\n  },\n  data: () => ({\n    cargando: false,\n    cargandoDescuentos: false,\n    productos: [],\n    total: 0,\n    subtotal: 0,\n    descuentoTotal: 0,\n    descuentosDisponibles: [],\n    pdfUrl: '',\n    mostrarPDF: false,\n    mostrarDialogo: false,\n    mostrarTerminarVenta: false,\n    mostrarAgregarCuenta: false,\n    mostrarAgregarApartado: false,\n    mostrarRegistrarCotizacion: false,\n    ventaRealizada: null,\n    mostrarComprobante: false,\n    tipoVenta: \"\",\n    usarPrecioTurista: false,\n    apiBaseUrl: process.env.VUE_APP_API,\n    searchByBarcode: true,\n    // Nuevo estado para el toggle\n    descuentosAplicadosPorProducto: {} // Mapa para evitar aplicar múltiples descuentos al mismo producto\n  }),\n  mounted() {\n    // Triple seguridad para el enfoque inicial\n    this.$nextTick(() => {\n      setTimeout(() => {\n        if (this.$refs.buscador?.focusInput) {\n          this.$refs.buscador.focusInput();\n        } else {\n          // Fallback directo al DOM\n          const input = document.querySelector('#producto input');\n          if (input) {\n            input.focus();\n            input.setAttribute('autofocus', '');\n          }\n        }\n      }, 300); // Delay generoso para SPA\n    });\n  },\n  methods: {\n    // Método para formatear números con 2 decimales y separador de miles\n    formatearNumero(valor) {\n      return parseFloat(valor).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    onImpreso(resultado) {\n      this.mostrarComprobante = resultado;\n    },\n    onTerminar(venta) {\n      console.log('venta', venta);\n      console.log('user', AyudanteSesion.obtenerDatosSesion());\n\n      // Obtener los descuentos aplicados por producto\n      const descuentosPorProducto = {};\n      this.descuentosDisponibles.filter(d => d.aplicado).forEach(d => {\n        if (!descuentosPorProducto[d.productId]) {\n          descuentosPorProducto[d.productId] = [];\n        }\n        descuentosPorProducto[d.productId].push({\n          discountId: d.discount.id,\n          quantity: this.productos.find(p => p.id === d.productId)?.cantidad || 1\n        });\n      });\n      this.ventaRealizada = {\n        total: this.total,\n        products: this.productos.map(producto => ({\n          id: producto.id,\n          nombre: producto.nombre,\n          precio: producto.precio,\n          cantidad: producto.cantidad,\n          priceType: producto.priceType,\n          appliedDiscounts: descuentosPorProducto[producto.id] || []\n        })),\n        cliente: venta.cliente.id,\n        usuario: AyudanteSesion.obtenerDatosSesion().id,\n        nombreCliente: venta.cliente.name || '',\n        nombreUsuario: AyudanteSesion.obtenerDatosSesion().nombre,\n        fecha: formatLocalDateTime()\n      };\n      let tipo = venta.tipo;\n      switch (tipo) {\n        case 'venta':\n          this.ventaRealizada.tipo = 'venta';\n          this.ventaRealizada.pagado = venta.pagado;\n          this.ventaRealizada.cambio = venta.cambio;\n          console.log(this.ventaRealizada);\n          break;\n        case 'cuenta':\n          this.ventaRealizada.tipo = 'cuenta';\n          this.ventaRealizada.pagado = venta.pagado;\n          this.ventaRealizada.porPagar = venta.porPagar;\n          console.log(this.ventaRealizada);\n          break;\n        case 'apartado':\n          this.ventaRealizada.tipo = 'apartado';\n          this.ventaRealizada.pagado = venta.pagado;\n          this.ventaRealizada.porPagar = venta.porPagar;\n          console.log(this.ventaRealizada);\n          break;\n        case 'cotiza':\n          this.ventaRealizada.tipo = 'cotiza';\n          console.log(this.ventaRealizada);\n          break;\n      }\n      this.tipoVenta = venta.tipo;\n      this.cargando = true;\n      console.log(this.ventaRealizada, 'venta realizada');\n\n      // Función para preparar los datos de productos con sus descuentos aplicados\n      const getProductsData = (products, includePriceType = false) => {\n        return products.map(product => ({\n          productId: product.id,\n          quantity: product.cantidad,\n          ...(includePriceType && {\n            priceType: product.priceType\n          }),\n          // Incluir appliedDiscounts si existen para este producto\n          ...(product.appliedDiscounts && product.appliedDiscounts.length > 0 && {\n            appliedDiscounts: product.appliedDiscounts\n          })\n        }));\n      };\n      const baseData = {\n        customerId: this.ventaRealizada.cliente,\n        userId: this.ventaRealizada.usuario,\n        date: this.ventaRealizada.fecha,\n        products: getProductsData(this.ventaRealizada.products, true)\n      };\n      const dataOptions = {\n        cotiza: {\n          ...baseData,\n          priceType: this.usarPrecioTurista ? 'tourist' : 'sale',\n          products: getProductsData(this.ventaRealizada.products)\n        },\n        venta: {\n          ...baseData,\n          paid: this.ventaRealizada.pagado\n        },\n        cuenta: {\n          date: this.ventaRealizada.fecha,\n          type: \"account\",\n          customerId: this.ventaRealizada.cliente,\n          userId: this.ventaRealizada.usuario,\n          products: getProductsData(this.ventaRealizada.products, true)\n        }\n      };\n      const optionData = dataOptions[this.tipoVenta] || null;\n      const endpointMap = {\n        cotiza: 'quotations',\n        venta: 'sales',\n        cuenta: 'accountsholdings'\n      };\n      const endpoint = endpointMap[this.tipoVenta] || '';\n      const handlePayment = accountId => {\n        if (this.ventaRealizada.pagado > 0) {\n          const paymentData = {\n            amount: this.ventaRealizada.pagado,\n            date: new Date().toISOString(),\n            accountHoldingId: accountId\n          };\n          apiRequest({\n            method: 'POST',\n            path: 'payments',\n            data: paymentData\n          }).then(paymentResponse => {\n            console.log('Payment registered:', paymentResponse);\n          }).catch(paymentError => {\n            console.error('Error registering payment:', paymentError);\n          });\n        }\n      };\n      if (optionData && endpoint) {\n        apiRequest({\n          method: 'POST',\n          path: endpoint,\n          data: optionData\n        }).then(registrado => {\n          console.log(registrado);\n          if (registrado) {\n            if (this.tipoVenta === 'cuenta') {\n              handlePayment(registrado.data.id);\n            }\n\n            // Mostrar notificación de éxito\n            this.$buefy.toast.open({\n              type: 'is-info',\n              message: tipo.toUpperCase() + ' registrado con éxito'\n            });\n\n            // Mostrar el PDF de la venta\n            this.mostrarPDFVenta(registrado.data.id);\n\n            // Limpiar el estado\n            this.productos = [];\n            this.total = 0;\n            this.subtotal = 0;\n            this.descuentoTotal = 0;\n            this.descuentosDisponibles = [];\n            this.descuentosAplicadosPorProducto = {};\n            this.cargando = false;\n            this.mostrarTerminarVenta = this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false;\n            this.mostrarDialogo = false;\n          }\n        }).catch(error => {\n          console.log(error);\n          this.cargando = false;\n          this.$buefy.toast.open({\n            type: 'is-danger',\n            message: 'Ocurrió un error al registrar la ' + tipo\n          });\n        });\n      }\n    },\n    cancelarVenta() {\n      this.$buefy.dialog.confirm({\n        title: 'Cancelar venta',\n        message: '¿Seguro que deseas cancelar la venta?',\n        confirmText: 'Sí, cancelar',\n        cancelText: 'No, continuar',\n        type: 'is-danger',\n        hasIcon: true,\n        onConfirm: () => {\n          this.productos = [];\n          this.total = 0;\n          this.subtotal = 0;\n          this.descuentoTotal = 0;\n          this.descuentosDisponibles = [];\n          this.descuentosAplicadosPorProducto = {};\n          this.$buefy.toast.open('Venta cancelada');\n        }\n      });\n    },\n    abrirDialogo(opcion) {\n      this.mostrarDialogo = true;\n      switch (opcion) {\n        case \"venta\":\n          this.mostrarTerminarVenta = true;\n          this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false;\n          break;\n        case \"cuenta\":\n          this.mostrarAgregarCuenta = true;\n          this.mostrarTerminarVenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false;\n          break;\n        case \"apartado\":\n          this.mostrarAgregarApartado = true;\n          this.mostrarAgregarCuenta = this.mostrarTerminarVenta = this.mostrarRegistrarCotizacion = false;\n          break;\n        case \"cotiza\":\n          this.mostrarRegistrarCotizacion = true;\n          this.mostrarAgregarCuenta = this.mostrarTerminarVenta = this.mostrarAgregarApartado = false;\n          break;\n      }\n    },\n    onCerrar(opcion) {\n      this.mostrarDialogo = false;\n      if (opcion === 'venta' || opcion === 'cuenta' || opcion === 'apartado' || opcion === 'cotiza') this.mostrarTerminarVenta = this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false;\n    },\n    onQuitar(id) {\n      let indice = this.productos.findIndex(producto => producto.id === id);\n      this.productos.splice(indice, 1);\n\n      // Actualizar descuentos disponibles al quitar un producto\n      this.descuentosDisponibles = this.descuentosDisponibles.filter(descuento => descuento.productId !== id);\n\n      // Eliminar del mapa de descuentos aplicados\n      delete this.descuentosAplicadosPorProducto[id];\n      this.actualizarTotalConDescuentos();\n    },\n    onAumentar(producto) {\n      let verificaExistencia = this.verificarExistenciaAlcanzada(producto.existencia, producto.id);\n      if (verificaExistencia) return;\n      if (producto.vendidoMayoreo) {\n        this.verificarMayoreo(producto.cantidadMayoreo, producto.id, producto.precioMayoreo);\n      }\n\n      // Actualizar descuentos si cambia la cantidad\n      this.actualizarDescuentosPorCantidad(producto.id);\n      this.actualizarTotalConDescuentos();\n    },\n    onSeleccionado(producto) {\n      // Validacion de codigo de barras no encontrado\n\n      if (this.searchByBarcode && !producto) {\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'Codigo de barras no encontrado'\n        });\n        return;\n      }\n      let verificaExistencia = this.verificarExistenciaAlcanzada(producto.existencia, producto.id);\n      if (verificaExistencia) return;\n      if (producto.vendidoMayoreo) {\n        this.verificarMayoreo(producto.cantidadMayoreo, producto.id, producto.precioMayoreo);\n      }\n      let existeEnLista = this.verificarSiEstaEnLista(producto.id);\n      if (existeEnLista >= 0) {\n        this.aumentarCantidad(existeEnLista);\n        this.actualizarTotalConDescuentos();\n        return;\n      }\n      this.agregarALista(producto);\n      this.actualizarTotalConDescuentos();\n      this.$nextTick(() => {\n        this.$refs.buscador.focusInput();\n      });\n    },\n    agregarALista(producto) {\n      if (producto.stock === 0) {\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'El producto ' + producto.name + ' no tiene stock disponible.'\n        });\n        return;\n      }\n      this.productos.push({\n        id: producto.id,\n        codigo: producto.code,\n        nombre: producto.name,\n        precio: this.usarPrecioTurista ? producto.touristPrice : producto.salePrice,\n        cantidad: 1,\n        existencia: producto.stock,\n        vendidoMayoreo: producto.wholesaleSale,\n        cantidadMayoreo: producto.wholesaleQuantity,\n        precioMayoreo: producto.wholesalePrice,\n        mayoreoAplicado: false,\n        priceType: this.usarPrecioTurista ? 'tourist' : 'sale'\n      });\n    },\n    verificarExistenciaAlcanzada(existencia, id) {\n      let resultado = false;\n      this.productos.forEach(producto => {\n        if (producto.id === id) {\n          if (parseInt(producto.cantidad) >= parseInt(existencia)) {\n            this.$buefy.toast.open({\n              type: 'is-danger',\n              message: 'El producto ' + producto.nombre + ' ha alcanzado la existencia máxima. Solo tienes ' + producto.existencia\n            });\n            producto.cantidad = existencia;\n            resultado = true;\n          }\n        }\n      });\n      return resultado;\n    },\n    verificarMayoreo(cantidadMayoreo, id, precioMayoreo) {\n      this.productos.forEach(producto => {\n        if (producto.mayoreoAplicado) return;\n        if (producto.id === id) {\n          if (producto.cantidad >= parseInt(cantidadMayoreo)) {\n            this.$buefy.dialog.confirm({\n              confirmText: 'Sí, aplicar',\n              cancelText: 'No aplicar',\n              message: 'El producto ' + producto.nombre + ' tiene mayoreo a partir de ' + cantidadMayoreo + ' piezas, ¿Desea aplicar el mayoreo?',\n              onConfirm: () => {\n                producto.precio = precioMayoreo;\n                producto.mayoreoAplicado = true;\n                this.$buefy.toast.open('Mayoreo aplicado correctamente a ' + producto.nombre);\n                this.actualizarTotalConDescuentos();\n              }\n            });\n          }\n        }\n      });\n    },\n    verificarSiEstaEnLista(id) {\n      return this.productos.findIndex(producto => producto.id === id);\n    },\n    aumentarCantidad(indice) {\n      let lista = this.productos;\n      let producto = lista[indice];\n      producto.cantidad++;\n      this.productos = lista;\n    },\n    // Método optimizado para mostrar el PDF de la venta\n    mostrarPDFVenta(ventaId) {\n      if (!ventaId) {\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'ID de venta no válido'\n        });\n        return;\n      }\n\n      // Mostrar notificación de que se está generando el PDF\n      this.$buefy.toast.open({\n        message: 'Generando comprobante...',\n        type: 'is-info',\n        duration: 2000\n      });\n\n      // Esperar un breve momento para que el backend tenga tiempo de generar el PDF\n      setTimeout(() => {\n        // Abrir el visor de PDF con el ID de la venta\n        this.$refs.visorPDF.abrir(ventaId);\n      }, 500);\n    },\n    // Método para calcular el total sin descuentos\n    calcularTotal() {\n      let total = 0;\n      this.productos.forEach(producto => {\n        total += parseFloat(producto.cantidad * producto.precio);\n      });\n      return total;\n    },\n    async buscarDescuentosDisponibles() {\n      if (this.productos.length === 0) return;\n      this.cargandoDescuentos = true;\n      this.descuentosDisponibles = [];\n      try {\n        // Para cada producto en la venta, buscar descuentos aplicables\n        for (const producto of this.productos) {\n          // Construir la URL con los parámetros para el cálculo de descuentos\n          const url = `discounts/product/${producto.id}/calculate?quantity=${producto.cantidad}&unitPrice=${producto.precio}`;\n          const response = await apiRequest({\n            method: 'GET',\n            path: url\n          });\n          if (response && response.data) {\n            // Normalizar la respuesta para asegurar que siempre sea un array\n            let resultados = response.data;\n            if (!Array.isArray(resultados)) {\n              resultados = [resultados];\n            }\n\n            // Filtrar solo descuentos válidos y añadir información adicional\n            const descuentosValidos = resultados.filter(d => d.valid).map(d => ({\n              ...d,\n              productId: producto.id,\n              productoNombre: producto.nombre,\n              aplicado: false,\n              // Por defecto, el descuento no está aplicado\n              // Asegurar que discountAmount sea un número válido\n              discountAmount: parseFloat(d.discountAmount) || 0,\n              // Asegurar que finalPrice sea un número válido\n              finalPrice: parseFloat(d.finalPrice) || 0\n            }));\n\n            // Añadir a la lista de descuentos disponibles\n            this.descuentosDisponibles = [...this.descuentosDisponibles, ...descuentosValidos];\n          }\n        }\n        if (this.descuentosDisponibles.length === 0) {\n          this.$buefy.toast.open({\n            message: 'No se encontraron descuentos aplicables para los productos seleccionados',\n            type: 'is-warning'\n          });\n        } else {\n          this.$buefy.toast.open({\n            message: `Se encontraron ${this.descuentosDisponibles.length} descuentos aplicables`,\n            type: 'is-success'\n          });\n        }\n      } catch (error) {\n        console.error('Error al buscar descuentos:', error);\n        this.$buefy.toast.open({\n          message: 'Error al buscar descuentos disponibles',\n          type: 'is-danger'\n        });\n      } finally {\n        this.cargandoDescuentos = false;\n      }\n    },\n    async actualizarDescuentosPorCantidad(productoId) {\n      // Obtener el producto actualizado\n      const producto = this.productos.find(p => p.id === productoId);\n      if (!producto) return;\n\n      // Filtrar los descuentos existentes para este producto\n      const descuentosExistentes = this.descuentosDisponibles.filter(d => d.productId === productoId);\n\n      // Si no hay descuentos para este producto, no hacer nada\n      if (descuentosExistentes.length === 0) return;\n      try {\n        // Construir la URL con los parámetros actualizados\n        const url = `discounts/product/${producto.id}/calculate?quantity=${producto.cantidad}&unitPrice=${producto.precio}`;\n        const response = await apiRequest({\n          method: 'GET',\n          path: url\n        });\n        if (response && response.data) {\n          // Normalizar la respuesta\n          let resultados = response.data;\n          if (!Array.isArray(resultados)) {\n            resultados = [resultados];\n          }\n\n          // Filtrar solo descuentos válidos y aplicar lógica según el tipo y cantidad mínima\n          const descuentosValidos = resultados.filter(d => {\n            const descuento = d.discount;\n\n            // Validar si el descuento está activo y dentro del rango de fechas\n            const ahora = new Date();\n            const inicio = new Date(descuento.startDate);\n            const fin = new Date(descuento.endDate);\n            if (!descuento.isActive || ahora < inicio || ahora > fin) {\n              return false;\n            }\n\n            // Validar cantidad mínima\n            if (producto.cantidad < descuento.minQuantity) {\n              return false;\n            }\n\n            // Calcular el monto de descuento según el tipo\n            switch (descuento.type) {\n              case 'FIXED_AMOUNT':\n                {\n                  // Asegurar que el valor del descuento sea un número\n                  const valorFijo = parseFloat(descuento.value) || 0;\n                  // Calcular el descuento por unidad\n                  d.discountAmount = valorFijo * producto.cantidad;\n                  // Calcular el precio final\n                  d.finalPrice = producto.precio * producto.cantidad - d.discountAmount;\n\n                  // Validar que el precio final no sea negativo o cero\n                  if (d.finalPrice <= 0) {\n                    d.discountAmount = 0;\n                    d.finalPrice = producto.precio * producto.cantidad;\n                    return false;\n                  }\n                  break;\n                }\n              case 'PERCENTAGE':\n                {\n                  // Asegurar que el valor del porcentaje sea un número\n                  const porcentaje = parseFloat(descuento.value) || 0;\n                  // Calcular el descuento total (precio * cantidad * porcentaje / 100)\n                  d.discountAmount = producto.precio * producto.cantidad * porcentaje / 100;\n                  // Calcular el precio final\n                  d.finalPrice = producto.precio * producto.cantidad - d.discountAmount;\n\n                  // Validar que el precio final no sea negativo o cero\n                  if (d.finalPrice <= 0) {\n                    d.discountAmount = 0;\n                    d.finalPrice = producto.precio * producto.cantidad;\n                    return false;\n                  }\n                  break;\n                }\n              case 'BUNDLE':\n                {\n                  if (producto.cantidad >= descuento.minQuantity) {\n                    // Calcular cuántos paquetes completos hay\n                    const bundles = Math.floor(producto.cantidad / descuento.value);\n                    // El descuento es el precio de los productos gratuitos\n                    d.discountAmount = bundles * producto.precio;\n                    // El precio final es el precio de los productos que se pagan\n                    d.finalPrice = producto.precio * (producto.cantidad - bundles);\n\n                    // Validar que el precio final no sea negativo o cero\n                    if (d.finalPrice <= 0) {\n                      d.discountAmount = 0;\n                      d.finalPrice = producto.precio * producto.cantidad;\n                      return false;\n                    }\n                  } else {\n                    return false;\n                  }\n                  break;\n                }\n              case 'BUY_X_GET_Y':\n                {\n                  if (producto.cantidad >= descuento.minQuantity) {\n                    // Calcular cuántos productos gratuitos hay (compra X, lleva Y gratis)\n                    const gratis = Math.floor(producto.cantidad / (descuento.value + 1));\n                    // El descuento es el precio de los productos gratuitos\n                    d.discountAmount = gratis * producto.precio;\n                    // El precio final es el precio de los productos que se pagan\n                    d.finalPrice = producto.precio * (producto.cantidad - gratis);\n\n                    // Validar que el precio final no sea negativo o cero\n                    if (d.finalPrice <= 0) {\n                      d.discountAmount = 0;\n                      d.finalPrice = producto.precio * producto.cantidad;\n                      return false;\n                    }\n                  } else {\n                    return false;\n                  }\n                  break;\n                }\n              case 'SEASONAL':\n                {\n                  // Similar al porcentaje pero puede tener lógica adicional\n                  const valorEstacional = parseFloat(descuento.value) || 0;\n                  d.discountAmount = producto.precio * producto.cantidad * valorEstacional / 100;\n                  d.finalPrice = producto.precio * producto.cantidad - d.discountAmount;\n\n                  // Validar que el precio final no sea negativo o cero\n                  if (d.finalPrice <= 0) {\n                    d.discountAmount = 0;\n                    d.finalPrice = producto.precio * producto.cantidad;\n                    return false;\n                  }\n                  break;\n                }\n              default:\n                return false;\n            }\n\n            // Redondear los valores a 2 decimales para evitar problemas de precisión\n            d.discountAmount = parseFloat(d.discountAmount.toFixed(2));\n            d.finalPrice = parseFloat(d.finalPrice.toFixed(2));\n            return true;\n          });\n\n          // Actualizar los descuentos existentes\n          const descuentosActualizados = this.descuentosDisponibles.map(d => {\n            if (d.productId !== productoId) return d;\n\n            // Buscar el descuento actualizado correspondiente\n            const descuentoActualizado = descuentosValidos.find(nuevo => nuevo.discount.id === d.discount.id);\n            if (descuentoActualizado) {\n              return {\n                ...descuentoActualizado,\n                productId: productoId,\n                productoNombre: producto.nombre,\n                aplicado: d.aplicado // Mantener el estado de aplicación\n              };\n            } else {\n              // Si el descuento ya no es válido, desactivarlo\n              return {\n                ...d,\n                valid: false,\n                aplicado: false\n              };\n            }\n          });\n\n          // Filtrar descuentos que ya no son válidos\n          this.descuentosDisponibles = descuentosActualizados.filter(d => d.valid || d.productId !== productoId);\n        }\n      } catch (error) {\n        console.error('Error al actualizar descuentos:', error);\n      }\n    },\n    // Método para actualizar el total con los descuentos aplicados\n    actualizarTotalConDescuentos() {\n      // Calcular el subtotal (sin descuentos)\n      this.subtotal = this.calcularTotal();\n\n      // Reiniciar el mapa de descuentos aplicados por producto\n      this.descuentosAplicadosPorProducto = {};\n\n      // Calcular el total de descuentos aplicados\n      this.descuentoTotal = 0;\n\n      // Agrupar descuentos por producto para evitar aplicar múltiples descuentos al mismo producto\n      const descuentosPorProducto = {};\n\n      // Primero, agrupar todos los descuentos por producto\n      this.descuentosDisponibles.forEach(descuento => {\n        if (descuento.aplicado) {\n          if (!descuentosPorProducto[descuento.productId]) {\n            descuentosPorProducto[descuento.productId] = [];\n          }\n          descuentosPorProducto[descuento.productId].push(descuento);\n        }\n      });\n\n      // Luego, para cada producto, aplicar solo el descuento más beneficioso\n      Object.keys(descuentosPorProducto).forEach(productoId => {\n        const descuentosProducto = descuentosPorProducto[productoId];\n        if (descuentosProducto.length > 0) {\n          // Ordenar descuentos por monto de descuento (de mayor a menor)\n          descuentosProducto.sort((a, b) => b.discountAmount - a.discountAmount);\n\n          // Aplicar solo el descuento más beneficioso\n          const mejorDescuento = descuentosProducto[0];\n          this.descuentoTotal += mejorDescuento.discountAmount;\n\n          // Marcar este producto como que ya tiene un descuento aplicado\n          this.descuentosAplicadosPorProducto[productoId] = mejorDescuento.discount.id;\n\n          // Desactivar los demás descuentos para este producto\n          descuentosProducto.slice(1).forEach(d => {\n            d.aplicado = false;\n          });\n        }\n      });\n\n      // Asegurar que el descuento total no exceda el subtotal\n      if (this.descuentoTotal > this.subtotal) {\n        this.descuentoTotal = this.subtotal;\n      }\n\n      // Calcular el total final (subtotal - descuentos)\n      this.total = Math.max(0, this.subtotal - this.descuentoTotal);\n\n      // Redondear a 2 decimales para evitar problemas de precisión\n      this.total = parseFloat(this.total.toFixed(2));\n      this.subtotal = parseFloat(this.subtotal.toFixed(2));\n      this.descuentoTotal = parseFloat(this.descuentoTotal.toFixed(2));\n    }\n  },\n  watch: {\n    '$route'() {\n      this.$nextTick(() => {\n        this.$refs.buscador.focusInput();\n      });\n    }\n  }\n};","map":{"version":3,"names":["BuscarProducto","TablaProductos","DialogoTerminarVenta","DialogoAgregarCuenta","DialogoAgregarApartado","DialogoCotizar","ComprobanteCompra","AyudanteSesion","apiRequest","formatLocalDateTime","VisorPDF","name","components","data","cargando","cargandoDescuentos","productos","total","subtotal","descuentoTotal","descuentosDisponibles","pdfUrl","mostrarPDF","mostrarDialogo","mostrarTerminarVenta","mostrarAgregarCuenta","mostrarAgregarApartado","mostrarRegistrarCotizacion","ventaRealizada","mostrarComprobante","tipoVenta","usarPrecioTurista","apiBaseUrl","process","env","VUE_APP_API","searchByBarcode","descuentosAplicadosPorProducto","mounted","$nextTick","setTimeout","$refs","buscador","focusInput","input","document","querySelector","focus","setAttribute","methods","formatearNumero","valor","parseFloat","toFixed","replace","onImpreso","resultado","onTerminar","venta","console","log","obtenerDatosSesion","descuentosPorProducto","filter","d","aplicado","forEach","productId","push","discountId","discount","id","quantity","find","p","cantidad","products","map","producto","nombre","precio","priceType","appliedDiscounts","cliente","usuario","nombreCliente","nombreUsuario","fecha","tipo","pagado","cambio","porPagar","getProductsData","includePriceType","product","length","baseData","customerId","userId","date","dataOptions","cotiza","paid","cuenta","type","optionData","endpointMap","endpoint","handlePayment","accountId","paymentData","amount","Date","toISOString","accountHoldingId","method","path","then","paymentResponse","catch","paymentError","error","registrado","$buefy","toast","open","message","toUpperCase","mostrarPDFVenta","cancelarVenta","dialog","confirm","title","confirmText","cancelText","hasIcon","onConfirm","abrirDialogo","opcion","onCerrar","onQuitar","indice","findIndex","splice","descuento","actualizarTotalConDescuentos","onAumentar","verificaExistencia","verificarExistenciaAlcanzada","existencia","vendidoMayoreo","verificarMayoreo","cantidadMayoreo","precioMayoreo","actualizarDescuentosPorCantidad","onSeleccionado","existeEnLista","verificarSiEstaEnLista","aumentarCantidad","agregarALista","stock","codigo","code","touristPrice","salePrice","wholesaleSale","wholesaleQuantity","wholesalePrice","mayoreoAplicado","parseInt","lista","ventaId","duration","visorPDF","abrir","calcularTotal","buscarDescuentosDisponibles","url","response","resultados","Array","isArray","descuentosValidos","valid","productoNombre","discountAmount","finalPrice","productoId","descuentosExistentes","ahora","inicio","startDate","fin","endDate","isActive","minQuantity","valorFijo","value","porcentaje","bundles","Math","floor","gratis","valorEstacional","descuentosActualizados","descuentoActualizado","nuevo","Object","keys","descuentosProducto","sort","a","b","mejorDescuento","slice","max","watch","$route"],"sources":["src/components/Ventas/RealizarVenta.vue"],"sourcesContent":["```vue type=\"vue\" project=\"POS System\" file=\"RealizarVenta.vue\"\r\n[v0-no-op-code-block-prefix]<template>\r\n  <section class=\"full-width-section\">\r\n    <!-- Barra superior con búsqueda y switch -->\r\n    <div class=\"top-controls\">\r\n      <div class=\"search-container\">\r\n     \r\n        <b-switch\r\n        v-model=\"searchByBarcode\"\r\n        size=\"is-medium\"\r\n        type=\"is-info\"\r\n        class=\"search-toggle\">\r\n        {{ searchByBarcode ? '🔍 Modo Escaner' : '🔍 Modo Manual'  }}\r\n        </b-switch>\r\n\r\n        <buscar-producto \r\n        ref=\"buscador\"\r\n        @seleccionado=\"onSeleccionado\"\r\n        :modo-busqueda=\"searchByBarcode ? 'codigo' : 'nombre'\" \r\n        class=\"full-width-search\"\r\n        autofocus/>\r\n        <b-switch v-model=\"usarPrecioTurista\" type=\"is-info\" class=\"tourist-switch\">\r\n          💸 Aplicar precio de turista antes de agregar los productos!\r\n        </b-switch>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Contenido principal -->\r\n    <div class=\"main-content\">\r\n      <!-- Estado vacío rediseñado - Alineado a la izquierda como en la imagen -->\r\n      <div v-if=\"productos.length < 1\" class=\"epic-empty-state\">\r\n        <div class=\"epic-empty-content\">\r\n          <!-- Texto alineado a la izquierda con icono de carrito -->\r\n          <div class=\"empty-message\">\r\n            <i class=\"mdi mdi-cart-outline cart-icon\"></i>\r\n            <div class=\"empty-text\">\r\n              <h2 class=\"empty-title\">No has agregado productos</h2>\r\n              <p class=\"empty-subtitle\">Agrega algunos productos a la lista para venderlos</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Contenido cuando hay productos -->\r\n      <div v-if=\"productos.length > 0\" class=\"columns is-multiline product-content\">\r\n        <!-- Columna izquierda: Lista de productos -->\r\n        <div class=\"column is-8\">\r\n          <tabla-productos :listaProductos=\"productos\" @quitar=\"onQuitar\" @aumentar=\"onAumentar\" />\r\n        </div>\r\n        \r\n        <!-- Columna derecha: Resumen y acciones -->\r\n        <div class=\"column is-4\">\r\n          <div class=\"card sticky-card\">\r\n            <div class=\"card-content\">\r\n              <!-- Resumen de venta -->\r\n              <div class=\"notification is-primary-bg mb-3\">\r\n                <div v-if=\"descuentoTotal > 0\" class=\"has-text-centered mb-2\">\r\n                  <p class=\"is-size-5\">Subtotal: ${{ formatearNumero(subtotal) }}</p>\r\n                  <p class=\"is-size-5 has-text-success\">Descuento: -${{ formatearNumero(descuentoTotal) }}</p>\r\n                </div>\r\n                <p class=\"has-text-weight-bold has-text-centered\" style=\"font-size:3em\">\r\n                  Total ${{ formatearNumero(total) }}\r\n                </p>\r\n              </div>\r\n              \r\n              <!-- Botones de acción principales -->\r\n              <div class=\"buttons is-centered mb-4\">\r\n                <b-button class=\"button\" type=\"is-success\" icon-left=\"check\" expanded\r\n                  @click=\"abrirDialogo('venta')\">\r\n                  Terminar venta\r\n                </b-button>\r\n                <b-button class=\"button\" type=\"is-danger\" icon-left=\"cancel\" expanded\r\n                  @click=\"cancelarVenta\">\r\n                  Cancelar\r\n                </b-button>\r\n              </div>\r\n              \r\n              <!-- Botón de búsqueda de descuentos -->\r\n              <div class=\"has-text-centered\">\r\n                <b-button type=\"is-info\" @click=\"buscarDescuentosDisponibles\" :loading=\"cargandoDescuentos\" expanded>\r\n                  <span class=\"icon\"><i class=\"mdi mdi-tag-multiple\"></i></span>\r\n                  <span>Buscar descuentos disponibles</span>\r\n                </b-button>\r\n                \r\n                <!-- Mensaje informativo - solo cuando no hay descuentos disponibles -->\r\n                <div class=\"notification is-warning is-light mt-2 py-2 px-3\" v-if=\"descuentosDisponibles.length === 0\">\r\n                  <p class=\"is-size-7 has-text-centered\">\r\n                    <span class=\"icon is-small mr-1\"><i class=\"mdi mdi-information\"></i></span>\r\n                    ¡IMPORTANTE!\r\n\r\nAGREGA LA CANTIDAD CORRECTA DE CADA PRODUCTO ANTES DE BUSCAR LOS DESCUENTOS\r\n\r\nLos descuentos se calculan en base a la cantidad y precio de los productos seleccionados.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Sección de descuentos disponibles - Solo visible cuando hay descuentos -->\r\n    <div v-if=\"descuentosDisponibles.length > 0\" class=\"discounts-section\">\r\n      <div class=\"card\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            <span class=\"icon mr-2\"><i class=\"mdi mdi-tag-multiple\"></i></span>\r\n            Descuentos Disponibles\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"columns is-multiline\">\r\n            <div class=\"column is-6\" \r\n                v-for=\"(descuento, index) in descuentosDisponibles\" \r\n                :key=\"index\">\r\n              <div class=\"card mb-2\">\r\n                <div class=\"card-content p-3\">\r\n                  <div class=\"level mb-0\">\r\n                    <div class=\"level-left\">\r\n                      <div class=\"level-item\">\r\n                        <div>\r\n                          <p class=\"is-size-6 has-text-weight-bold\">{{ descuento.discount.name }}</p>\r\n                          <p class=\"is-size-7\">\r\n                            <b-tag \r\n                              :type=\"descuento.discount.type === 'PERCENTAGE' ? 'is-info' : \r\n                                    descuento.discount.type === 'FIXED_AMOUNT' ? 'is-success' : \r\n                                    descuento.discount.type === 'BUY_X_GET_Y' ? 'is-warning' : \r\n                                    descuento.discount.type === 'BUNDLE' ? 'is-primary' : \r\n                                    descuento.discount.type === 'SEASONAL' ? 'is-link' : 'is-dark'\"\r\n                              size=\"is-small\">\r\n                              {{ descuento.discount.type === 'PERCENTAGE' ? `${descuento.discount.value}%` :\r\n                                descuento.discount.type === 'FIXED_AMOUNT' ? `$${descuento.discount.value}` :\r\n                                descuento.discount.type === 'BUY_X_GET_Y' ? `${descuento.discount.name}` :\r\n                                descuento.discount.type === 'BUNDLE' ? `Paquete ${descuento.discount.value}` :\r\n                                descuento.discount.type === 'SEASONAL' ? `Descuento ${descuento.discount.value}` : 'N/A' }}\r\n                            </b-tag>\r\n                            <span class=\"ml-2 has-text-grey\">Producto: {{ descuento.productoNombre }}</span>\r\n                          </p>\r\n                          <p class=\"is-size-7 has-text-success\">\r\n                            Ahorro: ${{ formatearNumero(descuento.discountAmount) }}\r\n                          </p>\r\n                          <p v-if=\"descuento.finalPrice <= 0\" class=\"is-size-7 has-text-danger\">\r\n                            Este descuento no puede aplicarse (precio final inválido).\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"level-right\">\r\n                      <div class=\"level-item\">\r\n                        <b-checkbox \r\n                          v-model=\"descuento.aplicado\" \r\n                          @input=\"actualizarTotalConDescuentos\"\r\n                          :disabled=\"descuento.finalPrice <= 0\">\r\n                          Aplicar\r\n                        </b-checkbox>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n    <b-modal v-model=\"mostrarDialogo\" has-modal-card trap-focus :destroy-on-hide=\"false\" aria-role=\"dialog\"\r\n      aria-label=\"Modal Terminar Venta\" close-button-aria-label=\"Close\" aria-modal>\r\n      <dialogo-terminar-venta :totalVenta=\"total\" @close=\"onCerrar\" @terminar=\"onTerminar\"\r\n        v-if=\"mostrarTerminarVenta\"></dialogo-terminar-venta>\r\n      <dialogo-agregar-cuenta :totalVenta=\"total\" @close=\"onCerrar\" @terminar=\"onTerminar\"\r\n        v-if=\"mostrarAgregarCuenta\"></dialogo-agregar-cuenta>\r\n      <dialogo-agregar-apartado :totalVenta=\"total\" @close=\"onCerrar\" @terminar=\"onTerminar\"\r\n        v-if=\"mostrarAgregarApartado\"></dialogo-agregar-apartado>\r\n      <dialogo-cotizar :totalVenta=\"total\" @close=\"onCerrar\" @terminar=\"onTerminar\"\r\n        v-if=\"mostrarRegistrarCotizacion\"></dialogo-cotizar>\r\n    </b-modal>\r\n\r\n    <visorPDF ref=\"visorPDF\" :urlBase=\"apiBaseUrl + 'print/viewThermal'\" titulo=\"Comprobante de Venta\" />\r\n    <comprobante-compra :venta=\"this.ventaRealizada\" :tipo=\"tipoVenta\" @impreso=\"onImpreso\" v-if=\"mostrarComprobante\" />\r\n  </section>\r\n</template>\r\n<script>\r\nimport BuscarProducto from '../Inventario/BuscarProducto.vue'\r\nimport TablaProductos from './TablaProductos.vue'\r\nimport DialogoTerminarVenta from './DialogoTerminarVenta'\r\nimport DialogoAgregarCuenta from './DialogoAgregarCuenta'\r\nimport DialogoAgregarApartado from './DialogoAgregarApartado'\r\nimport DialogoCotizar from './DialogoCotizar'\r\nimport ComprobanteCompra from './ComprobanteCompra'\r\nimport AyudanteSesion from '../../Servicios/AyudanteSesion'\r\nimport apiRequest from '@/Servicios/HttpService'\r\nimport { formatLocalDateTime } from '@/helpers/formatDate'\r\nimport VisorPDF from './VisorPDF.vue'\r\n\r\nexport default {\r\n  name: \"RealizarVenta\",\r\n  components: {\r\n    BuscarProducto,\r\n    TablaProductos,\r\n    DialogoTerminarVenta,\r\n    DialogoAgregarCuenta,\r\n    DialogoAgregarApartado,\r\n    DialogoCotizar,\r\n    ComprobanteCompra,\r\n    VisorPDF\r\n  },\r\n\r\n  data: () => ({\r\n    cargando: false,\r\n    cargandoDescuentos: false,\r\n    productos: [],\r\n    total: 0,\r\n    subtotal: 0,\r\n    descuentoTotal: 0,\r\n    descuentosDisponibles: [],\r\n    pdfUrl: '',\r\n    mostrarPDF: false,\r\n    mostrarDialogo: false,\r\n    mostrarTerminarVenta: false,\r\n    mostrarAgregarCuenta: false,\r\n    mostrarAgregarApartado: false,\r\n    mostrarRegistrarCotizacion: false,\r\n    ventaRealizada: null,\r\n    mostrarComprobante: false,\r\n    tipoVenta: \"\",\r\n    usarPrecioTurista: false,\r\n    apiBaseUrl: process.env.VUE_APP_API,\r\n    searchByBarcode: true, // Nuevo estado para el toggle\r\n    descuentosAplicadosPorProducto: {} // Mapa para evitar aplicar múltiples descuentos al mismo producto\r\n  }),\r\n\r\n  mounted() {\r\n    // Triple seguridad para el enfoque inicial\r\n    this.$nextTick(() => {\r\n      setTimeout(() => {\r\n        if (this.$refs.buscador?.focusInput) {\r\n          this.$refs.buscador.focusInput();\r\n        } else {\r\n          // Fallback directo al DOM\r\n          const input = document.querySelector('#producto input');\r\n          if (input) {\r\n            input.focus();\r\n            input.setAttribute('autofocus', '');\r\n          }\r\n        }\r\n      }, 300); // Delay generoso para SPA\r\n    });\r\n  },\r\n  \r\n  methods: {\r\n\r\n    // Método para formatear números con 2 decimales y separador de miles\r\n    formatearNumero(valor) {\r\n      return parseFloat(valor).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    },\r\n\r\n    onImpreso(resultado) {\r\n      this.mostrarComprobante = resultado\r\n    },\r\n\r\n    onTerminar(venta) {\r\n      console.log('venta', venta)\r\n      console.log('user', AyudanteSesion.obtenerDatosSesion())\r\n\r\n      // Obtener los descuentos aplicados por producto\r\n      const descuentosPorProducto = {};\r\n\r\n      this.descuentosDisponibles\r\n        .filter(d => d.aplicado)\r\n        .forEach(d => {\r\n          if (!descuentosPorProducto[d.productId]) {\r\n            descuentosPorProducto[d.productId] = [];\r\n          }\r\n          descuentosPorProducto[d.productId].push({\r\n            discountId: d.discount.id,\r\n            quantity: this.productos.find(p => p.id === d.productId)?.cantidad || 1\r\n          });\r\n        });\r\n\r\n      this.ventaRealizada = {\r\n        total: this.total,\r\n        products: this.productos.map(producto => ({\r\n          id: producto.id,\r\n          nombre: producto.nombre,\r\n          precio: producto.precio,\r\n          cantidad: producto.cantidad,\r\n          priceType: producto.priceType,\r\n          appliedDiscounts: descuentosPorProducto[producto.id] || []\r\n        })),\r\n        cliente: venta.cliente.id,\r\n        usuario: AyudanteSesion.obtenerDatosSesion().id,\r\n        nombreCliente: venta.cliente.name || '',\r\n        nombreUsuario: AyudanteSesion.obtenerDatosSesion().nombre,\r\n        fecha: formatLocalDateTime()\r\n      }\r\n\r\n      let tipo = venta.tipo\r\n\r\n      switch (tipo) {\r\n        case 'venta':\r\n          this.ventaRealizada.tipo = 'venta'\r\n          this.ventaRealizada.pagado = venta.pagado\r\n          this.ventaRealizada.cambio = venta.cambio\r\n          console.log(this.ventaRealizada)\r\n          break\r\n        case 'cuenta':\r\n          this.ventaRealizada.tipo = 'cuenta'\r\n          this.ventaRealizada.pagado = venta.pagado\r\n          this.ventaRealizada.porPagar = venta.porPagar\r\n          console.log(this.ventaRealizada)\r\n          break\r\n        case 'apartado':\r\n          this.ventaRealizada.tipo = 'apartado'\r\n          this.ventaRealizada.pagado = venta.pagado\r\n          this.ventaRealizada.porPagar = venta.porPagar\r\n          console.log(this.ventaRealizada)\r\n          break\r\n        case 'cotiza':\r\n          this.ventaRealizada.tipo = 'cotiza'\r\n          console.log(this.ventaRealizada)\r\n          break\r\n      }\r\n\r\n      this.tipoVenta = venta.tipo\r\n      this.cargando = true\r\n\r\n      console.log(this.ventaRealizada, 'venta realizada')\r\n\r\n      // Función para preparar los datos de productos con sus descuentos aplicados\r\n      const getProductsData = (products, includePriceType = false) => {\r\n        return products.map(product => ({\r\n          productId: product.id,\r\n          quantity: product.cantidad,\r\n          ...(includePriceType && { priceType: product.priceType }),\r\n          // Incluir appliedDiscounts si existen para este producto\r\n          ...(product.appliedDiscounts && product.appliedDiscounts.length > 0 && {\r\n            appliedDiscounts: product.appliedDiscounts\r\n          })\r\n        }));\r\n      };\r\n\r\n      const baseData = {\r\n        customerId: this.ventaRealizada.cliente,\r\n        userId: this.ventaRealizada.usuario,\r\n        date: this.ventaRealizada.fecha,\r\n        products: getProductsData(this.ventaRealizada.products, true)\r\n      };\r\n\r\n      const dataOptions = {\r\n        cotiza: {\r\n          ...baseData,\r\n          priceType: this.usarPrecioTurista ? 'tourist' : 'sale',\r\n          products: getProductsData(this.ventaRealizada.products)\r\n        },\r\n        venta: {\r\n          ...baseData,\r\n          paid: this.ventaRealizada.pagado\r\n        },\r\n        cuenta: {\r\n          date: this.ventaRealizada.fecha,\r\n          type: \"account\",\r\n          customerId: this.ventaRealizada.cliente,\r\n          userId: this.ventaRealizada.usuario,\r\n          products: getProductsData(this.ventaRealizada.products, true)\r\n        }\r\n      };\r\n\r\n      const optionData = dataOptions[this.tipoVenta] || null;\r\n      const endpointMap = {\r\n        cotiza: 'quotations',\r\n        venta: 'sales',\r\n        cuenta: 'accountsholdings'\r\n      };\r\n      const endpoint = endpointMap[this.tipoVenta] || '';\r\n\r\n      const handlePayment = (accountId) => {\r\n        if (this.ventaRealizada.pagado > 0) {\r\n          const paymentData = {\r\n            amount: this.ventaRealizada.pagado,\r\n            date: new Date().toISOString(),\r\n            accountHoldingId: accountId\r\n          };\r\n          apiRequest({\r\n            method: 'POST',\r\n            path: 'payments',\r\n            data: paymentData\r\n          }).then(paymentResponse => {\r\n            console.log('Payment registered:', paymentResponse);\r\n          }).catch(paymentError => {\r\n            console.error('Error registering payment:', paymentError);\r\n          });\r\n        }\r\n      };\r\n\r\n      if (optionData && endpoint) {\r\n        apiRequest({\r\n          method: 'POST',\r\n          path: endpoint,\r\n          data: optionData\r\n        }).then(registrado => {\r\n          console.log(registrado);\r\n          if (registrado) {\r\n            if (this.tipoVenta === 'cuenta') {\r\n              handlePayment(registrado.data.id);\r\n            }\r\n\r\n            // Mostrar notificación de éxito\r\n            this.$buefy.toast.open({\r\n              type: 'is-info',\r\n              message: tipo.toUpperCase() + ' registrado con éxito'\r\n            });\r\n\r\n            // Mostrar el PDF de la venta\r\n            this.mostrarPDFVenta(registrado.data.id);\r\n\r\n            // Limpiar el estado\r\n            this.productos = [];\r\n            this.total = 0;\r\n            this.subtotal = 0;\r\n            this.descuentoTotal = 0;\r\n            this.descuentosDisponibles = [];\r\n            this.descuentosAplicadosPorProducto = {};\r\n            this.cargando = false;\r\n            this.mostrarTerminarVenta = this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false;\r\n            this.mostrarDialogo = false;\r\n          }\r\n        }).catch(error => {\r\n          console.log(error);\r\n          this.cargando = false;\r\n          this.$buefy.toast.open({\r\n            type: 'is-danger',\r\n            message: 'Ocurrió un error al registrar la ' + tipo\r\n          });\r\n        });\r\n      }\r\n    },\r\n\r\n    cancelarVenta() {\r\n      this.$buefy.dialog.confirm({\r\n        title: 'Cancelar venta',\r\n        message: '¿Seguro que deseas cancelar la venta?',\r\n        confirmText: 'Sí, cancelar',\r\n        cancelText: 'No, continuar',\r\n        type: 'is-danger',\r\n        hasIcon: true,\r\n        onConfirm: () => {\r\n          this.productos = []\r\n          this.total = 0\r\n          this.subtotal = 0\r\n          this.descuentoTotal = 0\r\n          this.descuentosDisponibles = []\r\n          this.descuentosAplicadosPorProducto = {}\r\n          this.$buefy.toast.open('Venta cancelada')\r\n        }\r\n      })\r\n    },\r\n\r\n    abrirDialogo(opcion) {\r\n      this.mostrarDialogo = true\r\n      switch (opcion) {\r\n        case \"venta\":\r\n          this.mostrarTerminarVenta = true\r\n          this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false\r\n          break\r\n        case \"cuenta\":\r\n          this.mostrarAgregarCuenta = true\r\n          this.mostrarTerminarVenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false\r\n          break\r\n        case \"apartado\":\r\n          this.mostrarAgregarApartado = true\r\n          this.mostrarAgregarCuenta = this.mostrarTerminarVenta = this.mostrarRegistrarCotizacion = false\r\n          break\r\n        case \"cotiza\":\r\n          this.mostrarRegistrarCotizacion = true\r\n          this.mostrarAgregarCuenta = this.mostrarTerminarVenta = this.mostrarAgregarApartado = false\r\n          break\r\n      }\r\n    },\r\n\r\n    onCerrar(opcion) {\r\n      this.mostrarDialogo = false\r\n      if (opcion === 'venta' || opcion === 'cuenta' || opcion === 'apartado' || opcion === 'cotiza')\r\n        this.mostrarTerminarVenta = this.mostrarAgregarCuenta = this.mostrarAgregarApartado = this.mostrarRegistrarCotizacion = false\r\n    },\r\n\r\n    onQuitar(id) {\r\n      let indice = this.productos.findIndex(producto => producto.id === id)\r\n      this.productos.splice(indice, 1)\r\n\r\n      // Actualizar descuentos disponibles al quitar un producto\r\n      this.descuentosDisponibles = this.descuentosDisponibles.filter(\r\n        descuento => descuento.productId !== id\r\n      );\r\n\r\n      // Eliminar del mapa de descuentos aplicados\r\n      delete this.descuentosAplicadosPorProducto[id];\r\n\r\n      this.actualizarTotalConDescuentos();\r\n    },\r\n\r\n    onAumentar(producto) {\r\n      let verificaExistencia = this.verificarExistenciaAlcanzada(producto.existencia, producto.id)\r\n\r\n      if (verificaExistencia) return\r\n\r\n      if (producto.vendidoMayoreo) {\r\n        this.verificarMayoreo(producto.cantidadMayoreo, producto.id, producto.precioMayoreo)\r\n      }\r\n\r\n      // Actualizar descuentos si cambia la cantidad\r\n      this.actualizarDescuentosPorCantidad(producto.id);\r\n      this.actualizarTotalConDescuentos();\r\n    },\r\n\r\n    onSeleccionado(producto) {\r\n\r\n      // Validacion de codigo de barras no encontrado\r\n\r\n      if (this.searchByBarcode && !producto) {\r\n        this.$buefy.toast.open({\r\n          type: 'is-danger',\r\n          message: 'Codigo de barras no encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      let verificaExistencia = this.verificarExistenciaAlcanzada(producto.existencia, producto.id)\r\n\r\n      if (verificaExistencia) return\r\n      if (producto.vendidoMayoreo) {\r\n        this.verificarMayoreo(producto.cantidadMayoreo, producto.id, producto.precioMayoreo)\r\n      }\r\n\r\n      let existeEnLista = this.verificarSiEstaEnLista(producto.id)\r\n\r\n      if (existeEnLista >= 0) {\r\n        this.aumentarCantidad(existeEnLista)\r\n        this.actualizarTotalConDescuentos();\r\n        return\r\n      }\r\n\r\n      this.agregarALista(producto)\r\n      this.actualizarTotalConDescuentos();\r\n\r\n      this.$nextTick(() => {\r\n        this.$refs.buscador.focusInput();\r\n      })\r\n    },\r\n\r\n    agregarALista(producto) {\r\n      if (producto.stock === 0) {\r\n        this.$buefy.toast.open({\r\n          type: 'is-danger',\r\n          message: 'El producto ' + producto.name + ' no tiene stock disponible.'\r\n        });\r\n        return;\r\n      }\r\n      this.productos.push(\r\n        {\r\n          id: producto.id,\r\n          codigo: producto.code,\r\n          nombre: producto.name,\r\n          precio: this.usarPrecioTurista ? producto.touristPrice : producto.salePrice,\r\n          cantidad: 1,\r\n          existencia: producto.stock,\r\n          vendidoMayoreo: producto.wholesaleSale,\r\n          cantidadMayoreo: producto.wholesaleQuantity,\r\n          precioMayoreo: producto.wholesalePrice,\r\n          mayoreoAplicado: false,\r\n          priceType: this.usarPrecioTurista ? 'tourist' : 'sale'\r\n        }\r\n      );\r\n    },\r\n\r\n    verificarExistenciaAlcanzada(existencia, id) {\r\n      let resultado = false\r\n      this.productos.forEach(producto => {\r\n        if (producto.id === id) {\r\n          if (parseInt(producto.cantidad) >= parseInt(existencia)) {\r\n            this.$buefy.toast.open({\r\n              type: 'is-danger',\r\n              message: 'El producto ' + producto.nombre + ' ha alcanzado la existencia máxima. Solo tienes ' + producto.existencia\r\n            })\r\n            producto.cantidad = existencia\r\n            resultado = true\r\n          }\r\n        }\r\n      })\r\n      return resultado\r\n    },\r\n\r\n    verificarMayoreo(cantidadMayoreo, id, precioMayoreo) {\r\n      this.productos.forEach(producto => {\r\n        if (producto.mayoreoAplicado) return\r\n        if (producto.id === id) {\r\n          if (producto.cantidad >= parseInt(cantidadMayoreo)) {\r\n            this.$buefy.dialog.confirm({\r\n              confirmText: 'Sí, aplicar',\r\n              cancelText: 'No aplicar',\r\n              message: 'El producto ' + producto.nombre + ' tiene mayoreo a partir de ' + cantidadMayoreo + ' piezas, ¿Desea aplicar el mayoreo?',\r\n              onConfirm: () => {\r\n                producto.precio = precioMayoreo\r\n                producto.mayoreoAplicado = true\r\n                this.$buefy.toast.open('Mayoreo aplicado correctamente a ' + producto.nombre)\r\n                this.actualizarTotalConDescuentos();\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n\r\n    verificarSiEstaEnLista(id) {\r\n      return this.productos.findIndex(producto => producto.id === id)\r\n    },\r\n\r\n    aumentarCantidad(indice) {\r\n      let lista = this.productos\r\n      let producto = lista[indice]\r\n      producto.cantidad++\r\n      this.productos = lista\r\n    },\r\n\r\n    // Método optimizado para mostrar el PDF de la venta\r\n    mostrarPDFVenta(ventaId) {\r\n      if (!ventaId) {\r\n        this.$buefy.toast.open({\r\n          type: 'is-danger',\r\n          message: 'ID de venta no válido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Mostrar notificación de que se está generando el PDF\r\n      this.$buefy.toast.open({\r\n        message: 'Generando comprobante...',\r\n        type: 'is-info',\r\n        duration: 2000\r\n      });\r\n\r\n      // Esperar un breve momento para que el backend tenga tiempo de generar el PDF\r\n      setTimeout(() => {\r\n        // Abrir el visor de PDF con el ID de la venta\r\n        this.$refs.visorPDF.abrir(ventaId);\r\n      }, 500);\r\n    },\r\n\r\n    // Método para calcular el total sin descuentos\r\n    calcularTotal() {\r\n      let total = 0\r\n      this.productos.forEach(producto => {\r\n        total += parseFloat(producto.cantidad * producto.precio)\r\n      })\r\n      return total\r\n    },\r\n\r\n    async buscarDescuentosDisponibles() {\r\n      if (this.productos.length === 0) return;\r\n\r\n      this.cargandoDescuentos = true;\r\n      this.descuentosDisponibles = [];\r\n\r\n      try {\r\n        // Para cada producto en la venta, buscar descuentos aplicables\r\n        for (const producto of this.productos) {\r\n          // Construir la URL con los parámetros para el cálculo de descuentos\r\n          const url = `discounts/product/${producto.id}/calculate?quantity=${producto.cantidad}&unitPrice=${producto.precio}`;\r\n\r\n          const response = await apiRequest({\r\n            method: 'GET',\r\n            path: url\r\n          });\r\n\r\n          if (response && response.data) {\r\n            // Normalizar la respuesta para asegurar que siempre sea un array\r\n            let resultados = response.data;\r\n            if (!Array.isArray(resultados)) {\r\n              resultados = [resultados];\r\n            }\r\n\r\n            // Filtrar solo descuentos válidos y añadir información adicional\r\n            const descuentosValidos = resultados\r\n              .filter(d => d.valid)\r\n              .map(d => ({\r\n                ...d,\r\n                productId: producto.id,\r\n                productoNombre: producto.nombre,\r\n                aplicado: false, // Por defecto, el descuento no está aplicado\r\n                // Asegurar que discountAmount sea un número válido\r\n                discountAmount: parseFloat(d.discountAmount) || 0,\r\n                // Asegurar que finalPrice sea un número válido\r\n                finalPrice: parseFloat(d.finalPrice) || 0\r\n              }));\r\n\r\n            // Añadir a la lista de descuentos disponibles\r\n            this.descuentosDisponibles = [...this.descuentosDisponibles, ...descuentosValidos];\r\n          }\r\n        }\r\n\r\n        if (this.descuentosDisponibles.length === 0) {\r\n          this.$buefy.toast.open({\r\n            message: 'No se encontraron descuentos aplicables para los productos seleccionados',\r\n            type: 'is-warning'\r\n          });\r\n        } else {\r\n          this.$buefy.toast.open({\r\n            message: `Se encontraron ${this.descuentosDisponibles.length} descuentos aplicables`,\r\n            type: 'is-success'\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al buscar descuentos:', error);\r\n        this.$buefy.toast.open({\r\n          message: 'Error al buscar descuentos disponibles',\r\n          type: 'is-danger'\r\n        });\r\n      } finally {\r\n        this.cargandoDescuentos = false;\r\n      }\r\n    },\r\n\r\n    async actualizarDescuentosPorCantidad(productoId) {\r\n      // Obtener el producto actualizado\r\n      const producto = this.productos.find(p => p.id === productoId);\r\n      if (!producto) return;\r\n\r\n      // Filtrar los descuentos existentes para este producto\r\n      const descuentosExistentes = this.descuentosDisponibles.filter(\r\n        d => d.productId === productoId\r\n      );\r\n\r\n      // Si no hay descuentos para este producto, no hacer nada\r\n      if (descuentosExistentes.length === 0) return;\r\n\r\n      try {\r\n        // Construir la URL con los parámetros actualizados\r\n        const url = `discounts/product/${producto.id}/calculate?quantity=${producto.cantidad}&unitPrice=${producto.precio}`;\r\n\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: url\r\n        });\r\n\r\n        if (response && response.data) {\r\n          // Normalizar la respuesta\r\n          let resultados = response.data;\r\n          if (!Array.isArray(resultados)) {\r\n            resultados = [resultados];\r\n          }\r\n\r\n          // Filtrar solo descuentos válidos y aplicar lógica según el tipo y cantidad mínima\r\n          const descuentosValidos = resultados.filter(d => {\r\n            const descuento = d.discount;\r\n\r\n            // Validar si el descuento está activo y dentro del rango de fechas\r\n            const ahora = new Date();\r\n            const inicio = new Date(descuento.startDate);\r\n            const fin = new Date(descuento.endDate);\r\n\r\n            if (!descuento.isActive || ahora < inicio || ahora > fin) {\r\n              return false;\r\n            }\r\n\r\n            // Validar cantidad mínima\r\n            if (producto.cantidad < descuento.minQuantity) {\r\n              return false;\r\n            }\r\n\r\n            // Calcular el monto de descuento según el tipo\r\n            switch (descuento.type) {\r\n              case 'FIXED_AMOUNT': {\r\n                // Asegurar que el valor del descuento sea un número\r\n                const valorFijo = parseFloat(descuento.value) || 0;\r\n                // Calcular el descuento por unidad\r\n                d.discountAmount = valorFijo * producto.cantidad;\r\n                // Calcular el precio final\r\n                d.finalPrice = (producto.precio * producto.cantidad) - d.discountAmount;\r\n                \r\n                // Validar que el precio final no sea negativo o cero\r\n                if (d.finalPrice <= 0) {\r\n                  d.discountAmount = 0;\r\n                  d.finalPrice = producto.precio * producto.cantidad;\r\n                  return false;\r\n                }\r\n                break;\r\n              }\r\n\r\n              case 'PERCENTAGE': {\r\n                // Asegurar que el valor del porcentaje sea un número\r\n                const porcentaje = parseFloat(descuento.value) || 0;\r\n                // Calcular el descuento total (precio * cantidad * porcentaje / 100)\r\n                d.discountAmount = (producto.precio * producto.cantidad * porcentaje) / 100;\r\n                // Calcular el precio final\r\n                d.finalPrice = (producto.precio * producto.cantidad) - d.discountAmount;\r\n                \r\n                // Validar que el precio final no sea negativo o cero\r\n                if (d.finalPrice <= 0) {\r\n                  d.discountAmount = 0;\r\n                  d.finalPrice = producto.precio * producto.cantidad;\r\n                  return false;\r\n                }\r\n                break;\r\n              }\r\n\r\n              case 'BUNDLE': {\r\n                if (producto.cantidad >= descuento.minQuantity) {\r\n                  // Calcular cuántos paquetes completos hay\r\n                  const bundles = Math.floor(producto.cantidad / descuento.value);\r\n                  // El descuento es el precio de los productos gratuitos\r\n                  d.discountAmount = bundles * producto.precio;\r\n                  // El precio final es el precio de los productos que se pagan\r\n                  d.finalPrice = producto.precio * (producto.cantidad - bundles);\r\n                  \r\n                  // Validar que el precio final no sea negativo o cero\r\n                  if (d.finalPrice <= 0) {\r\n                    d.discountAmount = 0;\r\n                    d.finalPrice = producto.precio * producto.cantidad;\r\n                    return false;\r\n                  }\r\n                } else {\r\n                  return false;\r\n                }\r\n                break;\r\n              }\r\n\r\n              case 'BUY_X_GET_Y': {\r\n                if (producto.cantidad >= descuento.minQuantity) {\r\n                  // Calcular cuántos productos gratuitos hay (compra X, lleva Y gratis)\r\n                  const gratis = Math.floor(producto.cantidad / (descuento.value + 1));\r\n                  // El descuento es el precio de los productos gratuitos\r\n                  d.discountAmount = gratis * producto.precio;\r\n                  // El precio final es el precio de los productos que se pagan\r\n                  d.finalPrice = producto.precio * (producto.cantidad - gratis);\r\n                  \r\n                  // Validar que el precio final no sea negativo o cero\r\n                  if (d.finalPrice <= 0) {\r\n                    d.discountAmount = 0;\r\n                    d.finalPrice = producto.precio * producto.cantidad;\r\n                    return false;\r\n                  }\r\n                } else {\r\n                  return false;\r\n                }\r\n                break;\r\n              }\r\n\r\n              case 'SEASONAL': {\r\n                // Similar al porcentaje pero puede tener lógica adicional\r\n                const valorEstacional = parseFloat(descuento.value) || 0;\r\n                d.discountAmount = (producto.precio * producto.cantidad * valorEstacional) / 100;\r\n                d.finalPrice = (producto.precio * producto.cantidad) - d.discountAmount;\r\n                \r\n                // Validar que el precio final no sea negativo o cero\r\n                if (d.finalPrice <= 0) {\r\n                  d.discountAmount = 0;\r\n                  d.finalPrice = producto.precio * producto.cantidad;\r\n                  return false;\r\n                }\r\n                break;\r\n              }\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            // Redondear los valores a 2 decimales para evitar problemas de precisión\r\n            d.discountAmount = parseFloat(d.discountAmount.toFixed(2));\r\n            d.finalPrice = parseFloat(d.finalPrice.toFixed(2));\r\n            \r\n            return true;\r\n          });\r\n\r\n          // Actualizar los descuentos existentes\r\n          const descuentosActualizados = this.descuentosDisponibles.map(d => {\r\n            if (d.productId !== productoId) return d;\r\n\r\n            // Buscar el descuento actualizado correspondiente\r\n            const descuentoActualizado = descuentosValidos.find(\r\n              nuevo => nuevo.discount.id === d.discount.id\r\n            );\r\n\r\n            if (descuentoActualizado) {\r\n              return {\r\n                ...descuentoActualizado,\r\n                productId: productoId,\r\n                productoNombre: producto.nombre,\r\n                aplicado: d.aplicado // Mantener el estado de aplicación\r\n              };\r\n            } else {\r\n              // Si el descuento ya no es válido, desactivarlo\r\n              return {\r\n                ...d,\r\n                valid: false,\r\n                aplicado: false\r\n              };\r\n            }\r\n          });\r\n\r\n          // Filtrar descuentos que ya no son válidos\r\n          this.descuentosDisponibles = descuentosActualizados.filter(\r\n            d => d.valid || d.productId !== productoId\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al actualizar descuentos:', error);\r\n      }\r\n    },\r\n\r\n    // Método para actualizar el total con los descuentos aplicados\r\n    actualizarTotalConDescuentos() {\r\n      // Calcular el subtotal (sin descuentos)\r\n      this.subtotal = this.calcularTotal();\r\n\r\n      // Reiniciar el mapa de descuentos aplicados por producto\r\n      this.descuentosAplicadosPorProducto = {};\r\n      \r\n      // Calcular el total de descuentos aplicados\r\n      this.descuentoTotal = 0;\r\n\r\n      // Agrupar descuentos por producto para evitar aplicar múltiples descuentos al mismo producto\r\n      const descuentosPorProducto = {};\r\n      \r\n      // Primero, agrupar todos los descuentos por producto\r\n      this.descuentosDisponibles.forEach(descuento => {\r\n        if (descuento.aplicado) {\r\n          if (!descuentosPorProducto[descuento.productId]) {\r\n            descuentosPorProducto[descuento.productId] = [];\r\n          }\r\n          descuentosPorProducto[descuento.productId].push(descuento);\r\n        }\r\n      });\r\n      \r\n      // Luego, para cada producto, aplicar solo el descuento más beneficioso\r\n      Object.keys(descuentosPorProducto).forEach(productoId => {\r\n        const descuentosProducto = descuentosPorProducto[productoId];\r\n        \r\n        if (descuentosProducto.length > 0) {\r\n          // Ordenar descuentos por monto de descuento (de mayor a menor)\r\n          descuentosProducto.sort((a, b) => b.discountAmount - a.discountAmount);\r\n          \r\n          // Aplicar solo el descuento más beneficioso\r\n          const mejorDescuento = descuentosProducto[0];\r\n          this.descuentoTotal += mejorDescuento.discountAmount;\r\n          \r\n          // Marcar este producto como que ya tiene un descuento aplicado\r\n          this.descuentosAplicadosPorProducto[productoId] = mejorDescuento.discount.id;\r\n          \r\n          // Desactivar los demás descuentos para este producto\r\n          descuentosProducto.slice(1).forEach(d => {\r\n            d.aplicado = false;\r\n          });\r\n        }\r\n      });\r\n\r\n      // Asegurar que el descuento total no exceda el subtotal\r\n      if (this.descuentoTotal > this.subtotal) {\r\n        this.descuentoTotal = this.subtotal;\r\n      }\r\n\r\n      // Calcular el total final (subtotal - descuentos)\r\n      this.total = Math.max(0, this.subtotal - this.descuentoTotal);\r\n      \r\n      // Redondear a 2 decimales para evitar problemas de precisión\r\n      this.total = parseFloat(this.total.toFixed(2));\r\n      this.subtotal = parseFloat(this.subtotal.toFixed(2));\r\n      this.descuentoTotal = parseFloat(this.descuentoTotal.toFixed(2));\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    '$route'() {\r\n      this.$nextTick(() => {\r\n        this.$refs.buscador.focusInput();\r\n      });\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Estilos para la sección principal */\r\n.full-width-section {\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  margin: 0;\r\n  position: relative;\r\n  overflow: hidden; /* Evitar scroll */\r\n}\r\n\r\n.top-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 1rem 0;\r\n  background-color: white;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n}\r\n\r\n.full-width-search {\r\n  flex: 1;\r\n  min-width: 300px;\r\n  margin-right: 2rem;\r\n}\r\n\r\n.tourist-switch {\r\n  white-space: nowrap;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.main-content {\r\n  width: 100%;\r\n  position: relative;\r\n}\r\n\r\n.notification.is-primary-bg {\r\n  background-color: #f5f5f5;\r\n  border-radius: 6px;\r\n  padding: 1.25rem;\r\n}\r\n\r\n.level-item .button {\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.sticky-card {\r\n  position: sticky;\r\n  top: 20px;\r\n}\r\n\r\n/* Estilos para el estado vacío alineado a la izquierda como en la imagen */\r\n.epic-empty-state {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  height: calc(100vh - 120px); /* Altura ajustada para evitar scroll */\r\n  width: 100%;\r\n  background: #0077c2;\r\n  overflow: hidden;\r\n}\r\n\r\n.epic-empty-content {\r\n  padding: 3rem;\r\n  width: 100%;\r\n}\r\n\r\n.empty-message {\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 2rem;\r\n}\r\n\r\n.cart-icon {\r\n  font-size: 4rem;\r\n  margin-right: 2rem;\r\n  color: white;\r\n}\r\n\r\n.empty-text {\r\n  color: white;\r\n}\r\n\r\n.empty-title {\r\n  font-size: 3.5rem;\r\n  font-weight: 700;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.empty-subtitle {\r\n  font-size: 2rem;\r\n  color: rgba(255, 255, 255, 0.9);\r\n  line-height: 1.5;\r\n}\r\n\r\n/* Estilos para el contenido de productos */\r\n.product-content {\r\n  max-height: calc(100vh - 120px);\r\n  overflow-y: auto;\r\n}\r\n\r\n/* Estilos para la sección de descuentos */\r\n.discounts-section {\r\n  margin-top: 1rem;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .search-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .tourist-switch {\r\n    margin-left: 0;\r\n    margin-top: 0.75rem;\r\n  }\r\n\r\n  .level-item .button {\r\n    font-size: 0.8rem;\r\n    padding: 0.5em 0.75em;\r\n  }\r\n\r\n  .level-item .button .icon {\r\n    margin-right: 0.25em;\r\n  }\r\n\r\n  p[style=\"font-size:3em\"] {\r\n    font-size: 2em !important;\r\n  }\r\n  \r\n  .sticky-card {\r\n    position: relative;\r\n    top: 0;\r\n  }\r\n  \r\n  .cart-icon {\r\n    font-size: 2.5rem;\r\n    margin-right: 1rem;\r\n  }\r\n  \r\n  .empty-title {\r\n    font-size: 2rem;\r\n  }\r\n  \r\n  .empty-subtitle {\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  .search-toggle {\r\n  margin-right: 15px;\r\n  white-space: nowrap;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-toggle .switch {\r\n  margin-right: 8px;\r\n  font-size: 100px;\r\n}\r\n\r\n.search-toggle >>> .switch span {\r\n  font-size: 1.2rem; /* Ajusta el tamaño a tu necesidad (ej: 1.2rem, 16px, etc.) */\r\n  font-weight: bold; /* Opcional: si quieres negrita */\r\n}\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}