{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport DialogoMarcas from './DialogoMarcas';\nimport apiRequest from '../../Servicios/HttpService';\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\nexport default {\n  name: \"MarcasComponent\",\n  components: {\n    DialogoMarcas\n  },\n  data: () => ({\n    isAdmin: false,\n    isActive: true,\n    cargando: false,\n    marcas: [],\n    proveedores: [],\n    mostrarDialogoMarcas: false,\n    tituloModal: \"\",\n    nombreMarca: \"\",\n    idMarca: \"\",\n    proveedorId: null\n  }),\n  mounted() {\n    this.obtenerProveedores();\n    this.obtenerMarcas();\n    this.isRole();\n  },\n  methods: {\n    isRole() {\n      const {\n        rol\n      } = AyudanteSesion.obtenerDatosSesion();\n      this.isAdmin = rol === 'Admin';\n    },\n    async handleSwitchChange() {\n      this.obtenerMarcas();\n    },\n    activarMarca(marca) {\n      this.$buefy.dialog.confirm({\n        title: 'Activar marca',\n        message: `¿Seguro que quieres reactivar la marca <b>${marca.brandName}</b>?`,\n        confirmText: 'Sí, activar',\n        cancelText: 'Cancelar',\n        type: 'is-success',\n        hasIcon: true,\n        onConfirm: () => {\n          this.cargando = true;\n          apiRequest({\n            method: 'POST',\n            path: `brands/active/${marca.id}`\n          }).then(resultado => {\n            if (resultado) {\n              this.$buefy.toast.open({\n                type: 'is-success',\n                message: 'Marca reactivada correctamente'\n              });\n              this.obtenerMarcas(); // Refrescar la lista\n            }\n          }).catch(() => {\n            this.$buefy.toast.open({\n              type: 'is-danger',\n              message: 'Error al reactivar la marca'\n            });\n          }).finally(() => {\n            this.cargando = false;\n          });\n        }\n      });\n    },\n    eliminar(marca) {\n      this.$buefy.dialog.confirm({\n        title: 'Eliminar marca',\n        message: 'Seguro que quieres <b>eliminar</b> la marca? Esta acción no se puede revertir.',\n        confirmText: 'Sí, eliminar',\n        cancelText: 'Cancelar',\n        type: 'is-danger',\n        hasIcon: true,\n        onConfirm: () => {\n          this.cargando = true;\n          apiRequest({\n            method: 'DELETE',\n            path: `brands/${marca.id}`\n          }).then(resultado => {\n            if (!resultado) {\n              this.$buefy.toast.open('Error al eliminar');\n              this.cargando = false;\n              return;\n            }\n            if (resultado) {\n              this.cargando = false;\n              this.$buefy.toast.open({\n                type: 'is-info',\n                message: 'Marca eliminada.'\n              });\n              this.obtenerMarcas();\n            }\n          });\n        }\n      });\n    },\n    editar(marca) {\n      this.tituloModal = \"Editar\";\n      this.mostrarDialogoMarcas = true, this.idMarca = marca.id;\n      this.nombreMarca = marca.brandName;\n      this.proveedorId = marca.provider?.id;\n    },\n    onCerrarDialogo() {\n      this.mostrarDialogoMarcas = false;\n      this.nombreMarca = \"\";\n      this.proveedorId = null;\n    },\n    onRegistrar(datos) {\n      this.cargando = true;\n      apiRequest({\n        method: `${this.tituloModal == 'Agregar' ? 'POST' : 'PATCH'}`,\n        path: `${this.tituloModal == 'Agregar' ? 'brands' : `brands/${this.idMarca}`}`,\n        data: {\n          brandName: datos.nombre,\n          providerId: datos.providerId\n        }\n      }).then(registrado => {\n        if (registrado === 'existe') {\n          this.$buefy.toast.open({\n            type: 'is-primary',\n            message: 'La marca ' + datos.nombre + ' ya existe, selecciona otra.'\n          });\n          this.cargando = false;\n          return;\n        }\n        if (registrado) {\n          this.cargando = false;\n          this.$buefy.toast.open({\n            type: 'is-info',\n            message: 'Información de marca registrada con éxito.'\n          });\n          this.obtenerMarcas();\n          this.nombreMarca = \"\";\n          this.mostrarDialogoMarcas = false;\n        }\n      });\n    },\n    agregarMarca() {\n      this.tituloModal = \"Agregar\";\n      this.obtenerProveedores();\n      this.mostrarDialogoMarcas = true;\n      this.nombreMarca = \"\";\n      this.proveedorId = null;\n    },\n    obtenerMarcas() {\n      this.cargando = true;\n      const endpoint = this.isActive ? 'brands' : 'brands/deleted';\n      apiRequest({\n        method: 'GET',\n        path: endpoint\n      }).then(response => {\n        this.marcas = response.data || [];\n        this.cargando = false;\n      }).catch(error => {\n        console.error(\"Error al obtener marcas:\", error);\n        this.cargando = false;\n        this.$buefy.toast.open({\n          type: 'is-danger',\n          message: 'Error al cargar las marcas'\n        });\n      });\n    },\n    obtenerProveedores() {\n      apiRequest({\n        method: 'GET',\n        path: 'providers'\n      }).then(response => this.proveedores = response.data ?? []);\n    },\n    getProviderName(providerId) {\n      const proveedor = this.proveedores.find(p => p.id === providerId);\n      return proveedor?.name ?? 'Sin Proveedor';\n    }\n  }\n};","map":{"version":3,"names":["DialogoMarcas","apiRequest","AyudanteSesion","name","components","data","isAdmin","isActive","cargando","marcas","proveedores","mostrarDialogoMarcas","tituloModal","nombreMarca","idMarca","proveedorId","mounted","obtenerProveedores","obtenerMarcas","isRole","methods","rol","obtenerDatosSesion","handleSwitchChange","activarMarca","marca","$buefy","dialog","confirm","title","message","brandName","confirmText","cancelText","type","hasIcon","onConfirm","method","path","id","then","resultado","toast","open","catch","finally","eliminar","editar","provider","onCerrarDialogo","onRegistrar","datos","nombre","providerId","registrado","agregarMarca","endpoint","response","error","console","getProviderName","proveedor","find","p"],"sources":["src/components/MarcasCategoriasProveedores/MarcasComponent.vue"],"sourcesContent":["<template>\r\n\r\n    <section class=\"section\">\r\n        <b-switch v-if=\"isAdmin\" v-model=\"isActive\" @input=\"handleSwitchChange\" :disabled=\"!isAdmin\">\r\n            {{ isActive ? 'Marcas activas' : 'Marcas inactivas' }}\r\n        </b-switch>\r\n        <div class=\"container\">\r\n            <div class=\"level\">\r\n                <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                        <h1 class=\"title\">Gestión de Marcas</h1>\r\n                    </div>\r\n                </div>\r\n                <div class=\"level-right\">\r\n                    <div class=\"level-item\">\r\n                        <b-button v-if=\"isActive\" type=\"is-primary\" size=\"is-medium\" class=\"is-rounded\" icon-left=\"plus\"\r\n                            @click=\"agregarMarca\">\r\n                            Agregar Marca\r\n                        </b-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <b-table paginated :data=\"marcas\">\r\n            <b-table-column field=\"provider\" label=\"Proveedor\" sortable searchable v-slot=\"props\">\r\n                {{ props.row.provider.name }}\r\n            </b-table-column>\r\n            <b-table-column field=\"brandName\" label=\"Marca\" sortable searchable v-slot=\"props\">\r\n                {{ props.row.brandName }}\r\n            </b-table-column>\r\n            <b-table-column field=\"nombreMarca\" label=\"Productos\" sortable v-slot=\"props\">\r\n                <b-tag  size=\"is-medium\">\r\n                    {{ props.row.products.length }}\r\n                </b-tag>\r\n            </b-table-column>\r\n            <b-table-column field=\"acciones\" label=\"Acciones\" centered v-slot=\"props\">\r\n                <div class=\"buttons is-centered\">\r\n\r\n\r\n                    <b-button v-if=\"isActive\" class=\"btn-link\" icon-left=\"delete\" size=\"is-small\"\r\n                        @click=\"eliminar(props.row)\">Eliminar</b-button>\r\n\r\n                    <b-button \r\n                    class=\"btn-primary\" \r\n                    icon-left=\"pen\" \r\n                    size=\"is-small\"\r\n                    @click=\"!isActive ? activarMarca(props.row) : editar(props.row)\">\r\n                       {{ !isActive\r\n                        ? 'Activar' : 'Editar'}}\r\n                    </b-button>\r\n                </div>\r\n            </b-table-column>\r\n\r\n            <template #empty>\r\n                <div class=\"has-text-centered p-4\">\r\n                    <b-icon icon=\"tag-off\" size=\"is-large\"></b-icon>\r\n                    <p class=\"is-size-5 mt-2\">No hay marcas registradas</p>\r\n                </div>\r\n            </template>\r\n        </b-table>\r\n\r\n        <b-modal v-model=\"mostrarDialogoMarcas\" has-modal-card trap-focus :destroy-on-hide=\"false\" aria-role=\"dialog\"\r\n            aria-label=\"Modal\" close-button-aria-label=\"Close\" aria-modal>\r\n            <dialogo-marcas :titulo=\"tituloModal\" :nombre=\"nombreMarca\" :provider-id=\"proveedorId\"\r\n                :providers=\"proveedores\" @close=\"onCerrarDialogo\" @registrar=\"onRegistrar\" v-if=\"mostrarDialogoMarcas\">\r\n            </dialogo-marcas>\r\n        </b-modal>\r\n\r\n        <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n    </section>\r\n</template>\r\n<script>\r\nimport DialogoMarcas from './DialogoMarcas'\r\nimport apiRequest from '../../Servicios/HttpService';\r\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\r\n\r\nexport default {\r\n    name: \"MarcasComponent\",\r\n    components: { DialogoMarcas },\r\n\r\n    data: () => ({\r\n        isAdmin: false,\r\n        isActive: true, \r\n        cargando: false,\r\n        marcas: [],\r\n        proveedores: [],\r\n        mostrarDialogoMarcas: false,\r\n        tituloModal: \"\",\r\n        nombreMarca: \"\",\r\n        idMarca: \"\",\r\n        proveedorId: null,\r\n    }),\r\n\r\n    mounted() {\r\n        this.obtenerProveedores()\r\n        this.obtenerMarcas()\r\n        this.isRole()\r\n    },\r\n\r\n    methods: {\r\n\r\n        \r\n        isRole (){\r\n         const {rol} = AyudanteSesion.obtenerDatosSesion()\r\n         this.isAdmin = rol === 'Admin'\r\n\r\n        },\r\n        async handleSwitchChange() {\r\n            this.obtenerMarcas();\r\n        },\r\n        activarMarca(marca) {\r\n            this.$buefy.dialog.confirm({\r\n                title: 'Activar marca',\r\n                message: `¿Seguro que quieres reactivar la marca <b>${marca.brandName}</b>?`,\r\n                confirmText: 'Sí, activar',\r\n                cancelText: 'Cancelar',\r\n                type: 'is-success',\r\n                hasIcon: true,\r\n                onConfirm: () => {\r\n                    this.cargando = true\r\n                    apiRequest({\r\n                        method: 'POST',\r\n                        path: `brands/active/${marca.id}` \r\n                    })\r\n                        .then(resultado => {\r\n                            if (resultado) {\r\n                                this.$buefy.toast.open({\r\n                                    type: 'is-success',\r\n                                    message: 'Marca reactivada correctamente'\r\n                                })\r\n                                this.obtenerMarcas() // Refrescar la lista\r\n                            }\r\n                        })\r\n                        .catch(() => {\r\n                            this.$buefy.toast.open({\r\n                                type: 'is-danger',\r\n                                message: 'Error al reactivar la marca'\r\n                            })\r\n                        })\r\n                        .finally(() => {\r\n                            this.cargando = false\r\n                        })\r\n                }\r\n            })\r\n        },\r\n\r\n\r\n        eliminar(marca) {\r\n            this.$buefy.dialog.confirm({\r\n                title: 'Eliminar marca',\r\n                message: 'Seguro que quieres <b>eliminar</b> la marca? Esta acción no se puede revertir.',\r\n                confirmText: 'Sí, eliminar',\r\n                cancelText: 'Cancelar',\r\n                type: 'is-danger',\r\n                hasIcon: true,\r\n                onConfirm: () => {\r\n                    this.cargando = true\r\n\r\n                    apiRequest({\r\n                        method: 'DELETE',\r\n                        path: `brands/${marca.id}`\r\n                    })\r\n                        .then(resultado => {\r\n                            if (!resultado) {\r\n                                this.$buefy.toast.open('Error al eliminar')\r\n                                this.cargando = false\r\n                                return\r\n                            }\r\n\r\n                            if (resultado) {\r\n                                this.cargando = false\r\n                                this.$buefy.toast.open({\r\n                                    type: 'is-info',\r\n                                    message: 'Marca eliminada.'\r\n                                })\r\n                                this.obtenerMarcas()\r\n                            }\r\n                        })\r\n                }\r\n            })\r\n        },\r\n\r\n        editar(marca) {\r\n            this.tituloModal = \"Editar\"\r\n            this.mostrarDialogoMarcas = true,\r\n                this.idMarca = marca.id\r\n            this.nombreMarca = marca.brandName\r\n            this.proveedorId = marca.provider?.id\r\n        },\r\n\r\n        onCerrarDialogo() {\r\n            this.mostrarDialogoMarcas = false\r\n            this.nombreMarca = \"\"\r\n            this.proveedorId = null\r\n        },\r\n\r\n        onRegistrar(datos) {\r\n            this.cargando = true\r\n\r\n            apiRequest({\r\n                method: `${this.tituloModal == 'Agregar' ? 'POST' : 'PATCH'}`,\r\n                path: `${this.tituloModal == 'Agregar' ? 'brands' : `brands/${this.idMarca}`}`,\r\n                data: {\r\n                    brandName: datos.nombre,\r\n                    providerId: datos.providerId\r\n                }\r\n            })\r\n                .then(registrado => {\r\n                    if (registrado === 'existe') {\r\n                        this.$buefy.toast.open({\r\n                            type: 'is-primary',\r\n                            message: 'La marca ' + datos.nombre + ' ya existe, selecciona otra.'\r\n                        })\r\n                        this.cargando = false\r\n                        return\r\n                    }\r\n\r\n                    if (registrado) {\r\n                        this.cargando = false\r\n                        this.$buefy.toast.open({\r\n                            type: 'is-info',\r\n                            message: 'Información de marca registrada con éxito.'\r\n                        })\r\n                        this.obtenerMarcas()\r\n                        this.nombreMarca = \"\"\r\n                        this.mostrarDialogoMarcas = false\r\n                    }\r\n                })\r\n        },\r\n\r\n        agregarMarca() {\r\n            this.tituloModal = \"Agregar\";\r\n            this.obtenerProveedores()\r\n            this.mostrarDialogoMarcas = true;\r\n            this.nombreMarca = \"\";\r\n            this.proveedorId = null;\r\n        },\r\n\r\n        obtenerMarcas() {\r\n            this.cargando = true\r\n            const endpoint = this.isActive ? 'brands' : 'brands/deleted';\r\n\r\n            apiRequest({\r\n                method: 'GET',\r\n                path: endpoint\r\n            })\r\n                .then(response => {\r\n                    this.marcas = response.data || [];\r\n                    this.cargando = false;\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"Error al obtener marcas:\", error);\r\n                    this.cargando = false;\r\n                    this.$buefy.toast.open({\r\n                        type: 'is-danger',\r\n                        message: 'Error al cargar las marcas'\r\n                    });\r\n                });\r\n        },\r\n\r\n        obtenerProveedores() {\r\n            apiRequest({ method: 'GET', path: 'providers' })\r\n                .then(response => this.proveedores = response.data ?? [] )\r\n        },\r\n\r\n        getProviderName(providerId) {\r\n            const proveedor = this.proveedores.find(p => p.id === providerId);\r\n            return proveedor?.name ?? 'Sin Proveedor'\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}