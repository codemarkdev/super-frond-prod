{"ast":null,"code":"import HttpService from '@/Servicios/HttpService';\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\nexport default {\n  name: \"PerfilComponent\",\n  data() {\n    return {\n      cashInHand: null,\n      cargando: false,\n      showConfirmModal: true,\n      cierreInfo: null,\n      userData: {\n        username: '',\n        name: '',\n        phone: ''\n      },\n      fechaActual: {\n        fecha: '',\n        hora: ''\n      },\n      totalVentasHoy: 0,\n      totalCuentasPorPagar: 0,\n      cajaAbierta: false\n    };\n  },\n  computed: {\n    isValidAmount() {\n      return this.cashInHand !== null && this.cashInHand >= 0 && !isNaN(this.cashInHand);\n    }\n  },\n  mounted() {\n    this.cargarDatosUsuario();\n    this.actualizarFecha();\n    this.obtenerTotalVentasHoy();\n    this.obtenerTotalCuentasPorPagar();\n    setInterval(this.actualizarFecha, 60000); // Actualizar cada minuto\n  },\n  methods: {\n    formatNumber(value) {\n      if (value === null || value === undefined) return '0.00';\n      return Number(value).toLocaleString('es-MX', {\n        style: 'currency',\n        currency: 'MXN'\n      });\n    },\n    formatDate(dateString) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('es-MX', options);\n    },\n    async cargarDatosUsuario() {\n      this.cargando = true;\n      try {\n        const sesion = AyudanteSesion.obtenerDatosSesion();\n        if (!sesion || !sesion.id) {\n          throw new Error('ID de usuario no encontrado');\n        }\n        const response = await HttpService({\n          method: 'GET',\n          path: `users/${sesion.id}`\n        });\n        if (response.status === 200) {\n          const userData = response.data;\n          this.userData = {\n            name: userData.name || 'N/A',\n            username: userData.username || 'N/A',\n            phone: userData.phone || 'N/A'\n          };\n        } else {\n          throw new Error('Error al obtener datos del usuario');\n        }\n      } catch (error) {\n        console.error('Error al cargar datos del usuario:', error);\n        this.mostrarError('Error al cargar datos del usuario');\n        this.userData = {\n          name: 'N/A',\n          username: 'N/A',\n          phone: 'N/A'\n        };\n      } finally {\n        this.cargando = false;\n      }\n    },\n    actualizarFecha() {\n      const ahora = new Date();\n      this.fechaActual.fecha = ahora.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      this.fechaActual.hora = ahora.toLocaleTimeString('es-MX', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    async obtenerTotalVentasHoy() {\n      try {\n        const response = await HttpService({\n          method: 'GET',\n          path: 'sales/today-total'\n        });\n        if (response.status === 200 && response.data && typeof response.data.total === 'number') {\n          this.totalVentasHoy = response.data.total;\n        } else {\n          console.warn('Respuesta inesperada al obtener el total de ventas:', response);\n          this.totalVentasHoy = 0;\n        }\n      } catch (error) {\n        console.error('Error al obtener el total de ventas de hoy:', error);\n        // Mostrar mensaje más amigable cuando el endpoint no existe\n        if (error.response?.status === 404) {\n          console.warn('El endpoint de ventas no está disponible');\n        } else {\n          this.mostrarError('No se pudo cargar el total de ventas de hoy');\n        }\n        this.totalVentasHoy = 0;\n      }\n    },\n    async obtenerTotalCuentasPorPagar() {\n      try {\n        const response = await HttpService({\n          method: 'GET',\n          path: 'accounts-payable/total'\n        });\n        if (response.status === 200 && response.data && typeof response.data.total === 'number') {\n          this.totalCuentasPorPagar = response.data.total;\n        } else {\n          console.warn('Respuesta inesperada al obtener el total de cuentas por pagar:', response);\n          this.totalCuentasPorPagar = 0;\n        }\n      } catch (error) {\n        console.error('Error al obtener el total de cuentas por pagar:', error);\n        // Mostrar mensaje más amigable cuando el endpoint no existe\n        if (error.response?.status === 404) {\n          console.warn('El endpoint de cuentas por pagar no está disponible');\n        } else {\n          this.mostrarError('No se pudo cargar el total de cuentas por pagar');\n        }\n        this.totalCuentasPorPagar = 0;\n      }\n    },\n    cerrarCaja() {\n      if (!this.cajaAbierta) {\n        this.$buefy.toast.open({\n          message: 'La caja no está abierta',\n          type: 'is-warning'\n        });\n        return;\n      }\n      if (!this.isValidAmount) {\n        this.$buefy.toast.open({\n          message: 'Por favor ingrese un monto válido',\n          type: 'is-warning'\n        });\n        return;\n      }\n      this.showConfirmModal = true;\n    },\n    async confirmarCierre() {\n      this.cargando = true;\n      try {\n        const {\n          id: userId\n        } = AyudanteSesion.obtenerDatosSesion();\n        if (!userId) {\n          throw new Error('ID de usuario no encontrado');\n        }\n        const response = await HttpService({\n          method: 'POST',\n          path: `cash-register/close/${userId}`,\n          data: {\n            cashInHand: Number(this.cashInHand)\n          }\n        });\n        if (response.status === 201) {\n          this.cierreInfo = response.data;\n          this.$buefy.toast.open({\n            message: 'Caja cerrada exitosamente',\n            type: 'is-success',\n            duration: 5000\n          });\n          this.cashInHand = null;\n          this.showConfirmModal = false;\n          this.cajaAbierta = false;\n        } else {\n          throw new Error('Error al cerrar la caja');\n        }\n      } catch (error) {\n        console.error('Error al cerrar la caja:', error);\n        this.$buefy.toast.open({\n          message: error.response?.data?.message || 'Error al cerrar la caja. Por favor intente nuevamente.',\n          type: 'is-danger',\n          duration: 5000\n        });\n      } finally {\n        this.cargando = false;\n        this.showConfirmModal = false;\n      }\n    },\n    mostrarError(mensaje) {\n      this.$buefy.toast.open({\n        message: mensaje,\n        type: 'is-danger',\n        duration: 5000\n      });\n    },\n    async abrirCaja() {\n      if (!this.isValidAmount) {\n        this.mostrarError('Por favor ingrese un monto válido');\n        return;\n      }\n      this.cargando = true;\n      try {\n        const {\n          id: userId\n        } = AyudanteSesion.obtenerDatosSesion();\n        if (!userId) {\n          throw new Error('ID de usuario no encontrado');\n        }\n        const response = await HttpService({\n          method: 'POST',\n          path: `cash-register/open/${userId}`,\n          data: {\n            initialCash: this.cashInHand\n          }\n        });\n        if (response.status === 201) {\n          this.$buefy.toast.open({\n            message: 'Caja abierta exitosamente',\n            type: 'is-success',\n            duration: 5000\n          });\n          this.cajaAbierta = true;\n\n          // Intentar obtener los totales, pero no bloquear si fallan\n          try {\n            await Promise.all([this.obtenerTotalVentasHoy(), this.obtenerTotalCuentasPorPagar()]);\n          } catch (error) {\n            console.warn('No se pudieron actualizar los totales:', error);\n          }\n        } else {\n          throw new Error('Error al abrir la caja');\n        }\n      } catch (error) {\n        console.error('Error al abrir la caja:', error);\n        this.mostrarError(error.response?.data?.message || 'Error al abrir la caja. Por favor intente nuevamente.');\n      } finally {\n        this.cargando = false;\n        this.cashInHand = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["HttpService","AyudanteSesion","name","data","cashInHand","cargando","showConfirmModal","cierreInfo","userData","username","phone","fechaActual","fecha","hora","totalVentasHoy","totalCuentasPorPagar","cajaAbierta","computed","isValidAmount","isNaN","mounted","cargarDatosUsuario","actualizarFecha","obtenerTotalVentasHoy","obtenerTotalCuentasPorPagar","setInterval","methods","formatNumber","value","undefined","Number","toLocaleString","style","currency","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","sesion","obtenerDatosSesion","id","Error","response","method","path","status","error","console","mostrarError","ahora","toLocaleTimeString","total","warn","cerrarCaja","$buefy","toast","open","message","type","confirmarCierre","userId","duration","mensaje","abrirCaja","initialCash","Promise","all"],"sources":["src/components/Usuarios/PerfilComponent.vue"],"sourcesContent":["<template>\r\n  <section class=\"section\">\r\n    <div class=\"container\">\r\n      <div class=\"card\">\r\n        <div class=\"card-content\">\r\n          <h1 class=\"title has-text-centered\">\r\n            <span class=\"icon-text\">\r\n              <span class=\"icon\">\r\n                <i class=\"mdi mdi-cash-register\"></i>\r\n              </span>\r\n              <span>Cierre de Caja</span>\r\n            </span>\r\n          </h1>\r\n          \r\n          <div class=\"box has-background-light\">\r\n            <div class=\"columns is-multiline\">\r\n              <div class=\"column is-full\">\r\n                <div class=\"level\">\r\n                  <div class=\"level-left\">\r\n                    <div class=\"level-item\">\r\n                      <div class=\"user-info\" v-if=\"!cargando\">\r\n                        <div class=\"columns is-mobile is-multiline\">\r\n                          <div class=\"column is-full\">\r\n                            <p class=\"title is-4\">\r\n                              <span class=\"icon-text\">\r\n                                <span class=\"icon\">\r\n                                  <i class=\"mdi mdi-account-circle\"></i>\r\n                                </span>\r\n                                <span>{{ userData.name }}</span>\r\n                              </span>\r\n                            </p>\r\n                          </div>\r\n                          <div class=\"column is-half\">\r\n                            <p class=\"subtitle is-6\">\r\n                              <span class=\"icon-text\">\r\n                                <span class=\"icon\">\r\n                                  <i class=\"mdi mdi-at\"></i>\r\n                                </span>\r\n                                <span>{{ userData.username }}</span>\r\n                              </span>\r\n                            </p>\r\n                          </div>\r\n                          <div class=\"column is-half\">\r\n                            <p class=\"subtitle is-6\">\r\n                              <span class=\"icon-text\">\r\n                                <span class=\"icon\">\r\n                                  <i class=\"mdi mdi-phone\"></i>\r\n                                </span>\r\n                                <span>{{ userData.phone }}</span>\r\n                              </span>\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <p v-else class=\"is-loading\">Cargando datos del usuario...</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n  \r\n              <div class=\"column is-full mt-3\">\r\n                <div class=\"date-info\">\r\n                  <p class=\"is-6\">\r\n                    <span class=\"icon-text\">\r\n                      <span class=\"icon\">\r\n                        <i class=\"mdi mdi-calendar\"></i>\r\n                      </span>\r\n                      <span class=\"has-text-weight-bold\">{{ fechaActual.fecha }}</span>\r\n                    </span>\r\n                  </p>\r\n                  <p class=\"is-6\">\r\n                    <span class=\"icon-text\">\r\n                      <span class=\"icon\">\r\n                        <i class=\"mdi mdi-clock-outline\"></i>\r\n                      </span>\r\n                      <span>{{ fechaActual.hora }}</span>\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n  \r\n        \r\n  \r\n              <div class=\"column is-full\">\r\n                <div class=\"field\">\r\n                  <label class=\"label\">{{ cajaAbierta ? 'Efectivo en Mano' : 'Monto Inicial' }}</label>\r\n                  <div class=\"control has-icons-left has-icons-right\">\r\n                    <input \r\n                      class=\"input is-medium\"\r\n                      :class=\"{ 'is-danger': !isValidAmount && cashInHand !== null }\"\r\n                      type=\"number\" \r\n                      v-model.number=\"cashInHand\"\r\n                      placeholder=\"Ingrese el monto en efectivo\"\r\n                      min=\"0\"\r\n                      step=\"0.01\"\r\n                    >\r\n                    <span class=\"icon is-small is-left\">\r\n                      <i class=\"mdi mdi-cash\"></i>\r\n                    </span>\r\n                    <span class=\"icon is-small is-right\" v-if=\"isValidAmount\">\r\n                      <i class=\"mdi mdi-check\"></i>\r\n                    </span>\r\n                  </div>\r\n                  <p class=\"help is-danger\" v-if=\"!isValidAmount && cashInHand !== null\">\r\n                    Por favor, ingrese un monto válido\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"column is-full\">\r\n                <div class=\"field\">\r\n                  <div class=\"control\">\r\n                    <button \r\n                      v-if=\"!cajaAbierta\"\r\n                      class=\"button is-primary is-fullwidth is-medium\"\r\n                      :class=\"{ 'is-loading': cargando }\"\r\n                      @click=\"abrirCaja\"\r\n                      :disabled=\"!isValidAmount || cargando\"\r\n                    >\r\n                      <span class=\"icon\">\r\n                        <i class=\"mdi mdi-cash-register\"></i>\r\n                      </span>\r\n                      <span>Abrir Caja</span>\r\n                    </button>\r\n                    <button \r\n                      v-else\r\n                      class=\"button is-danger is-fullwidth is-medium\"\r\n                      :class=\"{ 'is-loading': cargando }\"\r\n                      @click=\"cerrarCaja\"\r\n                      :disabled=\"!isValidAmount || cargando\"\r\n                    >\r\n                      <span class=\"icon\">\r\n                        <i class=\"mdi mdi-cash-register\"></i>\r\n                      </span>\r\n                      <span>Cerrar Caja</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n  \r\n          <div class=\"notification is-info is-light mt-4\">\r\n            <p class=\"has-text-centered\">\r\n              <span class=\"icon\">\r\n                <i class=\"mdi mdi-information\"></i>\r\n              </span>\r\n              Asegúrese de contar correctamente el efectivo antes de cerrar la caja.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <b-modal v-model=\"showConfirmModal\" \r\n               has-modal-card\r\n               trap-focus\r\n               :destroy-on-hide=\"false\"\r\n               aria-role=\"dialog\"\r\n               aria-modal>\r\n        <div class=\"modal-card\">\r\n          <header class=\"modal-card-head has-background-primary\">\r\n            <p class=\"modal-card-title has-text-white\">Confirmar Cierre de Caja</p>\r\n          </header>\r\n          <section class=\"modal-card-body\">\r\n            <div class=\"content\">\r\n              <h3>Resumen del Cierre:</h3>\r\n              <p><strong>Efectivo en Mano:</strong> {{ formatNumber(cashInHand) }}</p>\r\n              <p class=\"has-text-danger has-text-weight-bold\">Esta acción no se puede deshacer.</p>\r\n            </div>\r\n          </section>\r\n          <footer class=\"modal-card-foot\">\r\n            <button class=\"button is-primary\" \r\n                    :class=\"{ 'is-loading': cargando }\"\r\n                    @click=\"confirmarCierre\">\r\n              Confirmar\r\n            </button>\r\n            <button class=\"button\" \r\n                    @click=\"showConfirmModal = false\"\r\n                    :disabled=\"cargando\">\r\n              Cancelar\r\n            </button>\r\n          </footer>\r\n        </div>\r\n      </b-modal>\r\n  \r\n      <div v-if=\"cierreInfo\" class=\"card mt-6\">\r\n        <header class=\"card-header\">\r\n          <p class=\"card-header-title\">\r\n            Resumen del Cierre de Caja\r\n          </p>\r\n        </header>\r\n        <div class=\"card-content\">\r\n          <div class=\"content\">\r\n            <div class=\"columns is-multiline\">\r\n              <div class=\"column is-half\">\r\n                <p><strong>Fecha:</strong> {{ formatDate(cierreInfo.date) }}</p>\r\n              </div>\r\n              <div class=\"column is-half\">\r\n                <p><strong>Efectivo en Mano:</strong> {{ formatNumber(cierreInfo.cashInHand) }}</p>\r\n              </div>\r\n              <div class=\"column is-half\">\r\n                <p><strong>Total Ventas:</strong> {{ formatNumber(cierreInfo.totalSales) }}</p>\r\n              </div>\r\n              <div class=\"column is-half\">\r\n                <p><strong>Total Pagos:</strong> {{ formatNumber(cierreInfo.totalPayments) }}</p>\r\n              </div>\r\n              <div class=\"column is-half\">\r\n                <p><strong>Efectivo Esperado:</strong> {{ formatNumber(cierreInfo.expectedCash) }}</p>\r\n              </div>\r\n              <div class=\"column is-half\">\r\n                <p><strong>Discrepancia:</strong> \r\n                  <span :class=\"{'has-text-danger': cierreInfo.discrepancy < 0, 'has-text-success': cierreInfo.discrepancy > 0}\">\r\n                    {{ formatNumber(cierreInfo.discrepancy) }}\r\n                  </span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n  </template>\r\n  \r\n  <script>\r\n  import HttpService from '@/Servicios/HttpService'\r\n  import AyudanteSesion from '@/Servicios/AyudanteSesion'\r\n  \r\n  export default {\r\n    name: \"PerfilComponent\",\r\n  \r\n    data() {\r\n      return {\r\n        cashInHand: null,\r\n        cargando: false,\r\n        showConfirmModal: true,\r\n        cierreInfo: null,\r\n        userData: {\r\n          username: '',\r\n          name: '',\r\n          phone: ''\r\n        },\r\n        fechaActual: {\r\n          fecha: '',\r\n          hora: ''\r\n        },\r\n        totalVentasHoy: 0,\r\n        totalCuentasPorPagar: 0,\r\n        cajaAbierta: false,\r\n      }\r\n    },\r\n  \r\n    computed: {\r\n      isValidAmount() {\r\n        return this.cashInHand !== null && \r\n               this.cashInHand >= 0 && \r\n               !isNaN(this.cashInHand)\r\n      }\r\n    },\r\n  \r\n    mounted() {\r\n      this.cargarDatosUsuario();\r\n      this.actualizarFecha();\r\n      this.obtenerTotalVentasHoy();\r\n      this.obtenerTotalCuentasPorPagar();\r\n      setInterval(this.actualizarFecha, 60000); // Actualizar cada minuto\r\n    },\r\n  \r\n    methods: {\r\n      formatNumber(value) {\r\n        if (value === null || value === undefined) return '0.00'\r\n        return Number(value).toLocaleString('es-MX', {\r\n          style: 'currency',\r\n          currency: 'MXN'\r\n        })\r\n      },\r\n  \r\n      formatDate(dateString) {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n        return new Date(dateString).toLocaleDateString('es-MX', options);\r\n      },\r\n  \r\n      async cargarDatosUsuario() {\r\n        this.cargando = true;\r\n        try {\r\n          const sesion = AyudanteSesion.obtenerDatosSesion();\r\n          if (!sesion || !sesion.id) {\r\n            throw new Error('ID de usuario no encontrado');\r\n          }\r\n  \r\n          const response = await HttpService({\r\n            method: 'GET',\r\n            path: `users/${sesion.id}`\r\n          });\r\n  \r\n          if (response.status === 200) {\r\n            const userData = response.data;\r\n            this.userData = {\r\n              name: userData.name || 'N/A',\r\n              username: userData.username || 'N/A',\r\n              phone: userData.phone || 'N/A'\r\n            };\r\n          } else {\r\n            throw new Error('Error al obtener datos del usuario');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al cargar datos del usuario:', error);\r\n          this.mostrarError('Error al cargar datos del usuario');\r\n          this.userData = { name: 'N/A', username: 'N/A', phone: 'N/A' };\r\n        } finally {\r\n          this.cargando = false;\r\n        }\r\n      },\r\n  \r\n      actualizarFecha() {\r\n        const ahora = new Date();\r\n        this.fechaActual.fecha = ahora.toLocaleDateString('es-MX', { \r\n          year: 'numeric', \r\n          month: 'long', \r\n          day: 'numeric'\r\n        });\r\n        this.fechaActual.hora = ahora.toLocaleTimeString('es-MX', {\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        });\r\n      },\r\n  \r\n      async obtenerTotalVentasHoy() {\r\n        try {\r\n          const response = await HttpService({\r\n            method: 'GET',\r\n            path: 'sales/today-total'\r\n          });\r\n          if (response.status === 200 && response.data && typeof response.data.total === 'number') {\r\n            this.totalVentasHoy = response.data.total;\r\n          } else {\r\n            console.warn('Respuesta inesperada al obtener el total de ventas:', response);\r\n            this.totalVentasHoy = 0;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener el total de ventas de hoy:', error);\r\n          // Mostrar mensaje más amigable cuando el endpoint no existe\r\n          if (error.response?.status === 404) {\r\n            console.warn('El endpoint de ventas no está disponible');\r\n          } else {\r\n            this.mostrarError('No se pudo cargar el total de ventas de hoy');\r\n          }\r\n          this.totalVentasHoy = 0;\r\n        }\r\n      },\r\n  \r\n      async obtenerTotalCuentasPorPagar() {\r\n        try {\r\n          const response = await HttpService({\r\n            method: 'GET',\r\n            path: 'accounts-payable/total'\r\n          });\r\n          if (response.status === 200 && response.data && typeof response.data.total === 'number') {\r\n            this.totalCuentasPorPagar = response.data.total;\r\n          } else {\r\n            console.warn('Respuesta inesperada al obtener el total de cuentas por pagar:', response);\r\n            this.totalCuentasPorPagar = 0;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener el total de cuentas por pagar:', error);\r\n          // Mostrar mensaje más amigable cuando el endpoint no existe\r\n          if (error.response?.status === 404) {\r\n            console.warn('El endpoint de cuentas por pagar no está disponible');\r\n          } else {\r\n            this.mostrarError('No se pudo cargar el total de cuentas por pagar');\r\n          }\r\n          this.totalCuentasPorPagar = 0;\r\n        }\r\n      },\r\n  \r\n      cerrarCaja() {\r\n        if (!this.cajaAbierta) {\r\n          this.$buefy.toast.open({\r\n            message: 'La caja no está abierta',\r\n            type: 'is-warning'\r\n          });\r\n          return;\r\n        }\r\n        if (!this.isValidAmount) {\r\n          this.$buefy.toast.open({\r\n            message: 'Por favor ingrese un monto válido',\r\n            type: 'is-warning'\r\n          });\r\n          return;\r\n        }\r\n        this.showConfirmModal = true;\r\n      },\r\n  \r\n      async confirmarCierre() {\r\n        this.cargando = true\r\n        try {\r\n          const { id: userId } = AyudanteSesion.obtenerDatosSesion()\r\n          \r\n          if (!userId) {\r\n            throw new Error('ID de usuario no encontrado')\r\n          }\r\n  \r\n          const response = await HttpService({\r\n            method: 'POST',\r\n            path: `cash-register/close/${userId}`,\r\n            data: {\r\n              cashInHand: Number(this.cashInHand)\r\n            }\r\n          })\r\n  \r\n          if (response.status === 201) {\r\n            this.cierreInfo = response.data\r\n            this.$buefy.toast.open({\r\n              message: 'Caja cerrada exitosamente',\r\n              type: 'is-success',\r\n              duration: 5000\r\n            })\r\n            this.cashInHand = null\r\n            this.showConfirmModal = false\r\n            this.cajaAbierta = false\r\n          } else {\r\n            throw new Error('Error al cerrar la caja')\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al cerrar la caja:', error)\r\n          this.$buefy.toast.open({\r\n            message: error.response?.data?.message || 'Error al cerrar la caja. Por favor intente nuevamente.',\r\n            type: 'is-danger',\r\n            duration: 5000\r\n          })\r\n        } finally {\r\n          this.cargando = false\r\n          this.showConfirmModal = false\r\n        }\r\n      },\r\n  \r\n      mostrarError(mensaje) {\r\n        this.$buefy.toast.open({\r\n          message: mensaje,\r\n          type: 'is-danger',\r\n          duration: 5000\r\n        });\r\n      },\r\n  \r\n      async abrirCaja() {\r\n        if (!this.isValidAmount) {\r\n          this.mostrarError('Por favor ingrese un monto válido');\r\n          return;\r\n        }\r\n  \r\n        this.cargando = true;\r\n        try {\r\n          const { id: userId } = AyudanteSesion.obtenerDatosSesion();\r\n          \r\n          if (!userId) {\r\n            throw new Error('ID de usuario no encontrado');\r\n          }\r\n  \r\n          const response = await HttpService({\r\n            method: 'POST',\r\n            path: `cash-register/open/${userId}`,\r\n            data: {\r\n              initialCash: this.cashInHand\r\n            }\r\n          });\r\n  \r\n          if (response.status === 201) {\r\n            this.$buefy.toast.open({\r\n              message: 'Caja abierta exitosamente',\r\n              type: 'is-success',\r\n              duration: 5000\r\n            });\r\n            this.cajaAbierta = true;\r\n            \r\n            // Intentar obtener los totales, pero no bloquear si fallan\r\n            try {\r\n              await Promise.all([\r\n                this.obtenerTotalVentasHoy(),\r\n                this.obtenerTotalCuentasPorPagar()\r\n              ]);\r\n            } catch (error) {\r\n              console.warn('No se pudieron actualizar los totales:', error);\r\n            }\r\n          } else {\r\n            throw new Error('Error al abrir la caja');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al abrir la caja:', error);\r\n          this.mostrarError(error.response?.data?.message || 'Error al abrir la caja. Por favor intente nuevamente.');\r\n        } finally {\r\n          this.cargando = false;\r\n          this.cashInHand = null;\r\n        }\r\n      },\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .card {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\r\n  }\r\n  \r\n  .card-content {\r\n    padding: 2rem;\r\n  }\r\n  \r\n  .button .icon {\r\n    margin-right: 0.5rem;\r\n  }\r\n  \r\n  .modal-card-body {\r\n    padding: 1.5rem;\r\n  }\r\n  \r\n  .modal-card-foot {\r\n    justify-content: flex-end;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .notification {\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .user-info {\r\n    text-align: left;\r\n  }\r\n  \r\n  .date-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .date-info p {\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .icon-text .icon {\r\n    margin-right: 0.5rem;\r\n  }\r\n  \r\n  @media screen and (max-width: 768px) {\r\n    .card-content {\r\n      padding: 1.5rem;\r\n    }\r\n  \r\n    .level-left,\r\n    .level-right {\r\n      flex-basis: 100%;\r\n    }\r\n  \r\n    .date-info {\r\n      text-align: left;\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n  \r\n  .mt-2 {\r\n    margin-top: 0.5rem;\r\n  }\r\n  \r\n  .mt-3 {\r\n    margin-top: 0.75rem;\r\n  }\r\n  \r\n  .mt-6 {\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .is-loading {\r\n    color: #7a7a7a;\r\n    font-style: italic;\r\n  }\r\n  \r\n  .user-info .icon-text {\r\n    align-items: center;\r\n  }\r\n  \r\n  .user-info .icon-text .icon {\r\n    margin-right: 0.5rem;\r\n  }\r\n  \r\n  .user-info .title,\r\n  .user-info .subtitle {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  </style>\r\n  \r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}