{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport MensajeInicial from '../Extras/MensajeInicial';\nimport NavComponent from '../Extras/NavComponent';\nimport CierreInfo from '../Caja/CierreInfo.vue';\nimport apiRequest from '../../Servicios/HttpService';\nexport default {\n  name: \"UsuariosComponent\",\n  components: {\n    MensajeInicial,\n    NavComponent,\n    CierreInfo\n  },\n  data: () => ({\n    isActive: true,\n    cargando: false,\n    cargandoHistorial: false,\n    usuarios: [],\n    historialCaja: [],\n    isHistorialModalActive: false,\n    usuarioSeleccionado: null,\n    // Nuevas propiedades para el detalle del cierre\n    cierreSeleccionado: null,\n    hayTurnoPrevioParaResumen: false,\n    esTurnoPrevioMismoUsuarioParaResumen: false,\n    turnoPrevioInfoParaResumen: {},\n    ventasTurnoActual: 0\n  }),\n  mounted() {\n    this.obtenerUsuarios();\n  },\n  methods: {\n    handleSwitchChange(value) {\n      this.isActive = value;\n      this.obtenerUsuarios();\n    },\n    async isActiveUser(idUsuario) {\n      this.cargando = true;\n      const {\n        status,\n        data\n      } = await apiRequest({\n        method: 'POST',\n        path: `users/${idUsuario}/isActive`\n      });\n      if (status == 201) {\n        this.cargando = false;\n        this.$buefy.toast.open({\n          type: 'is-info',\n          message: `El usuario ${data.username} ha sido ${data.isActive ? 'activado' : 'desactivado'}.`\n        });\n        this.obtenerUsuarios();\n      } else {\n        this.$buefy.toast.open('Error al cambiar el estado del usuario');\n        this.cargando = false;\n        return;\n      }\n    },\n    editar(idUsuario) {\n      this.$router.push({\n        name: \"EditarUsuario\",\n        params: {\n          id: idUsuario\n        }\n      });\n    },\n    changePass(idUsuario) {\n      this.$router.push({\n        name: \"CambiarPassword\",\n        params: {\n          id: idUsuario\n        }\n      });\n    },\n    async verHistorial(usuario) {\n      this.usuarioSeleccionado = usuario;\n      this.isHistorialModalActive = true;\n      this.cargandoHistorial = true;\n      this.historialCaja = []; // Clear previous data\n\n      try {\n        const response = await apiRequest({\n          method: 'GET',\n          path: `cash-register/historial`\n        });\n\n        // Filtrar solo los registros del usuario seleccionado\n        this.historialCaja = response.data.filter(registro => registro.user && registro.user.id === usuario.id);\n\n        // Ordenar por fecha (más reciente primero)\n        this.historialCaja.sort((a, b) => new Date(b.date) - new Date(a.date));\n      } catch (error) {\n        console.error('Error al obtener el historial de cajas:', error);\n        this.$buefy.toast.open({\n          message: 'Error al cargar el historial de cajas',\n          type: 'is-danger'\n        });\n      } finally {\n        this.cargandoHistorial = false;\n      }\n    },\n    // Método para ver el detalle de un cierre específico\n    async verDetalleCierre(cierre) {\n      // Cerrar el modal de historial\n      this.isHistorialModalActive = false;\n      try {\n        // Buscar el cierre anterior para determinar si hay turno previo\n        const cierresAnteriores = this.historialCaja.filter(c => c.state === 'closed' && new Date(c.date) < new Date(cierre.date));\n\n        // Ordenar por fecha (más reciente primero)\n        cierresAnteriores.sort((a, b) => new Date(b.date) - new Date(a.date));\n\n        // Verificar si hay un cierre anterior\n        if (cierresAnteriores.length > 0) {\n          const cierreAnterior = cierresAnteriores[0];\n          this.hayTurnoPrevioParaResumen = true;\n\n          // Verificar si el cierre anterior es del mismo usuario\n          this.esTurnoPrevioMismoUsuarioParaResumen = cierreAnterior.user && cierre.user && cierreAnterior.user.id === cierre.user.id;\n          this.turnoPrevioInfoParaResumen = cierreAnterior;\n\n          // Obtener las ventas específicas del usuario para este cierre\n          await this.obtenerVentasUsuarioEnTurno(cierre);\n        } else {\n          this.hayTurnoPrevioParaResumen = false;\n          this.esTurnoPrevioMismoUsuarioParaResumen = false;\n          this.turnoPrevioInfoParaResumen = {};\n\n          // Obtener las ventas específicas del usuario para este cierre\n          await this.obtenerVentasUsuarioEnTurno(cierre);\n        }\n\n        // Mostrar el cierre seleccionado\n        this.cierreSeleccionado = cierre;\n      } catch (error) {\n        console.error('Error al procesar el detalle del cierre:', error);\n        this.$buefy.toast.open({\n          message: 'Error al mostrar el detalle del cierre',\n          type: 'is-danger'\n        });\n      }\n    },\n    // Método para obtener las ventas específicas del usuario en su turno\n    async obtenerVentasUsuarioEnTurno(cierre) {\n      try {\n        if (!cierre.user || !cierre.user.id) {\n          console.warn('No se pudo obtener el ID del usuario del cierre');\n          this.ventasTurnoActual = cierre.totalSales || 0;\n          return;\n        }\n\n        // Obtener el ID del usuario\n        const userId = cierre.user.id;\n\n        // Intentar obtener las ventas específicas del usuario para esa fecha\n        const response = await apiRequest({\n          method: 'GET',\n          path: `users/${userId}/today-income`\n        }).catch(() => ({\n          data: null\n        }));\n\n        // Si la API devuelve las ventas del usuario, usamos ese valor\n        if (response && response.data !== null && response.data !== undefined) {\n          this.ventasTurnoActual = Number(response.data.totalIncome || 0);\n\n          // Si hay un cierre anterior del mismo usuario, ajustamos para mostrar solo las ventas de este turno\n          if (this.hayTurnoPrevioParaResumen && this.esTurnoPrevioMismoUsuarioParaResumen) {\n            const ventasPrevias = this.turnoPrevioInfoParaResumen.totalSales || 0;\n            this.ventasTurnoActual = this.ventasTurnoActual - ventasPrevias;\n          }\n        } else {\n          // Si no hay datos específicos, usamos el valor de totalSales del cierre\n          console.warn('No se pudieron obtener ventas específicas del usuario, usando valor del cierre');\n          this.ventasTurnoActual = cierre.totalSales || 0;\n        }\n\n        // Asegurarse de que no sea negativo\n        if (this.ventasTurnoActual < 0) this.ventasTurnoActual = 0;\n      } catch (error) {\n        console.error('Error al obtener ventas del usuario:', error);\n        // En caso de error, usamos el valor de totalSales del cierre\n        this.ventasTurnoActual = cierre.totalSales || 0;\n      }\n    },\n    obtenerUsuarios() {\n      this.cargando = true;\n      apiRequest({\n        method: 'GET',\n        path: 'users'\n      }).then(response => {\n        this.usuarios = response.data.filter(user => user.isActive === this.isActive);\n        this.cargando = false;\n      }).catch(error => {\n        console.error('Error fetching users:', error);\n        this.cargando = false;\n      });\n    },\n    formatDate(dateString) {\n      if (!dateString) return '-';\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateString).toLocaleDateString('es-MX', options);\n    },\n    formatCurrency(value) {\n      if (value === null || value === undefined) return '-';\n      return new Intl.NumberFormat('es-MX', {\n        style: 'currency',\n        currency: 'MXN'\n      }).format(value);\n    }\n  }\n};","map":{"version":3,"names":["MensajeInicial","NavComponent","CierreInfo","apiRequest","name","components","data","isActive","cargando","cargandoHistorial","usuarios","historialCaja","isHistorialModalActive","usuarioSeleccionado","cierreSeleccionado","hayTurnoPrevioParaResumen","esTurnoPrevioMismoUsuarioParaResumen","turnoPrevioInfoParaResumen","ventasTurnoActual","mounted","obtenerUsuarios","methods","handleSwitchChange","value","isActiveUser","idUsuario","status","method","path","$buefy","toast","open","type","message","username","editar","$router","push","params","id","changePass","verHistorial","usuario","response","filter","registro","user","sort","a","b","Date","date","error","console","verDetalleCierre","cierre","cierresAnteriores","c","state","length","cierreAnterior","obtenerVentasUsuarioEnTurno","warn","totalSales","userId","catch","undefined","Number","totalIncome","ventasPrevias","then","formatDate","dateString","options","year","month","day","hour","minute","toLocaleDateString","formatCurrency","Intl","NumberFormat","style","currency","format"],"sources":["src/components/Usuarios/UsuariosComponent.vue"],"sourcesContent":["<template>\r\n  <section>\r\n    <b-switch v-model=\"isActive\" @input=\"handleSwitchChange\">\r\n      {{ isActive ? 'Usuarios activados' : 'Usuarios inactivos' }}\r\n    </b-switch>\r\n    <nav-component :isActive=\"isActive\" :titulo=\"'Usuarios'\" :link=\"{ path: '/agregar-usuario' }\" :texto=\"'Agregar usuario'\" />\r\n\r\n    <mensaje-inicial :titulo=\"`No se han econtrado ${isActive ? 'usuario' : 'usuarios inactivos'}`\" :subtitulo=\"`${isActive ? 'Agraga algunos usuario' : 'usuarios inactivos'}`\"\r\n      v-if=\"usuarios.length < 1\" />\r\n    <b-table :data=\"usuarios\" v-if=\"usuarios.length > 0\">\r\n      <b-table-column field=\"usuario\" label=\"Nombre de usuario\" sortable v-slot=\"props\">\r\n        {{ props.row.username }}\r\n      </b-table-column>\r\n\r\n      <b-table-column field=\"nombre\" label=\"Nombre completo\" sortable v-slot=\"props\">\r\n        {{ props.row.name }}\r\n      </b-table-column>\r\n\r\n      <b-table-column field=\"telefono\" label=\"Teléfono\" sortable v-slot=\"props\">\r\n        {{ props.row.phone }}\r\n      </b-table-column>\r\n\r\n      <b-table-column field=\"acciones\" label=\"Acciones\" centered v-slot=\"props\">\r\n        <div class=\"buttons is-centered\">\r\n          <b-button v-if=\"isActive\" size=\"is-small\" class=\"btn-link\" icon-left=\"key\" @click=\"changePass(props.row.id)\"></b-button>\r\n          <b-button class=\"btn-link-primary\" style=\"width: 100px\" @click=\"isActiveUser(props.row.id)\" size=\"is-small\">{{ props.row.isActive ?\r\n            'Desactivar' : 'Activar' }}</b-button>\r\n          <b-button v-if=\"isActive\" class=\"btn-ghost\" size=\"is-small\" icon-left=\"pen\" @click=\"editar(props.row.id)\">Editar</b-button>\r\n\r\n          <b-button v-if=\"isActive\" size=\"is-small\" type=\"is-primary\" icon-left=\"history\" @click=\"verHistorial(props.row)\">Historial\r\n            Caja</b-button>\r\n        </div>\r\n      </b-table-column>\r\n    </b-table>\r\n    <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n\r\n    <!-- Modal mejorado para el historial de caja -->\r\n    <b-modal v-model=\"isHistorialModalActive\" :width=\"720\" scroll=\"keep\" trap-focus :destroy-on-hide=\"false\" aria-role=\"dialog\" aria-modal>\r\n      <div class=\"modal-card\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">\r\n            <span class=\"icon-text\">\r\n              <span class=\"icon\">\r\n                <i class=\"mdi mdi-history\"></i>\r\n              </span>\r\n              <span>Historial de Caja - {{ usuarioSeleccionado ? usuarioSeleccionado.name : '' }}</span>\r\n            </span>\r\n          </p>\r\n          <button class=\"delete\" aria-label=\"close\" @click=\"isHistorialModalActive = false\"></button>\r\n        </header>\r\n        \r\n        <section class=\"modal-card-body\">\r\n          <!-- Estado de carga -->\r\n          <div v-if=\"cargandoHistorial\" class=\"has-text-centered p-6\">\r\n            <b-loading :is-full-page=\"false\" v-model=\"cargandoHistorial\" :can-cancel=\"false\"></b-loading>\r\n            <p class=\"mt-4\">Cargando historial...</p>\r\n          </div>\r\n          \r\n          <!-- Mensaje cuando no hay registros -->\r\n          <div v-else-if=\"historialCaja.length === 0\" class=\"notification is-info is-light\">\r\n            <p class=\"has-text-centered\">\r\n              <span class=\"icon\">\r\n                <i class=\"mdi mdi-information\"></i>\r\n              </span>\r\n              No se encontraron registros de caja para este usuario.\r\n            </p>\r\n          </div>\r\n          \r\n          <!-- Tabla de historial -->\r\n          <div v-else>\r\n            <b-table\r\n              :data=\"historialCaja\"\r\n              :mobile-cards=\"true\"\r\n              default-sort=\"date\"\r\n              default-sort-direction=\"desc\"\r\n              detailed\r\n              detail-key=\"id\"\r\n              :show-detail-icon=\"false\"\r\n              aria-next-label=\"Siguiente página\"\r\n              aria-previous-label=\"Página anterior\"\r\n              aria-page-label=\"Página\"\r\n              aria-current-label=\"Página actual\">\r\n              \r\n              <b-table-column field=\"date\" label=\"Fecha\" sortable v-slot=\"props\">\r\n                <span class=\"has-text-weight-medium\">{{ formatDate(props.row.date) }}</span>\r\n              </b-table-column>\r\n              \r\n              <b-table-column field=\"state\" label=\"Estado\" centered v-slot=\"props\">\r\n                <b-tag :type=\"props.row.state === 'closed' ? 'is-success' : 'is-warning'\">\r\n                  {{ props.row.state === 'closed' ? 'Cerrado' : 'Abierto' }}\r\n                </b-tag>\r\n              </b-table-column>\r\n              \r\n              <b-table-column field=\"cashInHand\" label=\"Efectivo\" numeric v-slot=\"props\">\r\n                <span v-if=\"props.row.state === 'closed'\" class=\"has-text-weight-bold\">{{ formatCurrency(props.row.cashInHand) }}</span>\r\n                <span v-else></span>\r\n              </b-table-column>\r\n              \r\n              <b-table-column field=\"acciones\" label=\"Acciones\" centered v-slot=\"props\">\r\n                <b-button\r\n                  v-if=\"props.row.state === 'closed'\"\r\n                  size=\"is-small\"\r\n                  type=\"is-info\"\r\n                  icon-left=\"eye\"\r\n                  @click=\"verDetalleCierre(props.row)\">\r\n                  Ver Detalle\r\n                </b-button>\r\n                <span v-else></span>\r\n              </b-table-column>\r\n              \r\n              <template #detail=\"props\">\r\n                <div class=\"content p-3\">\r\n                  <div class=\"columns is-multiline\">\r\n                    <div class=\"column is-6\">\r\n                      <p><strong>ID:</strong> {{ props.row.id }}</p>\r\n                    </div>\r\n                    <div class=\"column is-6\">\r\n                      <p><strong>Usuario:</strong> {{ props.row.user ? props.row.user.name : '-' }}</p>\r\n                    </div>\r\n                    <div class=\"column is-6\">\r\n                      <p><strong>Ventas totales:</strong> {{ formatCurrency(props.row.totalSales) }}</p>\r\n                    </div>\r\n                    <div class=\"column is-6\">\r\n                      <p><strong>Efectivo esperado:</strong> {{ formatCurrency(props.row.expectedCash) }}</p>\r\n                    </div>\r\n                    <div class=\"column is-6\">\r\n                      <p><strong>Discrepancia:</strong> \r\n                        <span :class=\"{\r\n                          'has-text-danger': props.row.discrepancy < 0,\r\n                          'has-text-success': props.row.discrepancy > 0,\r\n                          'has-text-info': props.row.discrepancy === 0\r\n                        }\">\r\n                          {{ formatCurrency(props.row.discrepancy) }}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"has-text-centered mt-3\">\r\n                    <b-button\r\n                      v-if=\"props.row.state === 'closed'\"\r\n                      type=\"is-primary\"\r\n                      size=\"is-small\"\r\n                      icon-left=\"file-document-outline\"\r\n                      @click=\"verDetalleCierre(props.row)\">\r\n                      Ver Reporte Completo\r\n                    </b-button>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n            </b-table>\r\n          </div>\r\n        </section>\r\n        \r\n        <footer class=\"modal-card-foot\">\r\n          <button class=\"button\" @click=\"isHistorialModalActive = false\">Cerrar</button>\r\n        </footer>\r\n      </div>\r\n    </b-modal>\r\n\r\n    <!-- Componente CierreInfo para mostrar el detalle del cierre -->\r\n    <cierre-info \r\n      v-if=\"cierreSeleccionado\" \r\n      :cierreInfo.sync=\"cierreSeleccionado\" \r\n      :userData=\"usuarioSeleccionado\"\r\n      :hayTurnoPrevio=\"hayTurnoPrevioParaResumen\"\r\n      :esTurnoPrevioMismoUsuario=\"esTurnoPrevioMismoUsuarioParaResumen\"\r\n      :turnoPrevioInfo=\"turnoPrevioInfoParaResumen\"\r\n      :ventasTurno=\"ventasTurnoActual\"\r\n    />\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport MensajeInicial from '../Extras/MensajeInicial'\r\nimport NavComponent from '../Extras/NavComponent'\r\nimport CierreInfo from '../Caja/CierreInfo.vue'\r\nimport apiRequest from '../../Servicios/HttpService';\r\n\r\nexport default {\r\n  name: \"UsuariosComponent\",\r\n  components: { \r\n    MensajeInicial, \r\n    NavComponent,\r\n    CierreInfo\r\n  },\r\n\r\n  data: () => ({\r\n    isActive: true,\r\n    cargando: false,\r\n    cargandoHistorial: false,\r\n    usuarios: [],\r\n    historialCaja: [],\r\n    isHistorialModalActive: false,\r\n    usuarioSeleccionado: null,\r\n    // Nuevas propiedades para el detalle del cierre\r\n    cierreSeleccionado: null,\r\n    hayTurnoPrevioParaResumen: false,\r\n    esTurnoPrevioMismoUsuarioParaResumen: false,\r\n    turnoPrevioInfoParaResumen: {},\r\n    ventasTurnoActual: 0\r\n  }),\r\n\r\n  mounted() {\r\n    this.obtenerUsuarios()\r\n  },\r\n\r\n  methods: {\r\n    handleSwitchChange(value) {\r\n      this.isActive = value;\r\n      this.obtenerUsuarios();\r\n    },\r\n\r\n    async isActiveUser(idUsuario) {\r\n      this.cargando = true\r\n      const { status, data } = await apiRequest({\r\n        method: 'POST',\r\n        path: `users/${idUsuario}/isActive`\r\n      })\r\n\r\n      if (status == 201) {\r\n        this.cargando = false\r\n        this.$buefy.toast.open({\r\n          type: 'is-info',\r\n          message: `El usuario ${data.username} ha sido ${data.isActive ? 'activado' : 'desactivado'}.`\r\n        })\r\n        this.obtenerUsuarios()\r\n\r\n      } else {\r\n        this.$buefy.toast.open('Error al cambiar el estado del usuario')\r\n        this.cargando = false\r\n        return\r\n      }\r\n    },\r\n\r\n    editar(idUsuario) {\r\n      this.$router.push({\r\n        name: \"EditarUsuario\",\r\n        params: { id: idUsuario }\r\n      })\r\n    },\r\n\r\n    changePass(idUsuario) {\r\n      this.$router.push({\r\n        name: \"CambiarPassword\",\r\n        params: { id: idUsuario }\r\n      })\r\n    },\r\n\r\n    async verHistorial(usuario) {\r\n      this.usuarioSeleccionado = usuario;\r\n      this.isHistorialModalActive = true;\r\n      this.cargandoHistorial = true;\r\n      this.historialCaja = []; // Clear previous data\r\n      \r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: `cash-register/historial`\r\n        });\r\n        \r\n        // Filtrar solo los registros del usuario seleccionado\r\n        this.historialCaja = response.data.filter(registro => \r\n          registro.user && registro.user.id === usuario.id\r\n        );\r\n        \r\n        // Ordenar por fecha (más reciente primero)\r\n        this.historialCaja.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n        \r\n      } catch (error) {\r\n        console.error('Error al obtener el historial de cajas:', error);\r\n        this.$buefy.toast.open({\r\n          message: 'Error al cargar el historial de cajas',\r\n          type: 'is-danger'\r\n        });\r\n      } finally {\r\n        this.cargandoHistorial = false;\r\n      }\r\n    },\r\n\r\n    // Método para ver el detalle de un cierre específico\r\n    async verDetalleCierre(cierre) {\r\n      // Cerrar el modal de historial\r\n      this.isHistorialModalActive = false;\r\n      \r\n      try {\r\n        // Buscar el cierre anterior para determinar si hay turno previo\r\n        const cierresAnteriores = this.historialCaja.filter(c => \r\n          c.state === 'closed' && \r\n          new Date(c.date) < new Date(cierre.date)\r\n        );\r\n        \r\n        // Ordenar por fecha (más reciente primero)\r\n        cierresAnteriores.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n        \r\n        // Verificar si hay un cierre anterior\r\n        if (cierresAnteriores.length > 0) {\r\n          const cierreAnterior = cierresAnteriores[0];\r\n          this.hayTurnoPrevioParaResumen = true;\r\n          \r\n          // Verificar si el cierre anterior es del mismo usuario\r\n          this.esTurnoPrevioMismoUsuarioParaResumen = \r\n            cierreAnterior.user && cierre.user && \r\n            cierreAnterior.user.id === cierre.user.id;\r\n          \r\n          this.turnoPrevioInfoParaResumen = cierreAnterior;\r\n          \r\n          // Obtener las ventas específicas del usuario para este cierre\r\n          await this.obtenerVentasUsuarioEnTurno(cierre);\r\n        } else {\r\n          this.hayTurnoPrevioParaResumen = false;\r\n          this.esTurnoPrevioMismoUsuarioParaResumen = false;\r\n          this.turnoPrevioInfoParaResumen = {};\r\n          \r\n          // Obtener las ventas específicas del usuario para este cierre\r\n          await this.obtenerVentasUsuarioEnTurno(cierre);\r\n        }\r\n        \r\n        // Mostrar el cierre seleccionado\r\n        this.cierreSeleccionado = cierre;\r\n        \r\n      } catch (error) {\r\n        console.error('Error al procesar el detalle del cierre:', error);\r\n        this.$buefy.toast.open({\r\n          message: 'Error al mostrar el detalle del cierre',\r\n          type: 'is-danger'\r\n        });\r\n      }\r\n    },\r\n\r\n    // Método para obtener las ventas específicas del usuario en su turno\r\n    async obtenerVentasUsuarioEnTurno(cierre) {\r\n      try {\r\n        if (!cierre.user || !cierre.user.id) {\r\n          console.warn('No se pudo obtener el ID del usuario del cierre');\r\n          this.ventasTurnoActual = cierre.totalSales || 0;\r\n          return;\r\n        }\r\n        \r\n        // Obtener el ID del usuario\r\n        const userId = cierre.user.id;\r\n        \r\n        // Intentar obtener las ventas específicas del usuario para esa fecha\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: `users/${userId}/today-income`\r\n        }).catch(() => ({ data: null }));\r\n        \r\n        // Si la API devuelve las ventas del usuario, usamos ese valor\r\n        if (response && response.data !== null && response.data !== undefined) {\r\n          this.ventasTurnoActual = Number(response.data.totalIncome || 0);\r\n          \r\n          // Si hay un cierre anterior del mismo usuario, ajustamos para mostrar solo las ventas de este turno\r\n          if (this.hayTurnoPrevioParaResumen && this.esTurnoPrevioMismoUsuarioParaResumen) {\r\n            const ventasPrevias = this.turnoPrevioInfoParaResumen.totalSales || 0;\r\n            this.ventasTurnoActual = this.ventasTurnoActual - ventasPrevias;\r\n          }\r\n        } else {\r\n          // Si no hay datos específicos, usamos el valor de totalSales del cierre\r\n          console.warn('No se pudieron obtener ventas específicas del usuario, usando valor del cierre');\r\n          this.ventasTurnoActual = cierre.totalSales || 0;\r\n        }\r\n        \r\n        // Asegurarse de que no sea negativo\r\n        if (this.ventasTurnoActual < 0) this.ventasTurnoActual = 0;\r\n        \r\n      } catch (error) {\r\n        console.error('Error al obtener ventas del usuario:', error);\r\n        // En caso de error, usamos el valor de totalSales del cierre\r\n        this.ventasTurnoActual = cierre.totalSales || 0;\r\n      }\r\n    },\r\n\r\n    obtenerUsuarios() {\r\n      this.cargando = true\r\n      apiRequest({\r\n        method: 'GET',\r\n        path: 'users'\r\n      })\r\n        .then(response => {\r\n          this.usuarios = response.data.filter((user) => user.isActive === this.isActive )\r\n          this.cargando = false\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching users:', error)\r\n          this.cargando = false\r\n        })\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      if (!dateString) return '-';\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n      return new Date(dateString).toLocaleDateString('es-MX', options);\r\n    },\r\n\r\n    formatCurrency(value) {\r\n      if (value === null || value === undefined) return '-';\r\n      return new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(value);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.buttons.is-centered {\r\n  justify-content: center;\r\n}\r\n\r\n.modal-card-body {\r\n  max-height: 70vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.p-3 {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.p-6 {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.mt-3 {\r\n  margin-top: 0.75rem;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.has-text-weight-medium {\r\n  font-weight: 500;\r\n}\r\n\r\n.has-text-weight-bold {\r\n  font-weight: 700;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}