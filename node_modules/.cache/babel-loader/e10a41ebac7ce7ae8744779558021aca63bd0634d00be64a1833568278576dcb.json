{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport apiRequest from '../../Servicios/HttpService';\nimport Utiles from '../../Servicios/Utiles';\nimport ErroresComponent from '../Extras/ErroresComponent';\nexport default {\n  name: \"FormProducto\",\n  props: ['productoProp'],\n  components: {\n    ErroresComponent\n  },\n  data: () => ({\n    categorias: [],\n    marcas: [],\n    producto: {\n      code: \"\",\n      name: \"\",\n      purchasePrice: 0,\n      salePrice: 0,\n      touristPrice: 0,\n      stock: 0,\n      reservedStock: 0,\n      wholesaleSale: false,\n      wholesalePrice: 0,\n      wholesaleQuantity: 0,\n      brandId: \"\",\n      categoryId: \"\"\n    },\n    mensajesError: []\n  }),\n  watch: {\n    productoProp(newVal) {\n      this.producto = {\n        ...newVal\n      };\n      this.setSelectedValues();\n    }\n  },\n  mounted() {\n    this.obtenerCategorias();\n    this.obtenerMarcas();\n    this.producto = {\n      ...this.productoProp\n    };\n    if (this.productoProp) {\n      this.producto = {\n        ...this.productoProp\n      };\n      this.producto.wholesaleQuantity = parseInt(this.productoProp.wholesaleQuantity);\n      this.setSelectedValues();\n    }\n  },\n  methods: {\n    async registrar() {\n      let producto = {\n        \"code\": this.producto.code,\n        \"name\": this.producto.name,\n        \"purchasePrice\": this.producto.purchasePrice,\n        \"salePrice\": this.producto.salePrice,\n        \"stock\": this.producto.stock\n      };\n      this.mensajesError = Utiles.validarDatos(producto);\n      if (parseFloat(this.producto.salePrice) < parseFloat(this.producto.purchasePrice)) {\n        this.mensajesError.push(\"El precio de venta debe ser mayor al precio compra\");\n      }\n      if (this.mensajesError.length > 0) return;\n      this.$emit(\"registrado\", this.producto);\n      this.producto = {\n        code: \"\",\n        name: \"\",\n        purchasePrice: 0,\n        salePrice: 0,\n        touristPrice: 0,\n        stock: 0,\n        reservedStock: 0,\n        wholesaleSale: false,\n        wholesalePrice: 0,\n        wholesaleQuantity: 0,\n        brandId: \"\",\n        categoryId: \"\"\n      };\n    },\n    setSelectedValues() {\n      if (this.marcas.length > 0 && this.producto.brand) {\n        const selectedMarca = this.marcas.find(marca => marca.id === this.producto.brand.id);\n        if (selectedMarca) {\n          this.producto.brandId = selectedMarca.id;\n        }\n      }\n      if (this.categorias.length > 0 && this.producto.category) {\n        const selectedCategoria = this.categorias.find(categoria => categoria.id === this.producto.category.id);\n        if (selectedCategoria) {\n          this.producto.categoryId = selectedCategoria.id;\n        }\n      }\n    },\n    obtenerMarcas() {\n      apiRequest({\n        method: 'GET',\n        path: \"brands\"\n      }).then(marcas => {\n        this.marcas = marcas.data;\n        this.setSelectedValues();\n      });\n    },\n    obtenerCategorias() {\n      apiRequest({\n        method: \"GET\",\n        path: \"categories\"\n      }).then(categorias => {\n        this.categorias = categorias.data;\n        this.setSelectedValues();\n      });\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","Utiles","ErroresComponent","name","props","components","data","categorias","marcas","producto","code","purchasePrice","salePrice","touristPrice","stock","reservedStock","wholesaleSale","wholesalePrice","wholesaleQuantity","brandId","categoryId","mensajesError","watch","productoProp","newVal","setSelectedValues","mounted","obtenerCategorias","obtenerMarcas","parseInt","methods","registrar","validarDatos","parseFloat","push","length","$emit","brand","selectedMarca","find","marca","id","category","selectedCategoria","categoria","method","path","then"],"sources":["src/components/Inventario/FormProducto.vue"],"sourcesContent":["<template>\r\n    <section class=\"box\">\r\n        <b-field grouped group-multiline>\r\n            <b-field label=\"Código de barras\" expanded>\r\n                <b-input type=\"text\" icon=\"barcode\" placeholder=\"Código de barras\"\r\n                    v-model=\"producto.code\"></b-input>\r\n            </b-field>\r\n            <b-field label=\"Nombre\" expanded>\r\n                <b-input placeholder=\"Nombre o descripción del producto\" v-model=\"producto.name\"></b-input>\r\n            </b-field>\r\n        </b-field>\r\n      \r\n\r\n        <b-field grouped group-multiline>\r\n            <b-field label=\"Precio compra\" expanded>\r\n                <b-input step=\"any\" icon=\"currency-usd\" type=\"number\" placeholder=\"Precio de compra\"\r\n                    v-model=\"producto.purchasePrice\"></b-input>\r\n            </b-field>\r\n\r\n            <b-field label=\"Precio venta\" expanded>\r\n                <b-input step=\"any\" icon=\"currency-usd\" type=\"number\" placeholder=\"Precio de venta\"\r\n                    v-model=\"producto.salePrice\" :min=\"producto.precioCompra\"></b-input>\r\n            </b-field>\r\n            <b-field label=\"Precio turista\" expanded>\r\n                <b-input step=\"any\" icon=\"currency-usd\" type=\"number\" placeholder=\"Precio de venta turista\"\r\n                    v-model=\"producto.touristPrice\" :min=\"producto.precioVenta\"></b-input>\r\n            </b-field>\r\n  <b-field label=\"Existencia\" expanded>\r\n                <b-numberinput min=\"1\" type=\"is-info\" placeholder=\"Existencia\" v-model=\"producto.stock\">\r\n                </b-numberinput>\r\n            </b-field>\r\n       \r\n        </b-field>\r\n   \r\n        <br>\r\n        <b-field grouped group-multiline>\r\n            <b-field>\r\n                <b-switch v-model=\"producto.wholesaleSale\" type=\"is-info\">\r\n                    ¿Vendido al mayoreo?\r\n                </b-switch>\r\n            </b-field>\r\n\r\n            <b-field label=\"Precio mayoreo\" expanded v-if=\"producto.wholesaleSale\">\r\n                <b-input step=\"any\" icon=\"currency-usd\" type=\"number\" placeholder=\"Precio de venta al mayoreo\"\r\n                    v-model=\"producto.wholesalePrice\" :min=\"producto.purchasePrice\"></b-input>\r\n            </b-field>\r\n\r\n            <b-field label=\"Cantidad mayoreo\" expanded v-if=\"producto.wholesaleSale\">\r\n                <b-numberinput min=\"1\" type=\"is-info\" placeholder=\"Cantidad para aplicar mayoreo\"\r\n                    v-model=\"producto.wholesaleQuantity\">\r\n                </b-numberinput>\r\n            </b-field>\r\n        </b-field>\r\n        <br>\r\n        <b-field grouped group-multiline>\r\n            <b-field label=\"Selecciona una marca\">\r\n                <b-select placeholder=\"Marca\" icon=\"tag-multiple\" v-model=\"producto.brandId\">\r\n                    <option v-for=\"marca in marcas\" :key=\"marca.id\" :value=\"marca.id\">\r\n                        {{ marca.brandName }}\r\n                    </option>\r\n                </b-select>\r\n            </b-field>\r\n\r\n            <b-field label=\"Selecciona una categoría\">\r\n                <b-select placeholder=\"Categoría\" icon=\"archive\" v-model=\"producto.categoryId\">\r\n                    <option v-for=\"categoria in categorias\" :key=\"categoria.id\" :value=\"categoria.id\">\r\n                        {{ categoria.categoryName }}\r\n                    </option>\r\n                </b-select>\r\n            </b-field>\r\n        </b-field>\r\n        <br>\r\n        <div class=\"buttons has-text-centered\">\r\n            <b-button type=\"is-primary\" size=\"is-large\" icon-left=\"check\" @click=\"registrar\">Registrar</b-button>\r\n            <b-button type=\"is-dark\" size=\"is-large\" icon-left=\"cancel\" tag=\"router-link\"\r\n                to=\"/inventario\">Cancelar</b-button>\r\n        </div>\r\n        <errores-component :errores=\"mensajesError\" v-if=\"mensajesError.length > 0\" />\r\n    </section>\r\n</template>\r\n<script>\r\nimport apiRequest from '../../Servicios/HttpService';\r\nimport Utiles from '../../Servicios/Utiles'\r\nimport ErroresComponent from '../Extras/ErroresComponent'\r\nexport default {\r\n    name: \"FormProducto\",\r\n    props: ['productoProp'],\r\n    components: { ErroresComponent },\r\n\r\n    data: () => ({\r\n        categorias: [],\r\n        marcas: [],\r\n        producto: {\r\n            code: \"\",\r\n            name: \"\",\r\n            purchasePrice: 0,\r\n            salePrice: 0,\r\n            touristPrice: 0,\r\n            stock: 0,\r\n            reservedStock: 0,\r\n            wholesaleSale: false,\r\n            wholesalePrice: 0,\r\n            wholesaleQuantity: 0,\r\n            brandId: \"\",\r\n            categoryId: \"\"\r\n        },\r\n        mensajesError: []\r\n    }),\r\n\r\n    watch: {\r\n        productoProp(newVal) {\r\n            this.producto = { ...newVal };\r\n            this.setSelectedValues(); \r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.obtenerCategorias()\r\n        this.obtenerMarcas()\r\n        this.producto ={ ...this.productoProp }\r\n        if (this.productoProp) {\r\n            this.producto = { ...this.productoProp }\r\n            this.producto.wholesaleQuantity = parseInt(this.productoProp.wholesaleQuantity)\r\n            this.setSelectedValues();\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        async registrar() {\r\n            let producto = {\r\n                \"code\": this.producto.code,\r\n                \"name\": this.producto.name,\r\n                \"purchasePrice\": this.producto.purchasePrice,\r\n                \"salePrice\": this.producto.salePrice,\r\n                \"stock\": this.producto.stock\r\n            }\r\n\r\n            this.mensajesError = Utiles.validarDatos(producto)\r\n            if (parseFloat(this.producto.salePrice) < parseFloat(this.producto.purchasePrice)) {\r\n                this.mensajesError.push(\"El precio de venta debe ser mayor al precio compra\")\r\n            }\r\n\r\n            if (this.mensajesError.length > 0) return\r\n            this.$emit(\"registrado\", this.producto)\r\n            this.producto = {\r\n                code: \"\",\r\n                name: \"\",\r\n                purchasePrice: 0,\r\n                salePrice: 0,\r\n                touristPrice: 0,\r\n                stock: 0,\r\n                reservedStock: 0,\r\n                wholesaleSale: false,\r\n                wholesalePrice: 0,\r\n                wholesaleQuantity: 0,\r\n                brandId: \"\",\r\n                categoryId: \"\"\r\n            }\r\n        },\r\n\r\n        setSelectedValues() {\r\n            if (this.marcas.length > 0 && this.producto.brand) {\r\n                const selectedMarca = this.marcas.find(marca => marca.id === this.producto.brand.id);\r\n                if (selectedMarca) {\r\n                    this.producto.brandId = selectedMarca.id;\r\n                }\r\n            }\r\n\r\n            if (this.categorias.length > 0 && this.producto.category) {\r\n                const selectedCategoria = this.categorias.find(categoria => categoria.id === this.producto.category.id);\r\n                if (selectedCategoria) {\r\n                    this.producto.categoryId = selectedCategoria.id;\r\n                }\r\n            }\r\n        },\r\n\r\n        obtenerMarcas() {\r\n            apiRequest({\r\n                method: 'GET',\r\n                path: \"brands\"\r\n            })\r\n                .then(marcas => {\r\n                    this.marcas = marcas.data\r\n                    this.setSelectedValues();\r\n                })\r\n        },\r\n\r\n        obtenerCategorias() {\r\n            apiRequest({\r\n                method: \"GET\",\r\n                path: \"categories\"\r\n            })\r\n                .then(categorias => {\r\n                    this.categorias = categorias.data\r\n                    this.setSelectedValues();\r\n                })\r\n        }\r\n    }\r\n\r\n}\r\n</script>"],"mappings":";;;AAiFA,OAAAA,UAAA;AACA,OAAAC,MAAA;AACA,OAAAC,gBAAA;AACA;EACAC,IAAA;EACAC,KAAA;EACAC,UAAA;IAAAH;EAAA;EAEAI,IAAA,EAAAA,CAAA;IACAC,UAAA;IACAC,MAAA;IACAC,QAAA;MACAC,IAAA;MACAP,IAAA;MACAQ,aAAA;MACAC,SAAA;MACAC,YAAA;MACAC,KAAA;MACAC,aAAA;MACAC,aAAA;MACAC,cAAA;MACAC,iBAAA;MACAC,OAAA;MACAC,UAAA;IACA;IACAC,aAAA;EACA;EAEAC,KAAA;IACAC,aAAAC,MAAA;MACA,KAAAf,QAAA;QAAA,GAAAe;MAAA;MACA,KAAAC,iBAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,iBAAA;IACA,KAAAC,aAAA;IACA,KAAAnB,QAAA;MAAA,QAAAc;IAAA;IACA,SAAAA,YAAA;MACA,KAAAd,QAAA;QAAA,QAAAc;MAAA;MACA,KAAAd,QAAA,CAAAS,iBAAA,GAAAW,QAAA,MAAAN,YAAA,CAAAL,iBAAA;MACA,KAAAO,iBAAA;IACA;EACA;EAEAK,OAAA;IACA,MAAAC,UAAA;MACA,IAAAtB,QAAA;QACA,aAAAA,QAAA,CAAAC,IAAA;QACA,aAAAD,QAAA,CAAAN,IAAA;QACA,sBAAAM,QAAA,CAAAE,aAAA;QACA,kBAAAF,QAAA,CAAAG,SAAA;QACA,cAAAH,QAAA,CAAAK;MACA;MAEA,KAAAO,aAAA,GAAApB,MAAA,CAAA+B,YAAA,CAAAvB,QAAA;MACA,IAAAwB,UAAA,MAAAxB,QAAA,CAAAG,SAAA,IAAAqB,UAAA,MAAAxB,QAAA,CAAAE,aAAA;QACA,KAAAU,aAAA,CAAAa,IAAA;MACA;MAEA,SAAAb,aAAA,CAAAc,MAAA;MACA,KAAAC,KAAA,oBAAA3B,QAAA;MACA,KAAAA,QAAA;QACAC,IAAA;QACAP,IAAA;QACAQ,aAAA;QACAC,SAAA;QACAC,YAAA;QACAC,KAAA;QACAC,aAAA;QACAC,aAAA;QACAC,cAAA;QACAC,iBAAA;QACAC,OAAA;QACAC,UAAA;MACA;IACA;IAEAK,kBAAA;MACA,SAAAjB,MAAA,CAAA2B,MAAA,aAAA1B,QAAA,CAAA4B,KAAA;QACA,MAAAC,aAAA,QAAA9B,MAAA,CAAA+B,IAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,EAAA,UAAAhC,QAAA,CAAA4B,KAAA,CAAAI,EAAA;QACA,IAAAH,aAAA;UACA,KAAA7B,QAAA,CAAAU,OAAA,GAAAmB,aAAA,CAAAG,EAAA;QACA;MACA;MAEA,SAAAlC,UAAA,CAAA4B,MAAA,aAAA1B,QAAA,CAAAiC,QAAA;QACA,MAAAC,iBAAA,QAAApC,UAAA,CAAAgC,IAAA,CAAAK,SAAA,IAAAA,SAAA,CAAAH,EAAA,UAAAhC,QAAA,CAAAiC,QAAA,CAAAD,EAAA;QACA,IAAAE,iBAAA;UACA,KAAAlC,QAAA,CAAAW,UAAA,GAAAuB,iBAAA,CAAAF,EAAA;QACA;MACA;IACA;IAEAb,cAAA;MACA5B,UAAA;QACA6C,MAAA;QACAC,IAAA;MACA,GACAC,IAAA,CAAAvC,MAAA;QACA,KAAAA,MAAA,GAAAA,MAAA,CAAAF,IAAA;QACA,KAAAmB,iBAAA;MACA;IACA;IAEAE,kBAAA;MACA3B,UAAA;QACA6C,MAAA;QACAC,IAAA;MACA,GACAC,IAAA,CAAAxC,UAAA;QACA,KAAAA,UAAA,GAAAA,UAAA,CAAAD,IAAA;QACA,KAAAmB,iBAAA;MACA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}