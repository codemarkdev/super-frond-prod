{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport AyudanteSesion from \"@/Servicios/AyudanteSesion\";\nimport apiRequest from \"@/Servicios/HttpService\";\nexport default {\n  name: \"HistorialVentas\",\n  data() {\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    const currentMonth = today.getMonth();\n    return {\n      isAdmin: false,\n      ingresoHoy: 0,\n      ingresoSemanal: 0,\n      ingresoMensual: 0,\n      inventoryProfit: 0,\n      inventoryTotal: 0,\n      inventoryTotalStock: 0,\n      totalProveedores: 0,\n      topSellingProduct: {\n        product_name: \"\",\n        total: 0,\n        units: 0\n      },\n      ventasPorFecha: [],\n      filtroFechas: {\n        inicio: null,\n        fin: null\n      },\n      fechaInicioInput: \"\",\n      fechaFinInput: \"\",\n      showStartCalendar: false,\n      showEndCalendar: false,\n      startCalendarMonth: currentMonth,\n      startCalendarYear: currentYear,\n      endCalendarMonth: currentMonth,\n      endCalendarYear: currentYear,\n      startCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      endCalendarStyle: {\n        top: '0px',\n        left: '0px'\n      },\n      cargando: {\n        ingresosHoy: false,\n        ingresosSemana: false,\n        ingresosMes: false,\n        ventas: false,\n        pdf: null,\n        // Para controlar el estado de carga del PDF por ID de venta\n        pdfThermal: null // Para controlar el estado de carga del PDF térmico por ID de venta\n      },\n      mensajeTablaVacia: \"Seleccione un rango de fechas para ver las ventas\",\n      modalDetalles: {\n        activo: false,\n        venta: {}\n      },\n      meses: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"],\n      diasSemana: [\"L\", \"M\", \"X\", \"J\", \"V\", \"S\", \"D\"],\n      ventasMensuales: [],\n      yearSeleccionado: new Date().getFullYear(),\n      cargandoVentasMensuales: false\n    };\n  },\n  computed: {\n    nombreMes() {\n      return this.meses[this.startCalendarMonth];\n    },\n    nombreMesFin() {\n      return this.meses[this.endCalendarMonth];\n    },\n    startCalendarDays() {\n      return this.getCalendarDays(this.startCalendarYear, this.startCalendarMonth);\n    },\n    endCalendarDays() {\n      return this.getCalendarDays(this.endCalendarYear, this.endCalendarMonth);\n    },\n    totalAnual() {\n      if (!this.ventasMensuales.length) return 0;\n      return this.ventasMensuales.reduce((sum, item) => sum + item.totalSales, 0);\n    },\n    promedioMensual() {\n      if (!this.ventasMensuales.length) return 0;\n      return this.totalAnual / this.ventasMensuales.length;\n    },\n    mesesConVentas() {\n      // Crear un array con todos los meses del año\n      const todosMeses = Array.from({\n        length: 12\n      }, (_, i) => ({\n        month: i + 1,\n        totalSales: 0\n      }));\n\n      // Actualizar con los datos reales de ventas\n      this.ventasMensuales.forEach(venta => {\n        const index = venta.month - 1;\n        if (index >= 0 && index < 12) {\n          todosMeses[index].totalSales = venta.totalSales;\n        }\n      });\n      return todosMeses;\n    },\n    mesMasAlto() {\n      if (!this.ventasMensuales.length) return \"Ninguno\";\n      const mesMaximo = this.ventasMensuales.reduce((max, item) => item.totalSales > max.totalSales ? item : max, {\n        month: 0,\n        totalSales: 0\n      });\n      if (mesMaximo.totalSales === 0) return \"Ninguno\";\n      return `${this.getNombreMes(mesMaximo.month)} ($${this.formatNumber(mesMaximo.totalSales)})`;\n    }\n  },\n  mounted() {\n    this.cargarDatos();\n    document.addEventListener('click', this.handleClickOutside);\n    window.addEventListener('resize', this.updateCalendarPositions);\n    window.addEventListener('scroll', this.updateCalendarPositions);\n    this.validRol();\n  },\n  beforeDestroy() {\n    document.removeEventListener('click', this.handleClickOutside);\n    window.removeEventListener('resize', this.updateCalendarPositions);\n    window.removeEventListener('scroll', this.updateCalendarPositions);\n  },\n  methods: {\n    validRol() {\n      const {\n        rol\n      } = AyudanteSesion.obtenerDatosSesion();\n      this.isAdmin = rol === 'Admin';\n    },\n    async descargarPDF(venta) {\n      if (!venta || !venta.id) {\n        this.mostrarError(\"ID de venta no válido\");\n        return;\n      }\n      this.cargando.pdf = venta.id;\n      try {\n        // Crear un enlace temporal y hacer clic en él para descargar\n        const link = document.createElement('a');\n        link.href = `${process.env.VUE_APP_API}print/download-pdf/${venta.id}`;\n        link.setAttribute('download', `venta-${venta.id}.pdf`);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n\n        // Limpiar\n        setTimeout(() => {\n          document.body.removeChild(link);\n        }, 100);\n        this.$buefy.toast.open({\n          message: \"PDF descargado correctamente\",\n          type: \"is-success\",\n          duration: 3000\n        });\n      } catch (error) {\n        console.error(\"Error al descargar el PDF:\", error);\n        this.mostrarError(\"Error al descargar el PDF. Por favor, intente nuevamente.\");\n      } finally {\n        this.cargando.pdf = null;\n      }\n    },\n    // Método para descargar PDF térmico - ACTUALIZADO\n    async descargarPDFThermal(venta) {\n      if (!venta || !venta.id) {\n        this.mostrarError(\"ID de venta no válido\");\n        return;\n      }\n      this.cargando.pdfThermal = venta.id;\n      try {\n        // Crear un enlace temporal y hacer clic en él para descargar\n        const link = document.createElement('a');\n        link.href = `${process.env.VUE_APP_API}print/download-pdf-thermal/${venta.id}`;\n        link.setAttribute('download', `venta-termica-${venta.id}.pdf`);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n\n        // Limpiar\n        setTimeout(() => {\n          document.body.removeChild(link);\n        }, 100);\n        this.$buefy.toast.open({\n          message: \"PDF térmico descargado correctamente\",\n          type: \"is-success\",\n          duration: 3000\n        });\n      } catch (error) {\n        console.error(\"Error al descargar el PDF térmico:\", error);\n        this.mostrarError(\"Error al descargar el PDF térmico. Por favor, intente nuevamente.\");\n      } finally {\n        this.cargando.pdfThermal = null;\n      }\n    },\n    // Método para ver PDF en nueva pestaña\n    verPDF(venta) {\n      if (!venta || !venta.id) {\n        this.mostrarError(\"ID de venta no válido\");\n        return;\n      }\n\n      // Usar la variable de entorno para construir la URL correctamente\n      const url = `${process.env.VUE_APP_API}print/view/${venta.id}`;\n\n      // Abrir en nueva pestaña y forzar recarga para evitar caché\n      const newWindow = window.open(url + '?t=' + new Date().getTime(), '_blank');\n\n      // Verificar si la ventana se abrió correctamente\n      if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {\n        this.mostrarError(\"El navegador bloqueó la apertura de la ventana. Por favor, permita ventanas emergentes.\");\n      }\n    },\n    // Método para ver PDF térmico\n    verPDFThermal(venta) {\n      if (!venta || !venta.id) {\n        this.mostrarError(\"ID de venta no válido\");\n        return;\n      }\n\n      // Usar la variable de entorno para construir la URL correctamente\n      const url = `${process.env.VUE_APP_API}print/viewThermal/${venta.id}`;\n\n      // Abrir en nueva pestaña y forzar recarga para evitar caché\n      const newWindow = window.open(url + '?t=' + new Date().getTime(), '_blank');\n\n      // Verificar si la ventana se abrió correctamente\n      if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {\n        this.mostrarError(\"El navegador bloqueó la apertura de la ventana. Por favor, permita ventanas emergentes.\");\n      }\n    },\n    async obtenerVentasMensuales(year) {\n      this.cargandoVentasMensuales = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `sales/monthly/${year}`\n        });\n        if (response.status === 200) {\n          this.ventasMensuales = response.data;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ventas mensuales:\", error);\n        this.mostrarError(\"Error al cargar las ventas mensuales\");\n        this.ventasMensuales = [];\n      } finally {\n        this.cargandoVentasMensuales = false;\n      }\n    },\n    cambiarYear(year) {\n      this.yearSeleccionado = year;\n      this.obtenerVentasMensuales(year);\n    },\n    getNombreMes(numeroMes) {\n      return this.meses[numeroMes - 1].charAt(0).toUpperCase() + this.meses[numeroMes - 1].slice(1);\n    },\n    async cargarDatos() {\n      try {\n        await Promise.all([this.obtenerIngresoHoy(), this.obtenerIngresoSemanal(), this.obtenerIngresoMensual(), this.obtenerInventoryProfit(), this.obtenerInventoryTotal(), this.obtenerInventoryTotalStock(), this.obtenerVentasMensuales(this.yearSeleccionado), this.obtenerProductoMasVendido(), this.obtenerTotalProveedores()]);\n      } catch (error) {\n        console.error(\"Error al cargar los datos:\", error);\n        this.mostrarError(\"Error al cargar los datos iniciales.\");\n      }\n    },\n    async obtenerTotalProveedores() {\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"providers/total-providers\"\n        });\n        if (response.status === 200) {\n          this.totalProveedores = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener total de proveedores:\", error);\n        this.mostrarError(\"Error al cargar el total de proveedores\");\n        this.totalProveedores = 0;\n      }\n    },\n    async obtenerProductoMasVendido() {\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sold-products/top-sold?limit=1\"\n        });\n        if (response.status === 200 && response.data.length > 0) {\n          this.topSellingProduct = response.data[0];\n        }\n      } catch (error) {\n        console.error(\"Error al obtener producto más vendido:\", error);\n        this.mostrarError(\"Error al cargar el producto más vendido\");\n        this.topSellingProduct = {\n          product_name: \"\",\n          total: 0,\n          units: 0\n        };\n      }\n    },\n    toggleStartCalendar() {\n      if (this.showEndCalendar) {\n        this.showEndCalendar = false;\n      }\n      this.showStartCalendar = !this.showStartCalendar;\n      if (this.showStartCalendar) {\n        this.$nextTick(() => {\n          this.positionStartCalendar();\n        });\n      }\n    },\n    toggleEndCalendar() {\n      if (this.showStartCalendar) {\n        this.showStartCalendar = false;\n      }\n      this.showEndCalendar = !this.showEndCalendar;\n      if (this.showEndCalendar) {\n        this.$nextTick(() => {\n          this.positionEndCalendar();\n        });\n      }\n    },\n    positionStartCalendar() {\n      const inputEl = this.$refs.startDateContainer;\n      if (inputEl && this.$refs.startCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.startCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.startCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    positionEndCalendar() {\n      const inputEl = this.$refs.endDateContainer;\n      if (inputEl && this.$refs.endCalendarRef) {\n        const rect = inputEl.getBoundingClientRect();\n        const calendarHeight = this.$refs.endCalendarRef.offsetHeight;\n        const windowHeight = window.innerHeight;\n\n        // Verificar si hay suficiente espacio debajo\n        const spaceBelow = windowHeight - rect.bottom;\n        const showBelow = spaceBelow >= calendarHeight;\n        this.endCalendarStyle = {\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\n          left: `${rect.left + window.scrollX}px`,\n          zIndex: '1000'\n        };\n      }\n    },\n    updateCalendarPositions() {\n      if (this.showStartCalendar) {\n        this.positionStartCalendar();\n      }\n      if (this.showEndCalendar) {\n        this.positionEndCalendar();\n      }\n    },\n    handleClickOutside(event) {\n      // Cerrar calendario inicial si se hace clic fuera\n      if (this.showStartCalendar && this.$refs.startCalendarRef && !this.$refs.startCalendarRef.contains(event.target) && this.$refs.startDateContainer && !this.$refs.startDateContainer.contains(event.target)) {\n        this.showStartCalendar = false;\n      }\n\n      // Cerrar calendario final si se hace clic fuera\n      if (this.showEndCalendar && this.$refs.endCalendarRef && !this.$refs.endCalendarRef.contains(event.target) && this.$refs.endDateContainer && !this.$refs.endDateContainer.contains(event.target)) {\n        this.showEndCalendar = false;\n      }\n    },\n    getCalendarDays(year, month) {\n      const firstDay = new Date(year, month, 1);\n      const lastDay = new Date(year, month + 1, 0);\n      const daysInMonth = lastDay.getDate();\n\n      // Obtener el día de la semana del primer día (0 = domingo, 1 = lunes, ..., 6 = sábado)\n      let firstDayOfWeek = firstDay.getDay();\n      // Ajustar para que lunes sea 0\n      firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\n      const days = [];\n\n      // Días del mes anterior\n      const prevMonth = month === 0 ? 11 : month - 1;\n      const prevMonthYear = month === 0 ? year - 1 : year;\n      const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = daysInPrevMonth - firstDayOfWeek + i + 1;\n        days.push({\n          day,\n          date: new Date(prevMonthYear, prevMonth, day),\n          otherMonth: true,\n          id: `prev-${day}`\n        });\n      }\n\n      // Días del mes actual\n      for (let i = 1; i <= daysInMonth; i++) {\n        days.push({\n          day: i,\n          date: new Date(year, month, i),\n          otherMonth: false,\n          id: `current-${i}`\n        });\n      }\n\n      // Días del mes siguiente\n      const nextMonth = month === 11 ? 0 : month + 1;\n      const nextMonthYear = month === 11 ? year + 1 : year;\n      const remainingDays = 42 - days.length; // 6 filas x 7 días\n\n      for (let i = 1; i <= remainingDays; i++) {\n        days.push({\n          day: i,\n          date: new Date(nextMonthYear, nextMonth, i),\n          otherMonth: true,\n          id: `next-${i}`\n        });\n      }\n      return days;\n    },\n    isSelectedStartDate(date) {\n      if (!this.filtroFechas.inicio) return false;\n      return date.getDate() === this.filtroFechas.inicio.getDate() && date.getMonth() === this.filtroFechas.inicio.getMonth() && date.getFullYear() === this.filtroFechas.inicio.getFullYear();\n    },\n    isSelectedEndDate(date) {\n      if (!this.filtroFechas.fin) return false;\n      return date.getDate() === this.filtroFechas.fin.getDate() && date.getMonth() === this.filtroFechas.fin.getMonth() && date.getFullYear() === this.filtroFechas.fin.getFullYear();\n    },\n    isToday(date) {\n      const today = new Date();\n      return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n    },\n    selectStartDate(date) {\n      this.filtroFechas.inicio = new Date(date);\n      this.fechaInicioInput = this.formatDateForInput(date);\n      this.showStartCalendar = false;\n    },\n    selectEndDate(date) {\n      this.filtroFechas.fin = new Date(date);\n      this.fechaFinInput = this.formatDateForInput(date);\n      this.showEndCalendar = false;\n    },\n    prevMonth(type) {\n      if (type === 'start') {\n        if (this.startCalendarMonth === 0) {\n          this.startCalendarMonth = 11;\n          this.startCalendarYear--;\n        } else {\n          this.startCalendarMonth--;\n        }\n      } else {\n        if (this.endCalendarMonth === 0) {\n          this.endCalendarMonth = 11;\n          this.endCalendarYear--;\n        } else {\n          this.endCalendarMonth--;\n        }\n      }\n    },\n    nextMonth(type) {\n      if (type === 'start') {\n        if (this.startCalendarMonth === 11) {\n          this.startCalendarMonth = 0;\n          this.startCalendarYear++;\n        } else {\n          this.startCalendarMonth++;\n        }\n      } else {\n        if (this.endCalendarMonth === 11) {\n          this.endCalendarMonth = 0;\n          this.endCalendarYear++;\n        } else {\n          this.endCalendarMonth++;\n        }\n      }\n    },\n    clearStartDate() {\n      this.filtroFechas.inicio = null;\n      this.fechaInicioInput = \"\";\n      this.showStartCalendar = false;\n    },\n    clearEndDate() {\n      this.filtroFechas.fin = null;\n      this.fechaFinInput = \"\";\n      this.showEndCalendar = false;\n    },\n    setTodayAsStart() {\n      const today = new Date();\n      this.filtroFechas.inicio = today;\n      this.fechaInicioInput = this.formatDateForInput(today);\n      this.startCalendarMonth = today.getMonth();\n      this.startCalendarYear = today.getFullYear();\n      this.showStartCalendar = false;\n    },\n    setTodayAsEnd() {\n      const today = new Date();\n      this.filtroFechas.fin = today;\n      this.fechaFinInput = this.formatDateForInput(today);\n      this.endCalendarMonth = today.getMonth();\n      this.endCalendarYear = today.getFullYear();\n      this.showEndCalendar = false;\n    },\n    formatDateForInput(date) {\n      if (!date) return '';\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    },\n    formatNumber(value) {\n      if (value === null || value === undefined) return \"0.00\";\n      const num = typeof value === \"string\" ? parseFloat(value) : Number(value);\n      return isNaN(num) ? \"0.00\" : num.toLocaleString(\"es-MX\", {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    formatearFecha(fecha) {\n      if (!fecha) return \"\";\n      return new Date(fecha).toLocaleDateString(\"es-MX\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      });\n    },\n    async obtenerVentasPorFecha() {\n      if (!this.filtroFechas.inicio || !this.filtroFechas.fin) {\n        return; // Simplemente retornar sin mostrar alerta\n      }\n      this.cargando.ventas = true;\n      this.mensajeTablaVacia = \"Cargando ventas...\";\n      try {\n        const formatearFecha = fecha => {\n          const d = new Date(fecha);\n          return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, \"0\")}-${String(d.getDate()).padStart(2, \"0\")}`;\n        };\n        const startDate = formatearFecha(this.filtroFechas.inicio);\n        const endDate = formatearFecha(this.filtroFechas.fin);\n        const response = await apiRequest({\n          method: \"GET\",\n          path: `sales?startDate=${startDate}&endDate=${endDate}`\n        });\n        if (response.status === 200) {\n          this.ventasPorFecha = response.data;\n          if (this.ventasPorFecha.length === 0) {\n            this.mensajeTablaVacia = \"No se encontraron ventas en las fechas seleccionadas\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ventas por fecha:\", error);\n        this.mostrarError(\"Error al cargar las ventas. Por favor, intente nuevamente.\");\n        this.ventasPorFecha = [];\n        this.mensajeTablaVacia = \"Error al cargar las ventas\";\n      } finally {\n        this.cargando.ventas = false;\n      }\n    },\n    verDetalles(venta) {\n      this.modalDetalles.venta = venta;\n      this.modalDetalles.activo = true;\n    },\n    limpiarFiltroFechas() {\n      this.filtroFechas.inicio = null;\n      this.filtroFechas.fin = null;\n      this.fechaInicioInput = \"\";\n      this.fechaFinInput = \"\";\n      this.ventasPorFecha = [];\n      this.mensajeTablaVacia = \"Seleccione un rango de fechas para ver las ventas\";\n    },\n    async obtenerIngresoHoy() {\n      this.cargando.ingresosHoy = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sales/today-income\"\n        });\n        if (response.status === 200) {\n          this.ingresoHoy = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ingreso del día:\", error);\n        this.mostrarError(\"Error al cargar el ingreso del día\");\n        this.ingresoHoy = 0;\n      } finally {\n        this.cargando.ingresosHoy = false;\n      }\n    },\n    async obtenerIngresoSemanal() {\n      this.cargando.ingresosSemana = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sales/weekly-income\"\n        });\n        if (response.status === 200) {\n          this.ingresoSemanal = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ingreso semanal:\", error);\n        this.mostrarError(\"Error al cargar el ingreso semanal\");\n        this.ingresoSemanal = 0;\n      } finally {\n        this.cargando.ingresosSemana = false;\n      }\n    },\n    async obtenerIngresoMensual() {\n      this.cargando.ingresosMes = true;\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"sales/monthly-income\"\n        });\n        if (response.status === 200) {\n          this.ingresoMensual = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ingreso mensual:\", error);\n        this.mostrarError(\"Error al cargar el ingreso mensual\");\n        this.ingresoMensual = 0;\n      } finally {\n        this.cargando.ingresosMes = false;\n      }\n    },\n    async obtenerInventoryProfit() {\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"products/inventory/total-profit\"\n        });\n        if (response.status === 200) {\n          this.inventoryProfit = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener ganancia del inventario:\", error);\n        this.mostrarError(\"Error al cargar la ganancia del inventario\");\n        this.inventoryProfit = 0;\n      }\n    },\n    async obtenerInventoryTotal() {\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"products/inventory/total-value\"\n        });\n        if (response.status === 200) {\n          this.inventoryTotal = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener valor total del inventario:\", error);\n        this.mostrarError(\"Error al cargar el valor total del inventario\");\n        this.inventoryTotal = 0;\n      }\n    },\n    async obtenerInventoryTotalStock() {\n      try {\n        const response = await apiRequest({\n          method: \"GET\",\n          path: \"products/inventory/total-stock\"\n        });\n        if (response.status === 200) {\n          this.inventoryTotalStock = response.data || 0;\n        }\n      } catch (error) {\n        console.error(\"Error al obtener total de stock:\", error);\n        this.mostrarError(\"Error al cargar el total de stock\");\n        this.inventoryTotalStock = 0;\n      }\n    },\n    mostrarError(mensaje) {\n      this.$buefy.toast.open({\n        message: mensaje,\n        type: \"is-danger\",\n        duration: 5000\n      });\n    }\n  }\n};","map":{"version":3,"names":["AyudanteSesion","apiRequest","name","data","today","Date","currentYear","getFullYear","currentMonth","getMonth","isAdmin","ingresoHoy","ingresoSemanal","ingresoMensual","inventoryProfit","inventoryTotal","inventoryTotalStock","totalProveedores","topSellingProduct","product_name","total","units","ventasPorFecha","filtroFechas","inicio","fin","fechaInicioInput","fechaFinInput","showStartCalendar","showEndCalendar","startCalendarMonth","startCalendarYear","endCalendarMonth","endCalendarYear","startCalendarStyle","top","left","endCalendarStyle","cargando","ingresosHoy","ingresosSemana","ingresosMes","ventas","pdf","pdfThermal","mensajeTablaVacia","modalDetalles","activo","venta","meses","diasSemana","ventasMensuales","yearSeleccionado","cargandoVentasMensuales","computed","nombreMes","nombreMesFin","startCalendarDays","getCalendarDays","endCalendarDays","totalAnual","length","reduce","sum","item","totalSales","promedioMensual","mesesConVentas","todosMeses","Array","from","_","i","month","forEach","index","mesMasAlto","mesMaximo","max","getNombreMes","formatNumber","mounted","cargarDatos","document","addEventListener","handleClickOutside","window","updateCalendarPositions","validRol","beforeDestroy","removeEventListener","methods","rol","obtenerDatosSesion","descargarPDF","id","mostrarError","link","createElement","href","process","env","VUE_APP_API","setAttribute","body","appendChild","click","setTimeout","removeChild","$buefy","toast","open","message","type","duration","error","console","descargarPDFThermal","verPDF","url","newWindow","getTime","closed","verPDFThermal","obtenerVentasMensuales","year","response","method","path","status","cambiarYear","numeroMes","charAt","toUpperCase","slice","Promise","all","obtenerIngresoHoy","obtenerIngresoSemanal","obtenerIngresoMensual","obtenerInventoryProfit","obtenerInventoryTotal","obtenerInventoryTotalStock","obtenerProductoMasVendido","obtenerTotalProveedores","toggleStartCalendar","$nextTick","positionStartCalendar","toggleEndCalendar","positionEndCalendar","inputEl","$refs","startDateContainer","startCalendarRef","rect","getBoundingClientRect","calendarHeight","offsetHeight","windowHeight","innerHeight","spaceBelow","bottom","showBelow","scrollY","scrollX","zIndex","endDateContainer","endCalendarRef","event","contains","target","firstDay","lastDay","daysInMonth","getDate","firstDayOfWeek","getDay","days","prevMonth","prevMonthYear","daysInPrevMonth","day","push","date","otherMonth","nextMonth","nextMonthYear","remainingDays","isSelectedStartDate","isSelectedEndDate","isToday","selectStartDate","formatDateForInput","selectEndDate","clearStartDate","clearEndDate","setTodayAsStart","setTodayAsEnd","String","padStart","value","undefined","num","parseFloat","Number","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatearFecha","fecha","toLocaleDateString","obtenerVentasPorFecha","d","startDate","endDate","verDetalles","limpiarFiltroFechas","mensaje"],"sources":["src/components/Ventas/HistorialVentas.vue"],"sourcesContent":["<template>\r\n\r\n\r\n  <div class=\"historial-ventas\">\r\n\r\n\r\n    <!-- Resumen de Ingresos -->\r\n <div v-if=\"isAdmin\">\r\n  <header class=\"header\">\r\n      <h1 class=\"title is-2\">Historial General</h1>\r\n      <p class=\"subtitle is-5\">\r\n        <b-icon icon=\"calendar-today\"></b-icon>\r\n        {{\r\n          new Date().toLocaleDateString(\"es-MX\", {\r\n            year: \"numeric\",\r\n            month: \"long\",\r\n            day: \"numeric\",\r\n          })\r\n        }}\r\n      </p>\r\n    </header>\r\n  <div class=\"columns is-multiline\">\r\n      <!-- Ingreso del Día -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">HOY</p>\r\n                    <p class=\"title is-4\">${{ formatNumber(ingresoHoy) }}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"calendar-today\" size=\"is-large\" type=\"is-info\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ingreso Semanal -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">ESTA SEMANA</p>\r\n                    <p class=\"title is-4\">\r\n                      ${{ formatNumber(ingresoSemanal) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"calendar-week\" size=\"is-large\" type=\"is-primary\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ingreso Mensual -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">ESTE MES</p>\r\n                    <p class=\"title is-4\">\r\n                      ${{ formatNumber(ingresoMensual) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"calendar-month\" size=\"is-large\" type=\"is-warning\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ganancia del Inventario -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">GANANCIA INVENTARIO</p>\r\n                    <p class=\"title is-4\">\r\n                      ${{ formatNumber(inventoryProfit) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"trending-up\" size=\"is-large\" type=\"is-success\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Valor Total del Inventario -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">VALOR INVENTARIO</p>\r\n                    <p class=\"title is-4\">\r\n                      ${{ formatNumber(inventoryTotal) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"package\" size=\"is-large\" type=\"is-info\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total Stock del Inventario -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">TOTAL PRODUCTOS</p>\r\n                    <p class=\"title is-4\">\r\n                      {{ formatNumber(inventoryTotalStock) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"archive\" size=\"is-large\" type=\"is-primary\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Producto Más Vendido -->\r\n      <div class=\"column is-3\">\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">PRODUCTO MÁS VENDIDO</p>\r\n                    <p class=\"title is-5\">{{ topSellingProduct.product_name || 'Sin datos' }}</p>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"trophy\" size=\"is-large\" type=\"is-warning\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total de Proveedores -->\r\n      <div class=\"column is-3\" >\r\n        <div class=\"card\">\r\n          <div class=\"card-content\">\r\n            <div class=\"level is-mobile\">\r\n              <div class=\"level-left\">\r\n                <div class=\"level-item\">\r\n                  <div>\r\n                    <p class=\"heading\">TOTAL PROVEEDORES</p>\r\n                    <p class=\"title is-4\">{{ totalProveedores }}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"level-right\">\r\n                <div class=\"level-item\">\r\n                  <b-icon icon=\"truck-delivery\" size=\"is-large\" type=\"is-danger\"></b-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n </div>\r\n\r\n    <!-- Filtro de Ventas por Fecha -->\r\n    <div class=\"card mb-5\">\r\n      <header class=\"card-header\">\r\n        <p class=\"card-header-title\">\r\n          <b-icon icon=\"filter\"></b-icon>\r\n          Filtrar Ventas por Fecha\r\n        </p>\r\n      </header>\r\n      <div class=\"card-content\">\r\n        <div class=\"columns\">\r\n          <div class=\"column is-4\">\r\n            <b-field label=\"Fecha Inicial\">\r\n              <div class=\"date-input-container\" ref=\"startDateContainer\">\r\n                <input type=\"text\" class=\"input\" placeholder=\"dd/mm/aaaa\" v-model=\"fechaInicioInput\"\r\n                  @click=\"toggleStartCalendar\" readonly>\r\n                <span class=\"icon is-right\">\r\n                  <i class=\"mdi mdi-calendar\"></i>\r\n                </span>\r\n              </div>\r\n            </b-field>\r\n          </div>\r\n          <div class=\"column is-4\">\r\n            <b-field label=\"Fecha Final\">\r\n              <div class=\"date-input-container\" ref=\"endDateContainer\">\r\n                <input type=\"text\" class=\"input\" placeholder=\"dd/mm/aaaa\" v-model=\"fechaFinInput\"\r\n                  @click=\"toggleEndCalendar\" readonly>\r\n                <span class=\"icon is-right\">\r\n                  <i class=\"mdi mdi-calendar\"></i>\r\n                </span>\r\n              </div>\r\n            </b-field>\r\n          </div>\r\n          <div class=\"column is-4\">\r\n            <b-field label=\"Buscar\">\r\n              <div class=\"buttons\">\r\n                <b-button type=\"is-primary\" icon-left=\"magnify\" @click=\"obtenerVentasPorFecha\"\r\n                  :loading=\"cargando.ventas\" :disabled=\"!filtroFechas.inicio || !filtroFechas.fin\">\r\n                  Buscar\r\n                </b-button>\r\n                <b-button type=\"is-light\" icon-left=\"close-circle\" @click=\"limpiarFiltroFechas\"\r\n                  :disabled=\"!filtroFechas.inicio && !filtroFechas.fin\">\r\n                  Limpiar\r\n                </b-button>\r\n              </div>\r\n            </b-field>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Tabla de Ventas -->\r\n        <b-table :data=\"ventasPorFecha\" :loading=\"cargando.ventas\" :striped=\"true\" :hoverable=\"true\"\r\n          :empty=\"mensajeTablaVacia\">\r\n          <b-table-column field=\"date\" label=\"Fecha\" v-slot=\"props\">\r\n            {{ formatearFecha(props.row.date) }}\r\n          </b-table-column>\r\n          <b-table-column field=\"totalWithIVA\" label=\"Total con IVA\" numeric v-slot=\"props\">\r\n            ${{ formatNumber(props.row.totalWithIVA) }}\r\n          </b-table-column>\r\n          <b-table-column field=\"totalWithoutIVA\" label=\"Total sin IVA\" numeric v-slot=\"props\">\r\n            ${{ formatNumber(props.row.totalWithoutIVA) }}\r\n          </b-table-column>\r\n          <b-table-column field=\"totalIVA\" label=\"IVA\" numeric v-slot=\"props\">\r\n            ${{ formatNumber(props.row.totalIVA) }}\r\n          </b-table-column>\r\n          <b-table-column field=\"paid\" label=\"Pagado\" numeric v-slot=\"props\">\r\n            ${{ formatNumber(props.row.paid) }}\r\n          </b-table-column>\r\n          <b-table-column field=\"actions\" label=\"Acciones\" v-slot=\"props\" width=\"420\">\r\n            <div class=\"action-buttons\">\r\n              <!-- Ver productos -->\r\n              <b-button size=\"is-small\" type=\"is-info\" icon-left=\"eye\" @click=\"verDetalles(props.row)\">\r\n                Ver productos\r\n              </b-button>\r\n              \r\n              <!-- Dropdown para opciones de PDF -->\r\n              <b-dropdown aria-role=\"list\" position=\"is-bottom-left\" append-to-body>\r\n                <template #trigger>\r\n                  <b-button size=\"is-small\" type=\"is-primary\" icon-left=\"file-pdf\">\r\n                    PDF\r\n                    <b-icon icon=\"menu-down\"></b-icon>\r\n                  </b-button>\r\n                </template>\r\n                \r\n                <b-dropdown-item aria-role=\"listitem\" @click=\"descargarPDF(props.row)\" \r\n                  :disabled=\"cargando.pdf === props.row.id\">\r\n                  <b-icon icon=\"download\"></b-icon>\r\n                  Descargar PDF\r\n                </b-dropdown-item>\r\n                \r\n                <b-dropdown-item aria-role=\"listitem\" @click=\"descargarPDFThermal(props.row)\" \r\n                  :disabled=\"cargando.pdfThermal === props.row.id\">\r\n                  <b-icon icon=\"printer\"></b-icon>\r\n                  Descargar Térmico\r\n                </b-dropdown-item>\r\n                \r\n                <b-dropdown-item aria-role=\"listitem\" @click=\"verPDF(props.row)\">\r\n                  <b-icon icon=\"eye\"></b-icon>\r\n                  Ver PDF\r\n                </b-dropdown-item>\r\n                \r\n                <b-dropdown-item aria-role=\"listitem\" @click=\"verPDFThermal(props.row)\">\r\n                  <b-icon icon=\"eye\"></b-icon>\r\n                  Ver Térmico\r\n                </b-dropdown-item>\r\n              </b-dropdown>\r\n            </div>\r\n          </b-table-column>\r\n        </b-table>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Ventas Mensuales por Año -->\r\n    <div class=\"card mb-5\" v-if=\"isAdmin\">\r\n      <div class=\"ventas-mensuales-header\">\r\n        <div class=\"ventas-mensuales-title\">\r\n          <b-icon icon=\"chart-bar\"></b-icon>\r\n          <span>Ventas Mensuales</span>\r\n        </div>\r\n        <div class=\"ventas-mensuales-year\">\r\n          <b-select v-model=\"yearSeleccionado\" @input=\"cambiarYear\">\r\n            <option v-for=\"year in [2023, 2024, 2025]\" :key=\"year\" :value=\"year\">\r\n              {{ year }}\r\n            </option>\r\n          </b-select>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"ventas-mensuales-content\" :class=\"{ 'is-loading': cargandoVentasMensuales }\">\r\n        <!-- Lista de meses con ventas -->\r\n        <div class=\"ventas-mensuales-list\">\r\n          <div v-for=\"(mes, index) in mesesConVentas\" :key=\"mes.month\" class=\"ventas-mensuales-item\"\r\n            :class=\"{ 'is-alternate': index % 2 !== 0 }\">\r\n            <div class=\"mes-nombre\">{{ getNombreMes(mes.month) }}</div>\r\n            <div class=\"mes-valor\" :class=\"mes.totalSales > 0 ? 'is-success' : 'is-purple'\">\r\n              ${{ formatNumber(mes.totalSales) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Resumen de ventas anuales -->\r\n        <div class=\"ventas-mensuales-summary\">\r\n          <div class=\"summary-item\">\r\n            <div class=\"summary-label\">Total Anual:</div>\r\n            <div class=\"summary-value\">${{ formatNumber(totalAnual) }}</div>\r\n          </div>\r\n          <div class=\"summary-item\">\r\n            <div class=\"summary-label\">Promedio Mensual:</div>\r\n            <div class=\"summary-value\">${{ formatNumber(promedioMensual) }}</div>\r\n          </div>\r\n          <div class=\"summary-item\">\r\n            <div class=\"summary-label\">Mes más Alto:</div>\r\n            <div class=\"summary-value\">{{ mesMasAlto }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendarios flotantes -->\r\n    <div v-if=\"showStartCalendar\" class=\"floating-calendar\" :style=\"startCalendarStyle\" ref=\"startCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMes }} de {{ startCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('start')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('start')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in startCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedStartDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectStartDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearStartDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsStart\">Hoy</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"showEndCalendar\" class=\"floating-calendar\" :style=\"endCalendarStyle\" ref=\"endCalendarRef\">\r\n      <div class=\"calendar-header\">\r\n        <div class=\"month-year\">\r\n          {{ nombreMesFin }} de {{ endCalendarYear }}\r\n          <div class=\"nav-buttons\">\r\n            <button @click.stop=\"prevMonth('end')\">\r\n              <span class=\"icon\">←</span>\r\n            </button>\r\n            <button @click.stop=\"nextMonth('end')\">\r\n              <span class=\"icon\">→</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"weekdays\">\r\n        <div v-for=\"day in diasSemana\" :key=\"day\">{{ day }}</div>\r\n      </div>\r\n      <div class=\"days\">\r\n        <div v-for=\"day in endCalendarDays\" :key=\"day.id\" :class=\"[\r\n          'day',\r\n          { 'other-month': day.otherMonth },\r\n          { 'selected': isSelectedEndDate(day.date) },\r\n          { 'today': isToday(day.date) }\r\n        ]\" @click.stop=\"selectEndDate(day.date)\">\r\n          {{ day.day }}\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-footer\">\r\n        <button class=\"btn-clear\" @click.stop=\"clearEndDate\">Borrar</button>\r\n        <button class=\"btn-today\" @click.stop=\"setTodayAsEnd\">Hoy</button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de Detalles de Venta -->\r\n    <b-modal :active.sync=\"modalDetalles.activo\" has-modal-card>\r\n      <div class=\"modal-card\" style=\"width: auto\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">Detalles de Venta</p>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <div class=\"content\">\r\n            <h4>Fecha: {{ formatearFecha(modalDetalles.venta.date) }}</h4>\r\n            <h4>Total: ${{ formatNumber(modalDetalles.venta.totalWithIVA) }}</h4>\r\n\r\n            <b-table :data=\"modalDetalles.venta.products || []\" :striped=\"true\" :hoverable=\"true\">\r\n              <b-table-column field=\"productId\" label=\"ID Producto\" v-slot=\"props\">\r\n                {{ props.row.productId }}\r\n              </b-table-column>\r\n              <b-table-column field=\"quantity\" label=\"Cantidad\" numeric v-slot=\"props\">\r\n                {{ props.row.quantity }}\r\n              </b-table-column>\r\n              <b-table-column field=\"price\" label=\"Precio\" numeric v-slot=\"props\">\r\n                ${{ formatNumber(props.row.price) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"priceWithouthIVA\" label=\"Precio sin IVA\" numeric v-slot=\"props\">\r\n                ${{ formatNumber(props.row.priceWithouthIVA) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"iva\" label=\"IVA\" numeric v-slot=\"props\">\r\n                ${{ formatNumber(props.row.iva) }}\r\n              </b-table-column>\r\n            </b-table>\r\n          </div>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <b-button @click=\"modalDetalles.activo = false\">Cerrar</b-button>\r\n        </footer>\r\n      </div>\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AyudanteSesion from \"@/Servicios/AyudanteSesion\";\r\nimport apiRequest from \"@/Servicios/HttpService\";\r\n\r\nexport default {\r\n  name: \"HistorialVentas\",\r\n\r\n  data() {\r\n    const today = new Date();\r\n    const currentYear = today.getFullYear();\r\n    const currentMonth = today.getMonth();\r\n\r\n    return {\r\n      isAdmin: false,\r\n      ingresoHoy: 0,\r\n      ingresoSemanal: 0,\r\n      ingresoMensual: 0,\r\n      inventoryProfit: 0,\r\n      inventoryTotal: 0,\r\n      inventoryTotalStock: 0,\r\n      totalProveedores: 0,\r\n      topSellingProduct: {\r\n        product_name: \"\",\r\n        total: 0,\r\n        units: 0\r\n      },\r\n      ventasPorFecha: [],\r\n      filtroFechas: {\r\n        inicio: null,\r\n        fin: null,\r\n      },\r\n      fechaInicioInput: \"\",\r\n      fechaFinInput: \"\",\r\n      showStartCalendar: false,\r\n      showEndCalendar: false,\r\n      startCalendarMonth: currentMonth,\r\n      startCalendarYear: currentYear,\r\n      endCalendarMonth: currentMonth,\r\n      endCalendarYear: currentYear,\r\n      startCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n      endCalendarStyle: {\r\n        top: '0px',\r\n        left: '0px'\r\n      },\r\n      cargando: {\r\n        ingresosHoy: false,\r\n        ingresosSemana: false,\r\n        ingresosMes: false,\r\n        ventas: false,\r\n        pdf: null, // Para controlar el estado de carga del PDF por ID de venta\r\n        pdfThermal: null, // Para controlar el estado de carga del PDF térmico por ID de venta\r\n      },\r\n      mensajeTablaVacia: \"Seleccione un rango de fechas para ver las ventas\",\r\n      modalDetalles: {\r\n        activo: false,\r\n        venta: {}\r\n      },\r\n      meses: [\r\n        \"enero\",\r\n        \"febrero\",\r\n        \"marzo\",\r\n        \"abril\",\r\n        \"mayo\",\r\n        \"junio\",\r\n        \"julio\",\r\n        \"agosto\",\r\n        \"septiembre\",\r\n        \"octubre\",\r\n        \"noviembre\",\r\n        \"diciembre\",\r\n      ],\r\n      diasSemana: [\"L\", \"M\", \"X\", \"J\", \"V\", \"S\", \"D\"],\r\n      ventasMensuales: [],\r\n      yearSeleccionado: new Date().getFullYear(),\r\n      cargandoVentasMensuales: false,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    nombreMes() {\r\n      return this.meses[this.startCalendarMonth];\r\n    },\r\n    nombreMesFin() {\r\n      return this.meses[this.endCalendarMonth];\r\n    },\r\n    startCalendarDays() {\r\n      return this.getCalendarDays(this.startCalendarYear, this.startCalendarMonth);\r\n    },\r\n    endCalendarDays() {\r\n      return this.getCalendarDays(this.endCalendarYear, this.endCalendarMonth);\r\n    },\r\n    totalAnual() {\r\n      if (!this.ventasMensuales.length) return 0;\r\n      return this.ventasMensuales.reduce((sum, item) => sum + item.totalSales, 0);\r\n    },\r\n    promedioMensual() {\r\n      if (!this.ventasMensuales.length) return 0;\r\n      return this.totalAnual / this.ventasMensuales.length;\r\n    },\r\n    mesesConVentas() {\r\n      // Crear un array con todos los meses del año\r\n      const todosMeses = Array.from({ length: 12 }, (_, i) => ({\r\n        month: i + 1,\r\n        totalSales: 0\r\n      }));\r\n\r\n      // Actualizar con los datos reales de ventas\r\n      this.ventasMensuales.forEach(venta => {\r\n        const index = venta.month - 1;\r\n        if (index >= 0 && index < 12) {\r\n          todosMeses[index].totalSales = venta.totalSales;\r\n        }\r\n      });\r\n\r\n      return todosMeses;\r\n    },\r\n    mesMasAlto() {\r\n      if (!this.ventasMensuales.length) return \"Ninguno\";\r\n\r\n      const mesMaximo = this.ventasMensuales.reduce((max, item) =>\r\n        item.totalSales > max.totalSales ? item : max,\r\n        { month: 0, totalSales: 0 }\r\n      );\r\n\r\n      if (mesMaximo.totalSales === 0) return \"Ninguno\";\r\n\r\n      return `${this.getNombreMes(mesMaximo.month)} ($${this.formatNumber(mesMaximo.totalSales)})`;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.cargarDatos();\r\n    document.addEventListener('click', this.handleClickOutside);\r\n    window.addEventListener('resize', this.updateCalendarPositions);\r\n    window.addEventListener('scroll', this.updateCalendarPositions);\r\n    this.validRol()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    document.removeEventListener('click', this.handleClickOutside);\r\n    window.removeEventListener('resize', this.updateCalendarPositions);\r\n    window.removeEventListener('scroll', this.updateCalendarPositions);\r\n  },\r\n\r\n  methods: {\r\n    \r\n    validRol (){\r\n      const {rol} = AyudanteSesion.obtenerDatosSesion();\r\n      this.isAdmin = rol === 'Admin';\r\n    },\r\n    async descargarPDF(venta) {\r\n      if (!venta || !venta.id) {\r\n        this.mostrarError(\"ID de venta no válido\");\r\n        return;\r\n      }\r\n\r\n      this.cargando.pdf = venta.id;\r\n\r\n      try {\r\n        // Crear un enlace temporal y hacer clic en él para descargar\r\n        const link = document.createElement('a');\r\n        link.href = `${process.env.VUE_APP_API}print/download-pdf/${venta.id}`;\r\n        link.setAttribute('download', `venta-${venta.id}.pdf`);\r\n        link.setAttribute('target', '_blank');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        \r\n        // Limpiar\r\n        setTimeout(() => {\r\n          document.body.removeChild(link);\r\n        }, 100);\r\n        \r\n        this.$buefy.toast.open({\r\n          message: \"PDF descargado correctamente\",\r\n          type: \"is-success\",\r\n          duration: 3000,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error al descargar el PDF:\", error);\r\n        this.mostrarError(\"Error al descargar el PDF. Por favor, intente nuevamente.\");\r\n      } finally {\r\n        this.cargando.pdf = null;\r\n      }\r\n    },\r\n\r\n    // Método para descargar PDF térmico - ACTUALIZADO\r\n    async descargarPDFThermal(venta) {\r\n      if (!venta || !venta.id) {\r\n        this.mostrarError(\"ID de venta no válido\");\r\n        return;\r\n      }\r\n\r\n      this.cargando.pdfThermal = venta.id;\r\n\r\n      try {\r\n        // Crear un enlace temporal y hacer clic en él para descargar\r\n        const link = document.createElement('a');\r\n        link.href = `${process.env.VUE_APP_API}print/download-pdf-thermal/${venta.id}`;\r\n        link.setAttribute('download', `venta-termica-${venta.id}.pdf`);\r\n        link.setAttribute('target', '_blank');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        \r\n        // Limpiar\r\n        setTimeout(() => {\r\n          document.body.removeChild(link);\r\n        }, 100);\r\n        \r\n        this.$buefy.toast.open({\r\n          message: \"PDF térmico descargado correctamente\",\r\n          type: \"is-success\",\r\n          duration: 3000,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error al descargar el PDF térmico:\", error);\r\n        this.mostrarError(\"Error al descargar el PDF térmico. Por favor, intente nuevamente.\");\r\n      } finally {\r\n        this.cargando.pdfThermal = null;\r\n      }\r\n    },\r\n\r\n    // Método para ver PDF en nueva pestaña\r\n    verPDF(venta) {\r\n      if (!venta || !venta.id) {\r\n        this.mostrarError(\"ID de venta no válido\");\r\n        return;\r\n      }\r\n\r\n      // Usar la variable de entorno para construir la URL correctamente\r\n      const url = `${process.env.VUE_APP_API}print/view/${venta.id}`;\r\n      \r\n      // Abrir en nueva pestaña y forzar recarga para evitar caché\r\n      const newWindow = window.open(url + '?t=' + new Date().getTime(), '_blank');\r\n      \r\n      // Verificar si la ventana se abrió correctamente\r\n      if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {\r\n        this.mostrarError(\"El navegador bloqueó la apertura de la ventana. Por favor, permita ventanas emergentes.\");\r\n      }\r\n    },\r\n\r\n    // Método para ver PDF térmico\r\n    verPDFThermal(venta) {\r\n      if (!venta || !venta.id) {\r\n        this.mostrarError(\"ID de venta no válido\");\r\n        return;\r\n      }\r\n\r\n      // Usar la variable de entorno para construir la URL correctamente\r\n      const url = `${process.env.VUE_APP_API}print/viewThermal/${venta.id}`;\r\n      \r\n      // Abrir en nueva pestaña y forzar recarga para evitar caché\r\n      const newWindow = window.open(url + '?t=' + new Date().getTime(), '_blank');\r\n      \r\n      // Verificar si la ventana se abrió correctamente\r\n      if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {\r\n        this.mostrarError(\"El navegador bloqueó la apertura de la ventana. Por favor, permita ventanas emergentes.\");\r\n      }\r\n    },\r\n\r\n    async obtenerVentasMensuales(year) {\r\n      this.cargandoVentasMensuales = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `sales/monthly/${year}`,\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.ventasMensuales = response.data;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ventas mensuales:\", error);\r\n        this.mostrarError(\"Error al cargar las ventas mensuales\");\r\n        this.ventasMensuales = [];\r\n      } finally {\r\n        this.cargandoVentasMensuales = false;\r\n      }\r\n    },\r\n\r\n    cambiarYear(year) {\r\n      this.yearSeleccionado = year;\r\n      this.obtenerVentasMensuales(year);\r\n    },\r\n\r\n    getNombreMes(numeroMes) {\r\n      return this.meses[numeroMes - 1].charAt(0).toUpperCase() + this.meses[numeroMes - 1].slice(1);\r\n    },\r\n\r\n    async cargarDatos() {\r\n      try {\r\n        await Promise.all([\r\n          this.obtenerIngresoHoy(),\r\n          this.obtenerIngresoSemanal(),\r\n          this.obtenerIngresoMensual(),\r\n          this.obtenerInventoryProfit(),\r\n          this.obtenerInventoryTotal(),\r\n          this.obtenerInventoryTotalStock(),\r\n          this.obtenerVentasMensuales(this.yearSeleccionado),\r\n          this.obtenerProductoMasVendido(),\r\n          this.obtenerTotalProveedores(),\r\n        ]);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar los datos:\", error);\r\n        this.mostrarError(\"Error al cargar los datos iniciales.\");\r\n      }\r\n    },\r\n\r\n    async obtenerTotalProveedores() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"providers/total-providers\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.totalProveedores = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener total de proveedores:\", error);\r\n        this.mostrarError(\"Error al cargar el total de proveedores\");\r\n        this.totalProveedores = 0;\r\n      }\r\n    },\r\n\r\n    async obtenerProductoMasVendido() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sold-products/top-sold?limit=1\",\r\n        });\r\n\r\n        if (response.status === 200 && response.data.length > 0) {\r\n          this.topSellingProduct = response.data[0];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener producto más vendido:\", error);\r\n        this.mostrarError(\"Error al cargar el producto más vendido\");\r\n        this.topSellingProduct = {\r\n          product_name: \"\",\r\n          total: 0,\r\n          units: 0\r\n        };\r\n      }\r\n    },\r\n\r\n    toggleStartCalendar() {\r\n      if (this.showEndCalendar) {\r\n        this.showEndCalendar = false;\r\n      }\r\n      this.showStartCalendar = !this.showStartCalendar;\r\n      if (this.showStartCalendar) {\r\n        this.$nextTick(() => {\r\n          this.positionStartCalendar();\r\n        });\r\n      }\r\n    },\r\n\r\n    toggleEndCalendar() {\r\n      if (this.showStartCalendar) {\r\n        this.showStartCalendar = false;\r\n      }\r\n      this.showEndCalendar = !this.showEndCalendar;\r\n      if (this.showEndCalendar) {\r\n        this.$nextTick(() => {\r\n          this.positionEndCalendar();\r\n        });\r\n      }\r\n    },\r\n\r\n    positionStartCalendar() {\r\n      const inputEl = this.$refs.startDateContainer;\r\n      if (inputEl && this.$refs.startCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.startCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.startCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    positionEndCalendar() {\r\n      const inputEl = this.$refs.endDateContainer;\r\n      if (inputEl && this.$refs.endCalendarRef) {\r\n        const rect = inputEl.getBoundingClientRect();\r\n        const calendarHeight = this.$refs.endCalendarRef.offsetHeight;\r\n        const windowHeight = window.innerHeight;\r\n\r\n        // Verificar si hay suficiente espacio debajo\r\n        const spaceBelow = windowHeight - rect.bottom;\r\n        const showBelow = spaceBelow >= calendarHeight;\r\n\r\n        this.endCalendarStyle = {\r\n          top: showBelow ? `${rect.bottom + window.scrollY}px` : `${rect.top + window.scrollY - calendarHeight}px`,\r\n          left: `${rect.left + window.scrollX}px`,\r\n          zIndex: '1000'\r\n        };\r\n      }\r\n    },\r\n\r\n    updateCalendarPositions() {\r\n      if (this.showStartCalendar) {\r\n        this.positionStartCalendar();\r\n      }\r\n      if (this.showEndCalendar) {\r\n        this.positionEndCalendar();\r\n      }\r\n    },\r\n\r\n    handleClickOutside(event) {\r\n      // Cerrar calendario inicial si se hace clic fuera\r\n      if (this.showStartCalendar &&\r\n        this.$refs.startCalendarRef &&\r\n        !this.$refs.startCalendarRef.contains(event.target) &&\r\n        this.$refs.startDateContainer &&\r\n        !this.$refs.startDateContainer.contains(event.target)) {\r\n        this.showStartCalendar = false;\r\n      }\r\n\r\n      // Cerrar calendario final si se hace clic fuera\r\n      if (this.showEndCalendar &&\r\n        this.$refs.endCalendarRef &&\r\n        !this.$refs.endCalendarRef.contains(event.target) &&\r\n        this.$refs.endDateContainer &&\r\n        !this.$refs.endDateContainer.contains(event.target)) {\r\n        this.showEndCalendar = false;\r\n      }\r\n    },\r\n\r\n    getCalendarDays(year, month) {\r\n      const firstDay = new Date(year, month, 1);\r\n      const lastDay = new Date(year, month + 1, 0);\r\n      const daysInMonth = lastDay.getDate();\r\n\r\n      // Obtener el día de la semana del primer día (0 = domingo, 1 = lunes, ..., 6 = sábado)\r\n      let firstDayOfWeek = firstDay.getDay();\r\n      // Ajustar para que lunes sea 0\r\n      firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\r\n\r\n      const days = [];\r\n\r\n      // Días del mes anterior\r\n      const prevMonth = month === 0 ? 11 : month - 1;\r\n      const prevMonthYear = month === 0 ? year - 1 : year;\r\n      const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\r\n\r\n      for (let i = 0; i < firstDayOfWeek; i++) {\r\n        const day = daysInPrevMonth - firstDayOfWeek + i + 1;\r\n        days.push({\r\n          day,\r\n          date: new Date(prevMonthYear, prevMonth, day),\r\n          otherMonth: true,\r\n          id: `prev-${day}`\r\n        });\r\n      }\r\n\r\n      // Días del mes actual\r\n      for (let i = 1; i <= daysInMonth; i++) {\r\n        days.push({\r\n          day: i,\r\n          date: new Date(year, month, i),\r\n          otherMonth: false,\r\n          id: `current-${i}`\r\n        });\r\n      }\r\n\r\n      // Días del mes siguiente\r\n      const nextMonth = month === 11 ? 0 : month + 1;\r\n      const nextMonthYear = month === 11 ? year + 1 : year;\r\n      const remainingDays = 42 - days.length; // 6 filas x 7 días\r\n\r\n      for (let i = 1; i <= remainingDays; i++) {\r\n        days.push({\r\n          day: i,\r\n          date: new Date(nextMonthYear, nextMonth, i),\r\n          otherMonth: true,\r\n          id: `next-${i}`\r\n        });\r\n      }\r\n\r\n      return days;\r\n    },\r\n\r\n    isSelectedStartDate(date) {\r\n      if (!this.filtroFechas.inicio) return false;\r\n\r\n      return date.getDate() === this.filtroFechas.inicio.getDate() &&\r\n        date.getMonth() === this.filtroFechas.inicio.getMonth() &&\r\n        date.getFullYear() === this.filtroFechas.inicio.getFullYear();\r\n    },\r\n\r\n    isSelectedEndDate(date) {\r\n      if (!this.filtroFechas.fin) return false;\r\n\r\n      return date.getDate() === this.filtroFechas.fin.getDate() &&\r\n        date.getMonth() === this.filtroFechas.fin.getMonth() &&\r\n        date.getFullYear() === this.filtroFechas.fin.getFullYear();\r\n    },\r\n\r\n    isToday(date) {\r\n      const today = new Date();\r\n      return date.getDate() === today.getDate() &&\r\n        date.getMonth() === today.getMonth() &&\r\n        date.getFullYear() === today.getFullYear();\r\n    },\r\n\r\n    selectStartDate(date) {\r\n      this.filtroFechas.inicio = new Date(date);\r\n      this.fechaInicioInput = this.formatDateForInput(date);\r\n      this.showStartCalendar = false;\r\n    },\r\n\r\n    selectEndDate(date) {\r\n      this.filtroFechas.fin = new Date(date);\r\n      this.fechaFinInput = this.formatDateForInput(date);\r\n      this.showEndCalendar = false;\r\n    },\r\n\r\n    prevMonth(type) {\r\n      if (type === 'start') {\r\n        if (this.startCalendarMonth === 0) {\r\n          this.startCalendarMonth = 11;\r\n          this.startCalendarYear--;\r\n        } else {\r\n          this.startCalendarMonth--;\r\n        }\r\n      } else {\r\n        if (this.endCalendarMonth === 0) {\r\n          this.endCalendarMonth = 11;\r\n          this.endCalendarYear--;\r\n        } else {\r\n          this.endCalendarMonth--;\r\n        }\r\n      }\r\n    },\r\n\r\n    nextMonth(type) {\r\n      if (type === 'start') {\r\n        if (this.startCalendarMonth === 11) {\r\n          this.startCalendarMonth = 0;\r\n          this.startCalendarYear++;\r\n        } else {\r\n          this.startCalendarMonth++;\r\n        }\r\n      } else {\r\n        if (this.endCalendarMonth === 11) {\r\n          this.endCalendarMonth = 0;\r\n          this.endCalendarYear++;\r\n        } else {\r\n          this.endCalendarMonth++;\r\n        }\r\n      }\r\n    },\r\n\r\n    clearStartDate() {\r\n      this.filtroFechas.inicio = null;\r\n      this.fechaInicioInput = \"\";\r\n      this.showStartCalendar = false;\r\n    },\r\n\r\n    clearEndDate() {\r\n      this.filtroFechas.fin = null;\r\n      this.fechaFinInput = \"\";\r\n      this.showEndCalendar = false;\r\n    },\r\n\r\n    setTodayAsStart() {\r\n      const today = new Date();\r\n      this.filtroFechas.inicio = today;\r\n      this.fechaInicioInput = this.formatDateForInput(today);\r\n      this.startCalendarMonth = today.getMonth();\r\n      this.startCalendarYear = today.getFullYear();\r\n      this.showStartCalendar = false;\r\n    },\r\n\r\n    setTodayAsEnd() {\r\n      const today = new Date();\r\n      this.filtroFechas.fin = today;\r\n      this.fechaFinInput = this.formatDateForInput(today);\r\n      this.endCalendarMonth = today.getMonth();\r\n      this.endCalendarYear = today.getFullYear();\r\n      this.showEndCalendar = false;\r\n    },\r\n\r\n    formatDateForInput(date) {\r\n      if (!date) return '';\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    },\r\n\r\n    formatNumber(value) {\r\n      if (value === null || value === undefined) return \"0.00\";\r\n      const num = typeof value === \"string\" ? parseFloat(value) : Number(value);\r\n      return isNaN(num)\r\n        ? \"0.00\"\r\n        : num.toLocaleString(\"es-MX\", {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        });\r\n    },\r\n\r\n    formatearFecha(fecha) {\r\n      if (!fecha) return \"\";\r\n      return new Date(fecha).toLocaleDateString(\"es-MX\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n      });\r\n    },\r\n\r\n    async obtenerVentasPorFecha() {\r\n      if (!this.filtroFechas.inicio || !this.filtroFechas.fin) {\r\n        return; // Simplemente retornar sin mostrar alerta\r\n      }\r\n\r\n      this.cargando.ventas = true;\r\n      this.mensajeTablaVacia = \"Cargando ventas...\";\r\n\r\n      try {\r\n        const formatearFecha = (fecha) => {\r\n          const d = new Date(fecha);\r\n          return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(\r\n            2,\r\n            \"0\"\r\n          )}-${String(d.getDate()).padStart(2, \"0\")}`;\r\n        };\r\n\r\n        const startDate = formatearFecha(this.filtroFechas.inicio);\r\n        const endDate = formatearFecha(this.filtroFechas.fin);\r\n\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: `sales?startDate=${startDate}&endDate=${endDate}`,\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.ventasPorFecha = response.data;\r\n\r\n          if (this.ventasPorFecha.length === 0) {\r\n            this.mensajeTablaVacia =\r\n              \"No se encontraron ventas en las fechas seleccionadas\";\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ventas por fecha:\", error);\r\n        this.mostrarError(\r\n          \"Error al cargar las ventas. Por favor, intente nuevamente.\"\r\n        );\r\n        this.ventasPorFecha = [];\r\n        this.mensajeTablaVacia = \"Error al cargar las ventas\";\r\n      } finally {\r\n        this.cargando.ventas = false;\r\n      }\r\n    },\r\n\r\n    verDetalles(venta) {\r\n      this.modalDetalles.venta = venta;\r\n      this.modalDetalles.activo = true;\r\n    },\r\n\r\n    limpiarFiltroFechas() {\r\n      this.filtroFechas.inicio = null;\r\n      this.filtroFechas.fin = null;\r\n      this.fechaInicioInput = \"\";\r\n      this.fechaFinInput = \"\";\r\n      this.ventasPorFecha = [];\r\n      this.mensajeTablaVacia =\r\n        \"Seleccione un rango de fechas para ver las ventas\";\r\n    },\r\n\r\n    async obtenerIngresoHoy() {\r\n      this.cargando.ingresosHoy = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sales/today-income\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.ingresoHoy = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ingreso del día:\", error);\r\n        this.mostrarError(\"Error al cargar el ingreso del día\");\r\n        this.ingresoHoy = 0;\r\n      } finally {\r\n        this.cargando.ingresosHoy = false;\r\n      }\r\n    },\r\n\r\n    async obtenerIngresoSemanal() {\r\n      this.cargando.ingresosSemana = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sales/weekly-income\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.ingresoSemanal = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ingreso semanal:\", error);\r\n        this.mostrarError(\"Error al cargar el ingreso semanal\");\r\n        this.ingresoSemanal = 0;\r\n      } finally {\r\n        this.cargando.ingresosSemana = false;\r\n      }\r\n    },\r\n\r\n    async obtenerIngresoMensual() {\r\n      this.cargando.ingresosMes = true;\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"sales/monthly-income\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.ingresoMensual = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ingreso mensual:\", error);\r\n        this.mostrarError(\"Error al cargar el ingreso mensual\");\r\n        this.ingresoMensual = 0;\r\n      } finally {\r\n        this.cargando.ingresosMes = false;\r\n      }\r\n    },\r\n\r\n    async obtenerInventoryProfit() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"products/inventory/total-profit\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.inventoryProfit = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener ganancia del inventario:\", error);\r\n        this.mostrarError(\"Error al cargar la ganancia del inventario\");\r\n        this.inventoryProfit = 0;\r\n      }\r\n    },\r\n\r\n    async obtenerInventoryTotal() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"products/inventory/total-value\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.inventoryTotal = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener valor total del inventario:\", error);\r\n        this.mostrarError(\"Error al cargar el valor total del inventario\");\r\n        this.inventoryTotal = 0;\r\n      }\r\n    },\r\n\r\n    async obtenerInventoryTotalStock() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: \"GET\",\r\n          path: \"products/inventory/total-stock\",\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.inventoryTotalStock = response.data || 0;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener total de stock:\", error);\r\n        this.mostrarError(\"Error al cargar el total de stock\");\r\n        this.inventoryTotalStock = 0;\r\n      }\r\n    },\r\n\r\n    mostrarError(mensaje) {\r\n      this.$buefy.toast.open({\r\n        message: mensaje,\r\n        type: \"is-danger\",\r\n        duration: 5000,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.historial-ventas {\r\n  padding: 1rem;\r\n}\r\n\r\n.header {\r\n  margin-bottom: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.card {\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1);\r\n}\r\n\r\n.card-header-title {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.card-header-title .icon {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.heading {\r\n  font-size: 0.875rem;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  color: #666;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.mb-5 {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n/* Estilos para el contenedor de entrada de fecha */\r\n.date-input-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.date-input-container .icon {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n}\r\n\r\n/* Estilos para el calendario flotante */\r\n.floating-calendar {\r\n  position: absolute;\r\n  width: 300px;\r\n  background-color: white;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  z-index: 1000;\r\n}\r\n\r\n.calendar-header {\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n}\r\n\r\n.month-year {\r\n  font-weight: bold;\r\n  position: relative;\r\n  font-size: 1.1rem;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.nav-buttons {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.nav-buttons button {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0 5px;\r\n  font-size: 1.2rem;\r\n  color: #3273dc;\r\n}\r\n\r\n.weekdays {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  text-align: center;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.days {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  gap: 5px;\r\n}\r\n\r\n.day {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 35px;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.day:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.day.other-month {\r\n  color: #b5b5b5;\r\n}\r\n\r\n.day.selected {\r\n  background-color: #3273dc;\r\n  color: white;\r\n}\r\n\r\n.day.today {\r\n  border: 1px solid #3273dc;\r\n}\r\n\r\n.calendar-footer {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 15px;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.btn-clear,\r\n.btn-today {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #3273dc;\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.btn-clear:hover,\r\n.btn-today:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.btn-today {\r\n  font-weight: bold;\r\n}\r\n\r\n/* Estilos para ventas mensuales */\r\n.ventas-mensuales-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #dbdbdb;\r\n}\r\n\r\n.ventas-mensuales-title {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.ventas-mensuales-title .icon {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.ventas-mensuales-content {\r\n  padding: 1rem;\r\n  position: relative;\r\n}\r\n\r\n.ventas-mensuales-content.is-loading::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1;\r\n}\r\n\r\n.ventas-mensuales-list {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.ventas-mensuales-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.ventas-mensuales-item.is-alternate {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.mes-nombre {\r\n  font-weight: 500;\r\n}\r\n\r\n.mes-valor {\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n  color: white;\r\n  min-width: 100px;\r\n  text-align: center;\r\n}\r\n\r\n.mes-valor.is-purple {\r\n  background-color: #8a4baf;\r\n}\r\n\r\n.mes-valor.is-success {\r\n  background-color: #23d160;\r\n}\r\n\r\n.ventas-mensuales-summary {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-top: 1.5rem;\r\n  border-top: 1px solid #dbdbdb;\r\n}\r\n\r\n.summary-item {\r\n  text-align: center;\r\n  flex: 1;\r\n}\r\n\r\n.summary-label {\r\n  font-weight: 500;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n}\r\n\r\n.summary-value {\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .historial-ventas {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .column {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .buttons {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .buttons .button {\r\n    width: 100%;\r\n  }\r\n\r\n  .floating-calendar {\r\n    width: 280px;\r\n    left: 50% !important;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  .ventas-mensuales-summary {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n  }\r\n\r\n  .summary-item {\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}