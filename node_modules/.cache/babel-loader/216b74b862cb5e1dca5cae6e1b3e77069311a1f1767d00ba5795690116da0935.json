{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport apiRequest from '@/Servicios/HttpService';\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\nexport default {\n  name: 'OrdenesComponent',\n  data() {\n    return {\n      // Lista de órdenes\n      ordenes: [],\n      ordenesFiltradas: [],\n      busqueda: '',\n      // Paginación\n      paginaActual: 1,\n      elementosPorPagina: 10,\n      // Estados de carga\n      cargando: false,\n      error: null,\n      // Modal de edición\n      modalEditarActivo: false,\n      ordenEditando: {\n        id: null,\n        invoiceNumber: '',\n        orderDate: '',\n        isActive: true,\n        provider: null,\n        orderDetails: []\n      },\n      actualizando: false,\n      // Modal de eliminación\n      modalEliminarActivo: false,\n      ordenEliminar: null,\n      eliminando: false,\n      // Modal de detalles\n      modalDetallesActivo: false,\n      ordenDetalle: null,\n      // Modal de resumen financiero\n      modalResumenActivo: false,\n      resumenFinanciero: null,\n      cargandoResumen: false,\n      // Estado de administrador\n      esAdmin: false,\n      // Caché de productos\n      productosCache: {}\n    };\n  },\n  computed: {\n    // Obtener las órdenes para la página actual\n    ordenesPaginadas() {\n      const inicio = (this.paginaActual - 1) * this.elementosPorPagina;\n      const fin = inicio + this.elementosPorPagina;\n      return this.ordenesFiltradas.slice(inicio, fin);\n    },\n    // Calcular el índice del primer elemento mostrado\n    paginaInicio() {\n      if (this.ordenesFiltradas.length === 0) return 0;\n      return (this.paginaActual - 1) * this.elementosPorPagina + 1;\n    },\n    // Calcular el índice del último elemento mostrado\n    paginaFin() {\n      const fin = this.paginaActual * this.elementosPorPagina;\n      return fin > this.ordenesFiltradas.length ? this.ordenesFiltradas.length : fin;\n    },\n    // Verificar si la orden tiene productos registrados\n    tieneProductosRegistrados() {\n      return this.ordenEditando && this.ordenEditando.orderDetails && this.ordenEditando.orderDetails.length > 0;\n    }\n  },\n  created() {\n    this.verificarAdmin();\n    this.cargarOrdenes();\n    this.cargarProductos();\n  },\n  methods: {\n    // Cambiar de página\n    cambiarPagina(pagina) {\n      this.paginaActual = pagina;\n    },\n    // Cambiar elementos por página\n    cambiarElementosPorPagina() {\n      this.paginaActual = 1; // Volver a la primera página al cambiar elementos por página\n    },\n    // Verificar si el usuario es administrador\n    verificarAdmin() {\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion();\n      this.esAdmin = datosUsuario.rol === 'Admin';\n    },\n    // Cargar todas las órdenes\n    async cargarOrdenes() {\n      this.cargando = true;\n      this.error = null;\n      try {\n        const response = await apiRequest({\n          method: 'GET',\n          path: 'orders'\n        });\n        if (response.status === 200) {\n          this.ordenes = response.data;\n\n          // Enriquecer las órdenes con nombres de productos\n          await this.enriquecerOrdenesConProductos(this.ordenes);\n          this.ordenesFiltradas = [...this.ordenes];\n          this.paginaActual = 1; // Volver a la primera página al cargar nuevos datos\n        } else {\n          this.error = `Error ${response.status}: No se pudieron cargar las órdenes`;\n        }\n      } catch (err) {\n        console.error('Error al cargar órdenes:', err);\n        this.error = err.message || 'Error al cargar las órdenes. Por favor, intente nuevamente.';\n      } finally {\n        this.cargando = false;\n      }\n    },\n    // Enriquecer órdenes con nombres de productos\n    async enriquecerOrdenesConProductos(ordenes) {\n      // Si no tenemos productos en caché, los cargamos\n      if (Object.keys(this.productosCache).length === 0) {\n        await this.cargarProductos();\n      }\n      try {\n        // Obtener todos los detalles de productos\n        const response = await apiRequest({\n          method: 'GET',\n          path: 'order-details'\n        });\n        if (response && response.data) {\n          // Crear un mapa de productos para acceso rápido\n          const productosMap = {};\n          response.data.forEach(detalle => {\n            if (detalle.product) {\n              productosMap[detalle.product.id] = detalle.product;\n            }\n          });\n\n          // Actualizar el caché global con cualquier producto nuevo\n          Object.assign(this.productosCache, productosMap);\n\n          // Enriquecer cada orden con nombres de productos\n          ordenes.forEach(orden => {\n            if (orden.orderDetails && orden.orderDetails.length > 0) {\n              orden.orderDetails.forEach(detalle => {\n                // Buscar el detalle correspondiente en los detalles con productos\n                const detalleCompleto = response.data.find(d => d.id === detalle.id);\n                if (detalleCompleto && detalleCompleto.product) {\n                  // Si encontramos el detalle con su producto, usamos ese nombre\n                  detalle.productName = detalleCompleto.product.name;\n                  detalle.productId = detalleCompleto.product.id;\n                } else if (detalle.product && detalle.product.id) {\n                  // Si el detalle ya tiene un producto con ID\n                  const productId = detalle.product.id;\n                  if (productosMap[productId]) {\n                    detalle.productName = productosMap[productId].name;\n                  } else if (this.productosCache[productId]) {\n                    detalle.productName = this.productosCache[productId].name;\n                  } else {\n                    detalle.productName = detalle.product.name || `Producto #${productId}`;\n                  }\n                } else {\n                  // Si no podemos encontrar el producto, mostramos un mensaje genérico\n                  detalle.productName = \"Producto sin información\";\n                }\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Error al enriquecer órdenes con productos:\", error);\n      }\n    },\n    // Obtener nombre de producto para un detalle\n    obtenerNombreProducto(detalle) {\n      if (detalle.productName) {\n        return detalle.productName;\n      }\n      if (detalle.product && detalle.product.name) {\n        return detalle.product.name;\n      }\n      if (detalle.product && detalle.product.id && this.productosCache[detalle.product.id]) {\n        return this.productosCache[detalle.product.id].name;\n      }\n      if (detalle.productId && this.productosCache[detalle.productId]) {\n        return this.productosCache[detalle.productId].name;\n      }\n      return \"Producto sin información\";\n    },\n    // Cargar productos para tener un caché\n    async cargarProductos() {\n      try {\n        const response = await apiRequest({\n          method: 'GET',\n          path: 'order-details'\n        });\n        if (response.status === 200 && Array.isArray(response.data)) {\n          // Crear un mapa de productos para acceso rápido\n          response.data.forEach(detalle => {\n            if (detalle.product && detalle.product.id) {\n              this.productosCache[detalle.product.id] = detalle.product;\n            }\n          });\n          console.log('Caché de productos cargado:', Object.keys(this.productosCache).length, 'productos');\n        }\n      } catch (error) {\n        console.error(\"Error al cargar productos:\", error);\n      }\n    },\n    // Filtrar órdenes según la búsqueda\n    filtrarOrdenes() {\n      if (!this.busqueda.trim()) {\n        this.ordenesFiltradas = [...this.ordenes];\n        this.paginaActual = 1; // Volver a la primera página al limpiar la búsqueda\n        return;\n      }\n      const busquedaLower = this.busqueda.toLowerCase().trim();\n      this.ordenesFiltradas = this.ordenes.filter(orden => {\n        // Buscar en los datos básicos de la orden\n        const coincideBasicos = orden.invoiceNumber.toLowerCase().includes(busquedaLower) || orden.provider.name.toLowerCase().includes(busquedaLower) || orden.id.toString().includes(busquedaLower);\n\n        // Buscar en los nombres de productos\n        let coincideProductos = false;\n        if (orden.orderDetails && orden.orderDetails.length > 0) {\n          coincideProductos = orden.orderDetails.some(detalle => {\n            const nombreProducto = this.obtenerNombreProducto(detalle);\n            return nombreProducto.toLowerCase().includes(busquedaLower);\n          });\n        }\n        return coincideBasicos || coincideProductos;\n      });\n      this.paginaActual = 1; // Volver a la primera página al filtrar\n    },\n    // Formatear fecha\n    formatearFecha(fecha) {\n      if (!fecha) return 'N/A';\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n      return new Date(fecha).toLocaleDateString('es-ES', options);\n    },\n    // Formatear fecha para el resumen financiero\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    },\n    // Formatear moneda\n    formatearMoneda(valor) {\n      if (valor === undefined || valor === null) return '$0.00';\n      return new Intl.NumberFormat('es-SV', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      }).format(valor);\n    },\n    // Calcular total sin impuesto\n    calcularTotalSinImpuesto() {\n      if (!this.ordenDetalle || !this.ordenDetalle.orderDetails) return this.formatearMoneda(0);\n      const total = this.ordenDetalle.orderDetails.reduce((sum, detalle) => {\n        return sum + (detalle.calculatedTotalPriceWithouthTax || 0);\n      }, 0);\n      return this.formatearMoneda(total);\n    },\n    // Calcular total con impuesto\n    calcularTotalConImpuesto() {\n      if (!this.ordenDetalle || !this.ordenDetalle.orderDetails) return this.formatearMoneda(0);\n      const total = this.ordenDetalle.orderDetails.reduce((sum, detalle) => {\n        return sum + (detalle.calculatedTotalPriceWithTax || 0);\n      }, 0);\n      return this.formatearMoneda(total);\n    },\n    // Abrir modal de edición\n    async abrirModalEditar(orden) {\n      // Hacer una copia profunda de la orden para editar\n      this.ordenEditando = JSON.parse(JSON.stringify({\n        id: orden.id,\n        invoiceNumber: orden.invoiceNumber,\n        orderDate: orden.orderDate,\n        isActive: orden.isActive,\n        provider: orden.provider,\n        orderDetails: orden.orderDetails || []\n      }));\n\n      // Si no tenemos los detalles de la orden, los obtenemos\n      if (!orden.orderDetails || !Array.isArray(orden.orderDetails)) {\n        try {\n          const response = await apiRequest({\n            method: 'GET',\n            path: `orders/${orden.id}`\n          });\n          if (response.status === 200 && response.data) {\n            this.ordenEditando.orderDetails = response.data.orderDetails || [];\n          }\n        } catch (error) {\n          console.error(\"Error al obtener detalles de la orden:\", error);\n          this.ordenEditando.orderDetails = [];\n        }\n      }\n      this.modalEditarActivo = true;\n    },\n    // Cerrar modal de edición\n    cerrarModalEditar() {\n      this.modalEditarActivo = false;\n      this.ordenEditando = {\n        id: null,\n        invoiceNumber: '',\n        orderDate: '',\n        isActive: true,\n        provider: null,\n        orderDetails: []\n      };\n    },\n    // Actualizar orden\n    async actualizarOrden() {\n      if (!this.ordenEditando.id) return;\n      this.actualizando = true;\n      try {\n        // Si tiene productos registrados, no permitimos cambiar el número de factura\n        const datosActualizacion = {\n          orderDate: this.ordenEditando.orderDate\n        };\n\n        // Solo incluimos el invoiceNumber si no tiene productos registrados\n        if (!this.tieneProductosRegistrados) {\n          datosActualizacion.invoiceNumber = this.ordenEditando.invoiceNumber;\n        }\n        const response = await apiRequest({\n          method: 'PATCH',\n          path: `orders/${this.ordenEditando.id}`,\n          data: datosActualizacion\n        });\n        if (response.status === 200) {\n          // Mostrar mensaje de éxito\n          this.$buefy.toast.open({\n            message: 'Orden actualizada correctamente',\n            type: 'is-success'\n          });\n\n          // Cerrar el modal\n          this.cerrarModalEditar();\n\n          // Recargar los datos para asegurar que todo esté actualizado\n          await this.cargarOrdenes();\n        } else {\n          throw new Error(`Error ${response.status}: No se pudo actualizar la orden`);\n        }\n      } catch (err) {\n        console.error('Error al actualizar orden:', err);\n        this.$buefy.toast.open({\n          message: err.message || 'Error al actualizar la orden',\n          type: 'is-danger'\n        });\n      } finally {\n        this.actualizando = false;\n      }\n    },\n    // Confirmar eliminación\n    confirmarEliminar(orden) {\n      this.ordenEliminar = orden;\n      this.modalEliminarActivo = true;\n    },\n    // Cerrar modal de eliminación\n    cerrarModalEliminar() {\n      this.modalEliminarActivo = false;\n      this.ordenEliminar = null;\n    },\n    // Eliminar orden\n    async eliminarOrden() {\n      if (!this.ordenEliminar || !this.ordenEliminar.id) return;\n      this.eliminando = true;\n      try {\n        const response = await apiRequest({\n          method: 'DELETE',\n          path: `orders/${this.ordenEliminar.id}`\n        });\n        if (response.status === 200 || response.status === 204) {\n          // Eliminar la orden de la lista local\n          this.ordenes = this.ordenes.filter(o => o.id !== this.ordenEliminar.id);\n          this.ordenesFiltradas = this.ordenesFiltradas.filter(o => o.id !== this.ordenEliminar.id);\n\n          // Mostrar mensaje de éxito\n          this.$buefy.toast.open({\n            message: 'Orden eliminada correctamente',\n            type: 'is-success'\n          });\n\n          // Cerrar el modal\n          this.cerrarModalEliminar();\n        } else {\n          throw new Error(`Error ${response.status}: No se pudo eliminar la orden`);\n        }\n      } catch (err) {\n        console.error('Error al eliminar orden:', err);\n        this.$buefy.toast.open({\n          message: err.message || 'Error al eliminar la orden',\n          type: 'is-danger'\n        });\n      } finally {\n        this.eliminando = false;\n      }\n    },\n    // Ver detalles de la orden\n    async verDetalles(orden) {\n      this.ordenDetalle = JSON.parse(JSON.stringify(orden)); // Copia profunda\n      this.modalDetallesActivo = true;\n    },\n    // Cerrar modal de detalles\n    cerrarModalDetalles() {\n      this.modalDetallesActivo = false;\n      this.ordenDetalle = null;\n    },\n    // Ver resumen financiero\n    async verResumenFinanciero(orden) {\n      if (!orden || !orden.invoiceNumber) {\n        this.$buefy.toast.open({\n          message: 'No se pudo obtener el número de factura para esta orden',\n          type: 'is-danger'\n        });\n        return;\n      }\n      this.cargando = true;\n      this.resumenFinanciero = null; // Reiniciar el resumen financiero\n\n      try {\n        console.log(`Obteniendo resumen financiero para factura: ${orden.invoiceNumber}`);\n\n        // Si no tenemos productos en caché, los cargamos\n        if (Object.keys(this.productosCache).length === 0) {\n          await this.cargarProductos();\n        }\n        const response = await apiRequest({\n          method: 'GET',\n          path: `order-details/summary/${orden.invoiceNumber}`\n        });\n        if (response && response.data && response.data.summary) {\n          this.resumenFinanciero = response.data;\n\n          // Enriquecer los detalles del resumen con nombres de productos\n          if (this.resumenFinanciero.details) {\n            // Primero, intentemos obtener los detalles completos de los productos para esta orden\n            try {\n              const detallesResponse = await apiRequest({\n                method: 'GET',\n                path: 'order-details'\n              });\n              if (detallesResponse && detallesResponse.data) {\n                // Crear un mapa de productos para acceso rápido\n                const productosMap = {};\n                detallesResponse.data.forEach(detalle => {\n                  if (detalle.product) {\n                    productosMap[detalle.product.id] = detalle.product;\n                  }\n                });\n\n                // Actualizar el caché global con cualquier producto nuevo\n                Object.assign(this.productosCache, productosMap);\n\n                // Ahora enriquecer los detalles del resumen\n                this.resumenFinanciero.details.forEach(detalle => {\n                  if (detalle.productId && productosMap[detalle.productId]) {\n                    detalle.productName = productosMap[detalle.productId].name;\n                  } else if (detalle.productId && this.productosCache[detalle.productId]) {\n                    detalle.productName = this.productosCache[detalle.productId].name;\n                  } else {\n                    detalle.productName = `Producto ID: ${detalle.productId || 'No disponible'}`;\n                  }\n                });\n              }\n            } catch (error) {\n              console.error(\"Error al obtener detalles de productos para el resumen:\", error);\n              // Si hay un error, usamos solo el caché\n              this.resumenFinanciero.details.forEach(detalle => {\n                if (detalle.productId && this.productosCache[detalle.productId]) {\n                  detalle.productName = this.productosCache[detalle.productId].name;\n                } else {\n                  detalle.productName = `Producto ID: ${detalle.productId || 'No disponible'}`;\n                }\n              });\n            }\n          }\n        } else {\n          console.warn('Respuesta de resumen financiero incompleta o vacía');\n          // Crear un objeto resumenFinanciero vacío para mostrar el mensaje de no disponible\n          this.resumenFinanciero = {\n            details: []\n          };\n        }\n      } catch (error) {\n        console.error(\"Error al obtener resumen financiero:\", error);\n\n        // Crear un objeto resumenFinanciero vacío para mostrar el mensaje de no disponible\n        this.resumenFinanciero = {\n          details: []\n        };\n\n        // Registrar el error en la consola pero no mostrar toast, ya que mostraremos el modal con mensaje\n        console.error(\"Detalles del error:\", error);\n      } finally {\n        this.cargando = false;\n        // Siempre mostrar el modal, incluso si no hay datos\n        this.modalResumenActivo = true;\n      }\n    },\n    // Cerrar modal de resumen financiero\n    cerrarModalResumen() {\n      this.modalResumenActivo = false;\n      this.resumenFinanciero = null;\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","AyudanteSesion","name","data","ordenes","ordenesFiltradas","busqueda","paginaActual","elementosPorPagina","cargando","error","modalEditarActivo","ordenEditando","id","invoiceNumber","orderDate","isActive","provider","orderDetails","actualizando","modalEliminarActivo","ordenEliminar","eliminando","modalDetallesActivo","ordenDetalle","modalResumenActivo","resumenFinanciero","cargandoResumen","esAdmin","productosCache","computed","ordenesPaginadas","inicio","fin","slice","paginaInicio","length","paginaFin","tieneProductosRegistrados","created","verificarAdmin","cargarOrdenes","cargarProductos","methods","cambiarPagina","pagina","cambiarElementosPorPagina","datosUsuario","obtenerDatosSesion","rol","response","method","path","status","enriquecerOrdenesConProductos","err","console","message","Object","keys","productosMap","forEach","detalle","product","assign","orden","detalleCompleto","find","d","productName","productId","obtenerNombreProducto","Array","isArray","log","filtrarOrdenes","trim","busquedaLower","toLowerCase","filter","coincideBasicos","includes","toString","coincideProductos","some","nombreProducto","formatearFecha","fecha","options","year","month","day","Date","toLocaleDateString","formatDate","dateString","date","formatearMoneda","valor","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","format","calcularTotalSinImpuesto","total","reduce","sum","calculatedTotalPriceWithouthTax","calcularTotalConImpuesto","calculatedTotalPriceWithTax","abrirModalEditar","JSON","parse","stringify","cerrarModalEditar","actualizarOrden","datosActualizacion","$buefy","toast","open","type","Error","confirmarEliminar","cerrarModalEliminar","eliminarOrden","o","verDetalles","cerrarModalDetalles","verResumenFinanciero","summary","details","detallesResponse","warn","cerrarModalResumen"],"sources":["src/components/OrdenesDetalles/Ordenes.vue"],"sourcesContent":["<template>\r\n  <div class=\"ordenes-component\">\r\n    <div class=\"section\">\r\n      <div class=\"section-header\">\r\n        <div class=\"header-left\">\r\n          <i class=\"fas fa-clipboard-list section-icon\"></i>\r\n          <h3>Listado de Órdenes</h3>\r\n        </div>\r\n        <div class=\"header-right\">\r\n          <div class=\"search-box\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"busqueda\" \r\n              placeholder=\"Buscar por número de factura...\" \r\n              class=\"search-input\"\r\n              @input=\"filtrarOrdenes\"\r\n            >\r\n            <i class=\"fas fa-search search-icon\"></i>\r\n          </div>\r\n          <button @click=\"cargarOrdenes\" class=\"btn btn-refresh\" :disabled=\"cargando\">\r\n            <i class=\"fas\" :class=\"cargando ? 'fa-spinner fa-spin' : 'fa-sync-alt'\"></i>\r\n            {{ cargando ? 'Cargando...' : 'Actualizar' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"section-content\">\r\n        <!-- Mensaje de carga -->\r\n        <div v-if=\"cargando && !ordenes.length\" class=\"message info\">\r\n          <i class=\"fas fa-spinner fa-spin message-icon\"></i>\r\n          <span>Cargando órdenes, por favor espere...</span>\r\n        </div>\r\n\r\n        <!-- Mensaje de error -->\r\n        <div v-if=\"error\" class=\"message error\">\r\n          <i class=\"fas fa-exclamation-circle message-icon\"></i>\r\n          <span>{{ error }}</span>\r\n          <button @click=\"cargarOrdenes\" class=\"btn-retry\">\r\n            <i class=\"fas fa-redo\"></i> Reintentar\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Mensaje de no hay órdenes -->\r\n        <div v-if=\"!cargando && !error && !ordenes.length\" class=\"message info\">\r\n          <i class=\"fas fa-info-circle message-icon\"></i>\r\n          <span>No hay órdenes registradas en el sistema.</span>\r\n        </div>\r\n\r\n        <!-- Tabla de órdenes -->\r\n        <div v-if=\"!cargando && !error && ordenes.length > 0\" class=\"table-container\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Número de Factura</th>\r\n                <th>Fecha</th>\r\n                <th>Proveedor</th>\r\n                <th>Productos</th>\r\n                <th>Estado</th>\r\n                <th>Acciones</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"orden in ordenesPaginadas\" :key=\"orden.id\" :class=\"{ 'inactive-row': !orden.isActive }\">\r\n                <td>{{ orden.id }}</td>\r\n                <td>{{ orden.invoiceNumber }}</td>\r\n                <td>{{ formatearFecha(orden.orderDate) }}</td>\r\n                <td>\r\n                  <div class=\"provider-info\">\r\n                    <span class=\"provider-name\">{{ orden.provider.name }}</span>\r\n                    <span class=\"provider-details\">{{ orden.provider.taxId }}</span>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div v-if=\"orden.orderDetails && orden.orderDetails.length > 0\" class=\"productos-lista\">\r\n                    <div v-for=\"(detalle, index) in orden.orderDetails.slice(0, 3)\" :key=\"index\" class=\"producto-item\">\r\n                      <span class=\"producto-nombre\">{{ obtenerNombreProducto(detalle) }}</span>\r\n                      <span class=\"producto-cantidad\">({{ detalle.quantity }})</span>\r\n                    </div>\r\n                    <div v-if=\"orden.orderDetails.length > 3\" class=\"ver-mas\">\r\n                      <a @click=\"verDetalles(orden)\">Ver todos ({{ orden.orderDetails.length }})</a>\r\n                    </div>\r\n                  </div>\r\n                  <span v-else class=\"badge\">\r\n                    Sin productos\r\n                  </span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"status-badge\" :class=\"orden.isActive ? 'active' : 'inactive'\">\r\n                    {{ orden.isActive ? 'Activa' : 'Inactiva' }}\r\n                  </span>\r\n                </td>\r\n                <td>\r\n                  <div class=\"actions\">\r\n                    <b-tooltip label=\"Editar\" position=\"is-top\">\r\n                      <b-button class=\"btn-primary\" @click=\"abrirModalEditar(orden)\" :disabled=\"!esAdmin\">\r\n                        <b-icon icon=\"pencil\" />\r\n                      </b-button>\r\n                    </b-tooltip>\r\n                    <b-tooltip label=\"Eliminar\" position=\"is-top\">\r\n                      <b-button class=\"btn-primary\" @click=\"confirmarEliminar(orden)\" :disabled=\"!esAdmin\">\r\n                        <b-icon icon=\"delete\" />\r\n                      </b-button>\r\n                    </b-tooltip>\r\n                    <b-tooltip label=\"Ver detalles\" position=\"is-top\">\r\n                      <b-button class=\"btn-primary\" @click=\"verDetalles(orden)\">\r\n                        <b-icon icon=\"eye\" />\r\n                      </b-button>\r\n                    </b-tooltip>\r\n                    <b-tooltip label=\"Resumen Financiero\" position=\"is-top\">\r\n                      <b-button class=\"btn-primary\" @click=\"verResumenFinanciero(orden)\">\r\n                        <b-icon icon=\"calculator\" />\r\n                      </b-button>\r\n                    </b-tooltip>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          \r\n          <!-- Paginación -->\r\n          <div class=\"pagination-container\">\r\n            <div class=\"pagination-info\">\r\n              Mostrando {{ paginaInicio }} - {{ paginaFin }} de {{ ordenesFiltradas.length }} órdenes\r\n            </div>\r\n            <b-pagination\r\n              :total=\"ordenesFiltradas.length\"\r\n              v-model=\"paginaActual\"\r\n              :per-page=\"elementosPorPagina\"\r\n              :range-before=\"2\"\r\n              :range-after=\"2\"\r\n              :simple=\"false\"\r\n              :rounded=\"true\"\r\n              :size=\"'is-small'\"\r\n              aria-next-label=\"Siguiente página\"\r\n              aria-previous-label=\"Página anterior\"\r\n              aria-page-label=\"Página\"\r\n              aria-current-label=\"Página actual\"\r\n              @change=\"cambiarPagina\"\r\n            >\r\n            </b-pagination>\r\n            <div class=\"per-page-selector\">\r\n              <span>Mostrar:</span>\r\n              <b-select v-model=\"elementosPorPagina\" size=\"is-small\" @input=\"cambiarElementosPorPagina\">\r\n                <option value=\"5\">5</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"50\">50</option>\r\n                <option value=\"100\">100</option>\r\n              </b-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de edición -->\r\n    <div class=\"modal\" :class=\"{ 'is-active': modalEditarActivo }\">\r\n      <div class=\"modal-background\" @click=\"cerrarModalEditar\"></div>\r\n      <div class=\"modal-card\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">\r\n            <i class=\"fas fa-edit mr-2\"></i> Editar Orden\r\n          </p>\r\n          <button class=\"delete\" aria-label=\"close\" @click=\"cerrarModalEditar\"></button>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <form @submit.prevent=\"actualizarOrden\">\r\n            <!-- Número de factura -->\r\n            <div class=\"field\">\r\n              <label class=\"label\">\r\n                <i class=\"fas fa-file-invoice mr-2\"></i> Número de Factura:\r\n              </label>\r\n              <div class=\"control\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"input\" \r\n                  v-model=\"ordenEditando.invoiceNumber\" \r\n                  placeholder=\"Ej: INV-12345\"\r\n                  required\r\n                  :disabled=\"tieneProductosRegistrados\"\r\n                >\r\n                <p v-if=\"tieneProductosRegistrados\" class=\"help is-warning\">\r\n                  <i class=\"fas fa-exclamation-triangle mr-1\"></i>\r\n                  No se puede editar el número de factura porque ya tiene productos registrados.\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Fecha de orden -->\r\n            <div class=\"field\">\r\n              <label class=\"label\">\r\n                <i class=\"fas fa-calendar-alt mr-2\"></i> Fecha de Orden:\r\n              </label>\r\n              <div class=\"control\">\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"input\" \r\n                  v-model=\"ordenEditando.orderDate\" \r\n                  required\r\n                >\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Información del proveedor (solo lectura) -->\r\n            <div class=\"field\">\r\n              <label class=\"label\">\r\n                <i class=\"fas fa-truck mr-2\"></i> Proveedor:\r\n              </label>\r\n              <div class=\"control\">\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"input\" \r\n                  :value=\"ordenEditando.provider ? ordenEditando.provider.name : ''\" \r\n                  readonly\r\n                  disabled\r\n                >\r\n                <p class=\"help\">El proveedor no se puede cambiar una vez creada la orden.</p>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <button \r\n            class=\"button is-primary\" \r\n            @click=\"actualizarOrden\" \r\n            :disabled=\"actualizando\"\r\n          >\r\n            <i class=\"fas\" :class=\"actualizando ? 'fa-spinner fa-spin' : 'fa-save'\"></i>\r\n            {{ actualizando ? 'Guardando...' : 'Guardar Cambios' }}\r\n          </button>\r\n          <button class=\"button\" @click=\"cerrarModalEditar\">Cancelar</button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de confirmación para eliminar -->\r\n    <div class=\"modal\" :class=\"{ 'is-active': modalEliminarActivo }\">\r\n      <div class=\"modal-background\" @click=\"cerrarModalEliminar\"></div>\r\n      <div class=\"modal-card\">\r\n        <header class=\"modal-card-head has-background-danger\">\r\n          <p class=\"modal-card-title has-text-white\">\r\n            <i class=\"fas fa-exclamation-triangle mr-2\"></i> Confirmar Eliminación\r\n          </p>\r\n          <button  class=\"delete\" aria-label=\"close\" @click=\"cerrarModalEliminar\"></button>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <p>\r\n            ¿Está seguro que desea eliminar la orden con número de factura \r\n            <strong>{{ ordenEliminar ? ordenEliminar.invoiceNumber : '' }}</strong>?\r\n          </p>\r\n          <p class=\"has-text-danger mt-3\">\r\n            <i class=\"fas fa-exclamation-circle mr-2\"></i>\r\n            Esta acción no se puede deshacer y eliminará todos los detalles asociados a esta orden.\r\n          </p>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <button \r\n            class=\"button is-danger\" \r\n            @click=\"eliminarOrden\" \r\n            :disabled=\"eliminando\"\r\n          >\r\n            <i class=\"fas\" :class=\"eliminando ? 'fa-spinner fa-spin' : 'fa-trash-alt'\"></i>\r\n            {{ eliminando ? 'Eliminando...' : 'Eliminar' }}\r\n          </button>\r\n          <button class=\"button\" @click=\"cerrarModalEliminar\">Cancelar</button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de detalles -->\r\n    <div class=\"modal\" :class=\"{ 'is-active': modalDetallesActivo }\">\r\n      <div class=\"modal-background\" @click=\"cerrarModalDetalles\"></div>\r\n      <div class=\"modal-card\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">\r\n            <i class=\"fas fa-info-circle mr-2\"></i> Detalles de la Orden\r\n          </p>\r\n          <button class=\"delete\" aria-label=\"close\" @click=\"cerrarModalDetalles\"></button>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <div v-if=\"ordenDetalle\">\r\n            <div class=\"order-detail-header\">\r\n              <div class=\"order-info\">\r\n                <h4 class=\"title is-5\">Orden #{{ ordenDetalle.id }}</h4>\r\n                <p class=\"subtitle is-6\">\r\n                  {{ ordenDetalle.invoiceNumber }}\r\n                </p>\r\n              </div>\r\n              <div class=\"order-status\">\r\n                <span class=\"status-badge\" :class=\"ordenDetalle.isActive ? 'active' : 'inactive'\">\r\n                  {{ ordenDetalle.isActive ? 'Activa' : 'Inactiva' }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n        \r\n            <div class=\"info-box\">\r\n              <h5 class=\"title is-6\">Información del Proveedor</h5>\r\n              <div class=\"columns is-multiline\">\r\n                <div class=\"column is-6\">\r\n                  <p><strong>Nombre:</strong> {{ ordenDetalle.provider.name }}</p>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                  <p><strong>ID Fiscal:</strong> {{ ordenDetalle.provider.taxId }}</p>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                  <p><strong>Teléfono:</strong> {{ ordenDetalle.provider.phone }}</p>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                  <p><strong>Dirección:</strong> {{ ordenDetalle.provider.address }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        \r\n            <div class=\"order-details-section\">\r\n              <h5 class=\"title is-6\">Detalles de Productos</h5>\r\n              \r\n              <div v-if=\"!ordenDetalle.orderDetails || ordenDetalle.orderDetails.length === 0\" class=\"message info\">\r\n                <i class=\"fas fa-info-circle message-icon\"></i>\r\n                <span>No hay productos registrados en esta orden.</span>\r\n              </div>\r\n              \r\n              <div v-else>\r\n                <table class=\"table is-fullwidth\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Producto</th>\r\n                      <th>Cantidad</th>\r\n                      <th>Precio Unitario</th>\r\n                      <th>Impuesto Unitario</th>\r\n                      <th>Total sin Impuesto</th>\r\n                      <th>Total con Impuesto</th>\r\n                      <th>Estado</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"detalle in ordenDetalle.orderDetails\" :key=\"detalle.id\" \r\n                      :class=\"{ 'inactive-row': !detalle.isActive }\">\r\n                      <td>{{ obtenerNombreProducto(detalle) }}</td>\r\n                      <td>{{ detalle.quantity }}</td>\r\n                      <td>{{ formatearMoneda(detalle.purchasePriceUnit) }}</td>\r\n                      <td>{{ formatearMoneda(detalle.calculatedTaxUnit) }}</td>\r\n                      <td>{{ formatearMoneda(detalle.calculatedTotalPriceWithouthTax) }}</td>\r\n                      <td>{{ formatearMoneda(detalle.calculatedTotalPriceWithTax) }}</td>\r\n                      <td>\r\n                        <span class=\"status-badge\" :class=\"detalle.isActive ? 'active' : 'inactive'\">\r\n                          {{ detalle.isActive ? 'Activo' : 'Inactivo' }}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <div class=\"totals-row\">\r\n                  <span>Totales:</span>\r\n                  <span>{{ calcularTotalSinImpuesto() }}</span>\r\n                  <span>{{ calcularTotalConImpuesto() }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <button class=\"button\" @click=\"cerrarModalDetalles\">Cerrar</button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal de resumen financiero -->\r\n    <div class=\"modal\" :class=\"{ 'is-active': modalResumenActivo }\">\r\n      <div class=\"modal-background\" @click=\"cerrarModalResumen\"></div>\r\n      <div class=\"modal-card\" style=\"width: auto; max-width: 80vw;\">\r\n        <header class=\"modal-card-head\">\r\n          <p class=\"modal-card-title\">\r\n            <i class=\"fas fa-calculator mr-2\"></i> Resumen Financiero: \r\n            {{ resumenFinanciero && resumenFinanciero.summary && resumenFinanciero.summary.invoice ? resumenFinanciero.summary.invoice.number : 'Factura' }}\r\n          </p>\r\n          <button class=\"delete\" aria-label=\"close\" @click=\"cerrarModalResumen\"></button>\r\n        </header>\r\n        <section class=\"modal-card-body\">\r\n          <!-- Mensaje cuando no hay datos disponibles -->\r\n          <div v-if=\"!resumenFinanciero || !resumenFinanciero.summary\" class=\"no-data-message\">\r\n            <div class=\"message is-warning\">\r\n              <div class=\"message-body\">\r\n                <i class=\"fas fa-exclamation-triangle mr-2\"></i>\r\n                <span>No hay información de resumen financiero disponible para esta orden.</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"no-data-details mt-4\">\r\n              <p>Posibles razones:</p>\r\n              <ul>\r\n                <li>La orden no tiene productos asociados</li>\r\n                <li>La orden está en proceso de creación</li>\r\n           \r\n              </ul>\r\n              <p class=\"mt-3\">Por favor, verifique que la orden tenga productos asociados y esté correctamente configurada.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Contenido del resumen cuando hay datos -->\r\n          <div v-else class=\"box p-5\">\r\n            <!-- Información de la factura -->\r\n            <div class=\"invoice-info mb-5\">\r\n              <div class=\"columns\">\r\n                <div class=\"column is-6\">\r\n                  <div class=\"field\">\r\n                    <label class=\"label\">Número de Factura</label>\r\n                    <div class=\"control\">\r\n                      <input class=\"input\" type=\"text\" readonly \r\n                        :value=\"resumenFinanciero.summary.invoice.number\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"column is-6\">\r\n                  <div class=\"field\">\r\n                    <label class=\"label\">Fecha</label>\r\n                    <div class=\"control\">\r\n                      <input class=\"input\" type=\"text\" readonly \r\n                        :value=\"formatDate(resumenFinanciero.summary.invoice.date)\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Detalles de la orden -->\r\n            <h4 class=\"title is-5 mb-3\">Detalles de la Orden</h4>\r\n            <b-table :data=\"resumenFinanciero.details\" :striped=\"true\" :hoverable=\"true\">\r\n              <b-table-column field=\"productName\" label=\"Producto\" v-slot=\"props\">\r\n                {{ props.row.productName || 'N/A' }}\r\n              </b-table-column>\r\n              <b-table-column field=\"productId\" label=\"ID Producto\" numeric v-slot=\"props\">\r\n                {{ props.row.productId }}\r\n              </b-table-column>\r\n              <b-table-column field=\"quantity\" label=\"Cantidad\" numeric v-slot=\"props\">\r\n                {{ props.row.quantity }}\r\n              </b-table-column>\r\n              <b-table-column field=\"unitPriceWithoutVAT\" label=\"Precio sin IVA\" numeric v-slot=\"props\">\r\n                {{ formatearMoneda(props.row.unitPriceWithoutVAT) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"unitPriceWithVAT\" label=\"Precio con IVA\" numeric v-slot=\"props\">\r\n                {{ formatearMoneda(props.row.unitPriceWithVAT) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"totalPriceWithoutVAT\" label=\"Total sin IVA\" numeric v-slot=\"props\">\r\n                {{ formatearMoneda(props.row.totalPriceWithoutVAT) }}\r\n              </b-table-column>\r\n              <b-table-column field=\"totalPriceWithVAT\" label=\"Total con IVA\" numeric v-slot=\"props\">\r\n                {{ formatearMoneda(props.row.totalPriceWithVAT) }}\r\n              </b-table-column>\r\n            </b-table>\r\n\r\n            <!-- Resumen financiero -->\r\n            <div class=\"financial-summary mt-5\">\r\n              <h4 class=\"title is-5 mb-3\">Resumen Financiero</h4>\r\n              <div class=\"box has-background-light p-4\">\r\n                <div class=\"columns is-multiline\">\r\n                  <div class=\"column is-6\">\r\n                    <div class=\"field\">\r\n                      <label class=\"label\">Total sin IVA</label>\r\n                      <div class=\"control\">\r\n                        <input class=\"input\" type=\"text\" readonly \r\n                          :value=\"formatearMoneda(resumenFinanciero.summary.totalWithoutVAT)\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"column is-6\">\r\n                    <div class=\"field\">\r\n                      <label class=\"label\">Total IVA</label>\r\n                      <div class=\"control\">\r\n                        <input class=\"input\" type=\"text\" readonly \r\n                          :value=\"formatearMoneda(resumenFinanciero.summary.totalVAT)\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"column is-12\">\r\n                    <div class=\"field\">\r\n                      <label class=\"label\">Total con IVA</label>\r\n                      <div class=\"control\">\r\n                        <input class=\"input is-primary has-text-weight-bold\" type=\"text\" readonly \r\n                          :value=\"formatearMoneda(resumenFinanciero.summary.totalWithVAT)\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <footer class=\"modal-card-foot\">\r\n          <button class=\"button\" @click=\"cerrarModalResumen\">Cerrar</button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiRequest from '@/Servicios/HttpService';\r\nimport AyudanteSesion from '@/Servicios/AyudanteSesion';\r\n\r\nexport default {\r\n  name: 'OrdenesComponent',\r\n  \r\n  data() {\r\n    return {\r\n      // Lista de órdenes\r\n      ordenes: [],\r\n      ordenesFiltradas: [],\r\n      busqueda: '',\r\n      \r\n      // Paginación\r\n      paginaActual: 1,\r\n      elementosPorPagina: 10,\r\n      \r\n      // Estados de carga\r\n      cargando: false,\r\n      error: null,\r\n      \r\n      // Modal de edición\r\n      modalEditarActivo: false,\r\n      ordenEditando: {\r\n        id: null,\r\n        invoiceNumber: '',\r\n        orderDate: '',\r\n        isActive: true,\r\n        provider: null,\r\n        orderDetails: []\r\n      },\r\n      actualizando: false,\r\n      \r\n      // Modal de eliminación\r\n      modalEliminarActivo: false,\r\n      ordenEliminar: null,\r\n      eliminando: false,\r\n      \r\n      // Modal de detalles\r\n      modalDetallesActivo: false,\r\n      ordenDetalle: null,\r\n      \r\n      // Modal de resumen financiero\r\n      modalResumenActivo: false,\r\n      resumenFinanciero: null,\r\n      cargandoResumen: false,\r\n      \r\n      // Estado de administrador\r\n      esAdmin: false,\r\n      \r\n      // Caché de productos\r\n      productosCache: {}\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    // Obtener las órdenes para la página actual\r\n    ordenesPaginadas() {\r\n      const inicio = (this.paginaActual - 1) * this.elementosPorPagina;\r\n      const fin = inicio + this.elementosPorPagina;\r\n      return this.ordenesFiltradas.slice(inicio, fin);\r\n    },\r\n    \r\n    // Calcular el índice del primer elemento mostrado\r\n    paginaInicio() {\r\n      if (this.ordenesFiltradas.length === 0) return 0;\r\n      return (this.paginaActual - 1) * this.elementosPorPagina + 1;\r\n    },\r\n    \r\n    // Calcular el índice del último elemento mostrado\r\n    paginaFin() {\r\n      const fin = this.paginaActual * this.elementosPorPagina;\r\n      return fin > this.ordenesFiltradas.length ? this.ordenesFiltradas.length : fin;\r\n    },\r\n    \r\n    // Verificar si la orden tiene productos registrados\r\n    tieneProductosRegistrados() {\r\n      return this.ordenEditando && \r\n             this.ordenEditando.orderDetails && \r\n             this.ordenEditando.orderDetails.length > 0;\r\n    }\r\n  },\r\n  \r\n  created() {\r\n    this.verificarAdmin();\r\n    this.cargarOrdenes();\r\n    this.cargarProductos();\r\n  },\r\n  \r\n  methods: {\r\n    // Cambiar de página\r\n    cambiarPagina(pagina) {\r\n      this.paginaActual = pagina;\r\n    },\r\n    \r\n    // Cambiar elementos por página\r\n    cambiarElementosPorPagina() {\r\n      this.paginaActual = 1; // Volver a la primera página al cambiar elementos por página\r\n    },\r\n    \r\n    // Verificar si el usuario es administrador\r\n    verificarAdmin() {\r\n      const datosUsuario = AyudanteSesion.obtenerDatosSesion();\r\n      this.esAdmin = datosUsuario.rol === 'Admin';\r\n    },\r\n    \r\n    // Cargar todas las órdenes\r\n    async cargarOrdenes() {\r\n      this.cargando = true;\r\n      this.error = null;\r\n      \r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: 'orders'\r\n        });\r\n        \r\n        if (response.status === 200) {\r\n          this.ordenes = response.data;\r\n          \r\n          // Enriquecer las órdenes con nombres de productos\r\n          await this.enriquecerOrdenesConProductos(this.ordenes);\r\n          \r\n          this.ordenesFiltradas = [...this.ordenes];\r\n          this.paginaActual = 1; // Volver a la primera página al cargar nuevos datos\r\n        } else {\r\n          this.error = `Error ${response.status}: No se pudieron cargar las órdenes`;\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al cargar órdenes:', err);\r\n        this.error = err.message || 'Error al cargar las órdenes. Por favor, intente nuevamente.';\r\n      } finally {\r\n        this.cargando = false;\r\n      }\r\n    },\r\n    \r\n    // Enriquecer órdenes con nombres de productos\r\n    async enriquecerOrdenesConProductos(ordenes) {\r\n      // Si no tenemos productos en caché, los cargamos\r\n      if (Object.keys(this.productosCache).length === 0) {\r\n        await this.cargarProductos();\r\n      }\r\n      \r\n      try {\r\n        // Obtener todos los detalles de productos\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: 'order-details'\r\n        });\r\n        \r\n        if (response && response.data) {\r\n          // Crear un mapa de productos para acceso rápido\r\n          const productosMap = {};\r\n          response.data.forEach(detalle => {\r\n            if (detalle.product) {\r\n              productosMap[detalle.product.id] = detalle.product;\r\n            }\r\n          });\r\n          \r\n          // Actualizar el caché global con cualquier producto nuevo\r\n          Object.assign(this.productosCache, productosMap);\r\n          \r\n          // Enriquecer cada orden con nombres de productos\r\n          ordenes.forEach(orden => {\r\n            if (orden.orderDetails && orden.orderDetails.length > 0) {\r\n              orden.orderDetails.forEach(detalle => {\r\n                // Buscar el detalle correspondiente en los detalles con productos\r\n                const detalleCompleto = response.data.find(d => d.id === detalle.id);\r\n                \r\n                if (detalleCompleto && detalleCompleto.product) {\r\n                  // Si encontramos el detalle con su producto, usamos ese nombre\r\n                  detalle.productName = detalleCompleto.product.name;\r\n                  detalle.productId = detalleCompleto.product.id;\r\n                } else if (detalle.product && detalle.product.id) {\r\n                  // Si el detalle ya tiene un producto con ID\r\n                  const productId = detalle.product.id;\r\n                  if (productosMap[productId]) {\r\n                    detalle.productName = productosMap[productId].name;\r\n                  } else if (this.productosCache[productId]) {\r\n                    detalle.productName = this.productosCache[productId].name;\r\n                  } else {\r\n                    detalle.productName = detalle.product.name || `Producto #${productId}`;\r\n                  }\r\n                } else {\r\n                  // Si no podemos encontrar el producto, mostramos un mensaje genérico\r\n                  detalle.productName = \"Producto sin información\";\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al enriquecer órdenes con productos:\", error);\r\n      }\r\n    },\r\n    \r\n    // Obtener nombre de producto para un detalle\r\n    obtenerNombreProducto(detalle) {\r\n      if (detalle.productName) {\r\n        return detalle.productName;\r\n      }\r\n      \r\n      if (detalle.product && detalle.product.name) {\r\n        return detalle.product.name;\r\n      }\r\n      \r\n      if (detalle.product && detalle.product.id && this.productosCache[detalle.product.id]) {\r\n        return this.productosCache[detalle.product.id].name;\r\n      }\r\n      \r\n      if (detalle.productId && this.productosCache[detalle.productId]) {\r\n        return this.productosCache[detalle.productId].name;\r\n      }\r\n      \r\n      return \"Producto sin información\";\r\n    },\r\n    \r\n    // Cargar productos para tener un caché\r\n    async cargarProductos() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: 'order-details'\r\n        });\r\n        \r\n        if (response.status === 200 && Array.isArray(response.data)) {\r\n          // Crear un mapa de productos para acceso rápido\r\n          response.data.forEach(detalle => {\r\n            if (detalle.product && detalle.product.id) {\r\n              this.productosCache[detalle.product.id] = detalle.product;\r\n            }\r\n          });\r\n          \r\n          console.log('Caché de productos cargado:', Object.keys(this.productosCache).length, 'productos');\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al cargar productos:\", error);\r\n      }\r\n    },\r\n    \r\n    // Filtrar órdenes según la búsqueda\r\n    filtrarOrdenes() {\r\n      if (!this.busqueda.trim()) {\r\n        this.ordenesFiltradas = [...this.ordenes];\r\n        this.paginaActual = 1; // Volver a la primera página al limpiar la búsqueda\r\n        return;\r\n      }\r\n      \r\n      const busquedaLower = this.busqueda.toLowerCase().trim();\r\n      \r\n      this.ordenesFiltradas = this.ordenes.filter(orden => {\r\n        // Buscar en los datos básicos de la orden\r\n        const coincideBasicos = orden.invoiceNumber.toLowerCase().includes(busquedaLower) ||\r\n                               orden.provider.name.toLowerCase().includes(busquedaLower) ||\r\n                               orden.id.toString().includes(busquedaLower);\r\n        \r\n        // Buscar en los nombres de productos\r\n        let coincideProductos = false;\r\n        if (orden.orderDetails && orden.orderDetails.length > 0) {\r\n          coincideProductos = orden.orderDetails.some(detalle => {\r\n            const nombreProducto = this.obtenerNombreProducto(detalle);\r\n            return nombreProducto.toLowerCase().includes(busquedaLower);\r\n          });\r\n        }\r\n        \r\n        return coincideBasicos || coincideProductos;\r\n      });\r\n      \r\n      this.paginaActual = 1; // Volver a la primera página al filtrar\r\n    },\r\n    \r\n    // Formatear fecha\r\n    formatearFecha(fecha) {\r\n      if (!fecha) return 'N/A';\r\n      \r\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n      return new Date(fecha).toLocaleDateString('es-ES', options);\r\n    },\r\n    \r\n    // Formatear fecha para el resumen financiero\r\n    formatDate(dateString) {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('es-MX', { \r\n        year: 'numeric', \r\n        month: 'long', \r\n        day: 'numeric'\r\n      });\r\n    },\r\n    \r\n    // Formatear moneda\r\n    formatearMoneda(valor) {\r\n      if (valor === undefined || valor === null) return '$0.00';\r\n      \r\n      return new Intl.NumberFormat('es-SV', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 2\r\n      }).format(valor);\r\n    },\r\n    \r\n    // Calcular total sin impuesto\r\n    calcularTotalSinImpuesto() {\r\n      if (!this.ordenDetalle || !this.ordenDetalle.orderDetails) return this.formatearMoneda(0);\r\n      \r\n      const total = this.ordenDetalle.orderDetails.reduce((sum, detalle) => {\r\n        return sum + (detalle.calculatedTotalPriceWithouthTax || 0);\r\n      }, 0);\r\n      \r\n      return this.formatearMoneda(total);\r\n    },\r\n    \r\n    // Calcular total con impuesto\r\n    calcularTotalConImpuesto() {\r\n      if (!this.ordenDetalle || !this.ordenDetalle.orderDetails) return this.formatearMoneda(0);\r\n      \r\n      const total = this.ordenDetalle.orderDetails.reduce((sum, detalle) => {\r\n        return sum + (detalle.calculatedTotalPriceWithTax || 0);\r\n      }, 0);\r\n      \r\n      return this.formatearMoneda(total);\r\n    },\r\n    \r\n    // Abrir modal de edición\r\n    async abrirModalEditar(orden) {\r\n      // Hacer una copia profunda de la orden para editar\r\n      this.ordenEditando = JSON.parse(JSON.stringify({\r\n        id: orden.id,\r\n        invoiceNumber: orden.invoiceNumber,\r\n        orderDate: orden.orderDate,\r\n        isActive: orden.isActive,\r\n        provider: orden.provider,\r\n        orderDetails: orden.orderDetails || []\r\n      }));\r\n      \r\n      // Si no tenemos los detalles de la orden, los obtenemos\r\n      if (!orden.orderDetails || !Array.isArray(orden.orderDetails)) {\r\n        try {\r\n          const response = await apiRequest({\r\n            method: 'GET',\r\n            path: `orders/${orden.id}`\r\n          });\r\n          \r\n          if (response.status === 200 && response.data) {\r\n            this.ordenEditando.orderDetails = response.data.orderDetails || [];\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error al obtener detalles de la orden:\", error);\r\n          this.ordenEditando.orderDetails = [];\r\n        }\r\n      }\r\n      \r\n      this.modalEditarActivo = true;\r\n    },\r\n    \r\n    // Cerrar modal de edición\r\n    cerrarModalEditar() {\r\n      this.modalEditarActivo = false;\r\n      this.ordenEditando = {\r\n        id: null,\r\n        invoiceNumber: '',\r\n        orderDate: '',\r\n        isActive: true,\r\n        provider: null,\r\n        orderDetails: []\r\n      };\r\n    },\r\n    \r\n    // Actualizar orden\r\n    async actualizarOrden() {\r\n      if (!this.ordenEditando.id) return;\r\n      \r\n      this.actualizando = true;\r\n      \r\n      try {\r\n        // Si tiene productos registrados, no permitimos cambiar el número de factura\r\n        const datosActualizacion = {\r\n          orderDate: this.ordenEditando.orderDate\r\n        };\r\n        \r\n        // Solo incluimos el invoiceNumber si no tiene productos registrados\r\n        if (!this.tieneProductosRegistrados) {\r\n          datosActualizacion.invoiceNumber = this.ordenEditando.invoiceNumber;\r\n        }\r\n        \r\n        const response = await apiRequest({\r\n          method: 'PATCH',\r\n          path: `orders/${this.ordenEditando.id}`,\r\n          data: datosActualizacion\r\n        });\r\n        \r\n        if (response.status === 200) {\r\n          // Mostrar mensaje de éxito\r\n          this.$buefy.toast.open({\r\n            message: 'Orden actualizada correctamente',\r\n            type: 'is-success'\r\n          });\r\n          \r\n          // Cerrar el modal\r\n          this.cerrarModalEditar();\r\n          \r\n          // Recargar los datos para asegurar que todo esté actualizado\r\n          await this.cargarOrdenes();\r\n        } else {\r\n          throw new Error(`Error ${response.status}: No se pudo actualizar la orden`);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al actualizar orden:', err);\r\n        \r\n        this.$buefy.toast.open({\r\n          message: err.message || 'Error al actualizar la orden',\r\n          type: 'is-danger'\r\n        });\r\n      } finally {\r\n        this.actualizando = false;\r\n      }\r\n    },\r\n    \r\n    // Confirmar eliminación\r\n    confirmarEliminar(orden) {\r\n      this.ordenEliminar = orden;\r\n      this.modalEliminarActivo = true;\r\n    },\r\n    \r\n    // Cerrar modal de eliminación\r\n    cerrarModalEliminar() {\r\n      this.modalEliminarActivo = false;\r\n      this.ordenEliminar = null;\r\n    },\r\n    \r\n    // Eliminar orden\r\n    async eliminarOrden() {\r\n      if (!this.ordenEliminar || !this.ordenEliminar.id) return;\r\n      \r\n      this.eliminando = true;\r\n      \r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'DELETE',\r\n          path: `orders/${this.ordenEliminar.id}`\r\n        });\r\n        \r\n        if (response.status === 200 || response.status === 204) {\r\n          // Eliminar la orden de la lista local\r\n          this.ordenes = this.ordenes.filter(o => o.id !== this.ordenEliminar.id);\r\n          this.ordenesFiltradas = this.ordenesFiltradas.filter(o => o.id !== this.ordenEliminar.id);\r\n          \r\n          // Mostrar mensaje de éxito\r\n          this.$buefy.toast.open({\r\n            message: 'Orden eliminada correctamente',\r\n            type: 'is-success'\r\n          });\r\n          \r\n          // Cerrar el modal\r\n          this.cerrarModalEliminar();\r\n        } else {\r\n          throw new Error(`Error ${response.status}: No se pudo eliminar la orden`);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al eliminar orden:', err);\r\n        \r\n        this.$buefy.toast.open({\r\n          message: err.message || 'Error al eliminar la orden',\r\n          type: 'is-danger'\r\n        });\r\n      } finally {\r\n        this.eliminando = false;\r\n      }\r\n    },\r\n    \r\n    // Ver detalles de la orden\r\n    async verDetalles(orden) {\r\n      this.ordenDetalle = JSON.parse(JSON.stringify(orden)); // Copia profunda\r\n      this.modalDetallesActivo = true;\r\n    },\r\n    \r\n    // Cerrar modal de detalles\r\n    cerrarModalDetalles() {\r\n      this.modalDetallesActivo = false;\r\n      this.ordenDetalle = null;\r\n    },\r\n    \r\n    // Ver resumen financiero\r\n    async verResumenFinanciero(orden) {\r\n      if (!orden || !orden.invoiceNumber) {\r\n        this.$buefy.toast.open({\r\n          message: 'No se pudo obtener el número de factura para esta orden',\r\n          type: 'is-danger'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      this.cargando = true;\r\n      this.resumenFinanciero = null; // Reiniciar el resumen financiero\r\n      \r\n      try {\r\n        console.log(`Obteniendo resumen financiero para factura: ${orden.invoiceNumber}`);\r\n        \r\n        // Si no tenemos productos en caché, los cargamos\r\n        if (Object.keys(this.productosCache).length === 0) {\r\n          await this.cargarProductos();\r\n        }\r\n        \r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: `order-details/summary/${orden.invoiceNumber}`\r\n        });\r\n        \r\n        if (response && response.data && response.data.summary) {\r\n          this.resumenFinanciero = response.data;\r\n          \r\n          // Enriquecer los detalles del resumen con nombres de productos\r\n          if (this.resumenFinanciero.details) {\r\n            // Primero, intentemos obtener los detalles completos de los productos para esta orden\r\n            try {\r\n              const detallesResponse = await apiRequest({\r\n                method: 'GET',\r\n                path: 'order-details'\r\n              });\r\n              \r\n              if (detallesResponse && detallesResponse.data) {\r\n                // Crear un mapa de productos para acceso rápido\r\n                const productosMap = {};\r\n                detallesResponse.data.forEach(detalle => {\r\n                  if (detalle.product) {\r\n                    productosMap[detalle.product.id] = detalle.product;\r\n                  }\r\n                });\r\n                \r\n                // Actualizar el caché global con cualquier producto nuevo\r\n                Object.assign(this.productosCache, productosMap);\r\n                \r\n                // Ahora enriquecer los detalles del resumen\r\n                this.resumenFinanciero.details.forEach(detalle => {\r\n                  if (detalle.productId && productosMap[detalle.productId]) {\r\n                    detalle.productName = productosMap[detalle.productId].name;\r\n                  } else if (detalle.productId && this.productosCache[detalle.productId]) {\r\n                    detalle.productName = this.productosCache[detalle.productId].name;\r\n                  } else {\r\n                    detalle.productName = `Producto ID: ${detalle.productId || 'No disponible'}`;\r\n                  }\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error al obtener detalles de productos para el resumen:\", error);\r\n              // Si hay un error, usamos solo el caché\r\n              this.resumenFinanciero.details.forEach(detalle => {\r\n                if (detalle.productId && this.productosCache[detalle.productId]) {\r\n                  detalle.productName = this.productosCache[detalle.productId].name;\r\n                } else {\r\n                  detalle.productName = `Producto ID: ${detalle.productId || 'No disponible'}`;\r\n                }\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          console.warn('Respuesta de resumen financiero incompleta o vacía');\r\n          // Crear un objeto resumenFinanciero vacío para mostrar el mensaje de no disponible\r\n          this.resumenFinanciero = { details: [] };\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error al obtener resumen financiero:\", error);\r\n        \r\n        // Crear un objeto resumenFinanciero vacío para mostrar el mensaje de no disponible\r\n        this.resumenFinanciero = { details: [] };\r\n        \r\n        // Registrar el error en la consola pero no mostrar toast, ya que mostraremos el modal con mensaje\r\n        console.error(\"Detalles del error:\", error);\r\n      } finally {\r\n        this.cargando = false;\r\n        // Siempre mostrar el modal, incluso si no hay datos\r\n        this.modalResumenActivo = true;\r\n      }\r\n    },\r\n    \r\n    // Cerrar modal de resumen financiero\r\n    cerrarModalResumen() {\r\n      this.modalResumenActivo = false;\r\n      this.resumenFinanciero = null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.ordenes-component {\r\n  padding: 1rem 0;\r\n}\r\n\r\n.section-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n  padding-bottom: 0.75rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.section-icon {\r\n  font-size: 1.5rem;\r\n  margin-right: 0.75rem;\r\n  color: #3273dc;\r\n}\r\n\r\n.header-right {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-box {\r\n  position: relative;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.search-input {\r\n  padding: 0.5rem 1rem 0.5rem 2.5rem;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px;\r\n  width: 250px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.search-icon {\r\n  position: absolute;\r\n  left: 0.75rem;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: #7a7a7a;\r\n}\r\n\r\n.btn-refresh {\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px;\r\n  padding: 0.5rem 1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.btn-refresh:hover {\r\n  background-color: #e8e8e8;\r\n}\r\n\r\n.btn-refresh i {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.table th, .table td {\r\n  padding: 0.75rem;\r\n  text-align: left;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: 600;\r\n}\r\n\r\n.provider-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.provider-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.provider-details {\r\n  font-size: 0.85rem;\r\n  color: #666;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.badge {\r\n  background-color: #f0f0f0;\r\n  border-radius: 12px;\r\n  padding: 0.25rem 0.75rem;\r\n  font-size: 0.85rem;\r\n  color: #555;\r\n}\r\n\r\n.status-badge {\r\n  display: inline-block;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 12px;\r\n  font-size: 0.85rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-badge.active {\r\n  background-color: #23d160;\r\n  color: white;\r\n}\r\n\r\n.status-badge.inactive {\r\n  background-color: #ff3860;\r\n  color: white;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.btn-action {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0.25rem;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-action:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-action.edit {\r\n  color: #3273dc;\r\n}\r\n\r\n.btn-action.delete {\r\n  color: #ff3860;\r\n}\r\n\r\n.btn-action.view {\r\n  color: #209cee;\r\n}\r\n\r\n.btn-action:hover:not(:disabled) {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.message.info {\r\n  background-color: #f6f9fe;\r\n  border-left: 4px solid #3273dc;\r\n}\r\n\r\n.message.error {\r\n  background-color: #fff5f7;\r\n  border-left: 4px solid #ff3860;\r\n}\r\n\r\n.message-icon {\r\n  margin-right: 0.75rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.message.info .message-icon {\r\n  color: #3273dc;\r\n}\r\n\r\n.message.error .message-icon {\r\n  color: #ff3860;\r\n}\r\n\r\n.btn-retry {\r\n  margin-left: auto;\r\n  background: none;\r\n  border: 1px solid #ff3860;\r\n  color: #ff3860;\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.btn-retry:hover {\r\n  background-color: #ff3860;\r\n  color: white;\r\n}\r\n\r\n.inactive-row {\r\n  background-color: #fff5f7;\r\n  opacity: 0.8;\r\n}\r\n\r\n/* Estilos para el modal de detalles */\r\n.order-detail-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.provider-box {\r\n  background-color: #f8f9fa;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.order-details-section {\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n/* Estilos para el modal de resumen financiero */\r\n.invoice-info {\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.financial-summary {\r\n  margin-top: 25px;\r\n}\r\n\r\n/* Estilos para la lista de productos en la tabla principal */\r\n.productos-lista {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.25rem;\r\n  max-height: 150px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.producto-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 0.25rem 0;\r\n}\r\n\r\n.producto-nombre {\r\n  font-weight: 500;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.producto-cantidad {\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n}\r\n\r\n.ver-mas {\r\n  margin-top: 0.25rem;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.ver-mas a {\r\n  color: #3273dc;\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n}\r\n\r\n.ver-mas a:hover {\r\n  color: #2160c4;\r\n}\r\n\r\n/* Estilos para la paginación */\r\n.pagination-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 1rem;\r\n  padding-top: 1rem;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.pagination-info {\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n}\r\n\r\n.per-page-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.per-page-selector span {\r\n  color: #666;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .section-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .header-right {\r\n    margin-top: 1rem;\r\n    width: 100%;\r\n  }\r\n  \r\n  .search-box {\r\n    width: 100%;\r\n    margin-right: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .search-input {\r\n    width: 100%;\r\n  }\r\n  \r\n  .btn-refresh {\r\n    width: 100%;\r\n  }\r\n  \r\n  .table-container {\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .actions {\r\n    flex-wrap: nowrap;\r\n  }\r\n  \r\n  .pagination-container {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    align-items: center;\r\n  }\r\n  \r\n  .pagination-info {\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #0074b8;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 2px;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #005a8f;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Estilos para el modal de detalles mejorado */\r\n.info-box {\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.order-details-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n.order-details-section .table {\r\n  margin-bottom: 0;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.totals-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  background-color: #f0f0f0;\r\n  padding: 10px 15px;\r\n  font-weight: bold;\r\n  text-align: right;\r\n  border: 1px solid #e0e0e0;\r\n  border-top: none;\r\n}\r\n\r\n.totals-row span:first-child {\r\n  grid-column: 1 / 2;\r\n}\r\n\r\n.modal-card {\r\n  max-height: 80vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.modal-card-body {\r\n  overflow-y: auto;\r\n  max-height: none;\r\n}\r\n\r\n/* Estilos para mensaje de no disponible */\r\n.no-data-message {\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.no-data-message .message {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.no-data-details {\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  text-align: left;\r\n}\r\n\r\n.no-data-details ul {\r\n  margin-left: 1.5rem;\r\n  margin-top: 0.5rem;\r\n  list-style-type: disc;\r\n}\r\n\r\n.no-data-details li {\r\n  margin-bottom: 0.5rem;\r\n}\r\n</style>"],"mappings":";;;;;;AAgfA,OAAAA,UAAA;AACA,OAAAC,cAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACA;MACAC,OAAA;MACAC,gBAAA;MACAC,QAAA;MAEA;MACAC,YAAA;MACAC,kBAAA;MAEA;MACAC,QAAA;MACAC,KAAA;MAEA;MACAC,iBAAA;MACAC,aAAA;QACAC,EAAA;QACAC,aAAA;QACAC,SAAA;QACAC,QAAA;QACAC,QAAA;QACAC,YAAA;MACA;MACAC,YAAA;MAEA;MACAC,mBAAA;MACAC,aAAA;MACAC,UAAA;MAEA;MACAC,mBAAA;MACAC,YAAA;MAEA;MACAC,kBAAA;MACAC,iBAAA;MACAC,eAAA;MAEA;MACAC,OAAA;MAEA;MACAC,cAAA;IACA;EACA;EAEAC,QAAA;IACA;IACAC,iBAAA;MACA,MAAAC,MAAA,SAAAzB,YAAA,aAAAC,kBAAA;MACA,MAAAyB,GAAA,GAAAD,MAAA,QAAAxB,kBAAA;MACA,YAAAH,gBAAA,CAAA6B,KAAA,CAAAF,MAAA,EAAAC,GAAA;IACA;IAEA;IACAE,aAAA;MACA,SAAA9B,gBAAA,CAAA+B,MAAA;MACA,aAAA7B,YAAA,aAAAC,kBAAA;IACA;IAEA;IACA6B,UAAA;MACA,MAAAJ,GAAA,QAAA1B,YAAA,QAAAC,kBAAA;MACA,OAAAyB,GAAA,QAAA5B,gBAAA,CAAA+B,MAAA,QAAA/B,gBAAA,CAAA+B,MAAA,GAAAH,GAAA;IACA;IAEA;IACAK,0BAAA;MACA,YAAA1B,aAAA,IACA,KAAAA,aAAA,CAAAM,YAAA,IACA,KAAAN,aAAA,CAAAM,YAAA,CAAAkB,MAAA;IACA;EACA;EAEAG,QAAA;IACA,KAAAC,cAAA;IACA,KAAAC,aAAA;IACA,KAAAC,eAAA;EACA;EAEAC,OAAA;IACA;IACAC,cAAAC,MAAA;MACA,KAAAtC,YAAA,GAAAsC,MAAA;IACA;IAEA;IACAC,0BAAA;MACA,KAAAvC,YAAA;IACA;IAEA;IACAiC,eAAA;MACA,MAAAO,YAAA,GAAA9C,cAAA,CAAA+C,kBAAA;MACA,KAAApB,OAAA,GAAAmB,YAAA,CAAAE,GAAA;IACA;IAEA;IACA,MAAAR,cAAA;MACA,KAAAhC,QAAA;MACA,KAAAC,KAAA;MAEA;QACA,MAAAwC,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA;QACA;QAEA,IAAAF,QAAA,CAAAG,MAAA;UACA,KAAAjD,OAAA,GAAA8C,QAAA,CAAA/C,IAAA;;UAEA;UACA,WAAAmD,6BAAA,MAAAlD,OAAA;UAEA,KAAAC,gBAAA,YAAAD,OAAA;UACA,KAAAG,YAAA;QACA;UACA,KAAAG,KAAA,YAAAwC,QAAA,CAAAG,MAAA;QACA;MACA,SAAAE,GAAA;QACAC,OAAA,CAAA9C,KAAA,6BAAA6C,GAAA;QACA,KAAA7C,KAAA,GAAA6C,GAAA,CAAAE,OAAA;MACA;QACA,KAAAhD,QAAA;MACA;IACA;IAEA;IACA,MAAA6C,8BAAAlD,OAAA;MACA;MACA,IAAAsD,MAAA,CAAAC,IAAA,MAAA9B,cAAA,EAAAO,MAAA;QACA,WAAAM,eAAA;MACA;MAEA;QACA;QACA,MAAAQ,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA;QACA;QAEA,IAAAF,QAAA,IAAAA,QAAA,CAAA/C,IAAA;UACA;UACA,MAAAyD,YAAA;UACAV,QAAA,CAAA/C,IAAA,CAAA0D,OAAA,CAAAC,OAAA;YACA,IAAAA,OAAA,CAAAC,OAAA;cACAH,YAAA,CAAAE,OAAA,CAAAC,OAAA,CAAAlD,EAAA,IAAAiD,OAAA,CAAAC,OAAA;YACA;UACA;;UAEA;UACAL,MAAA,CAAAM,MAAA,MAAAnC,cAAA,EAAA+B,YAAA;;UAEA;UACAxD,OAAA,CAAAyD,OAAA,CAAAI,KAAA;YACA,IAAAA,KAAA,CAAA/C,YAAA,IAAA+C,KAAA,CAAA/C,YAAA,CAAAkB,MAAA;cACA6B,KAAA,CAAA/C,YAAA,CAAA2C,OAAA,CAAAC,OAAA;gBACA;gBACA,MAAAI,eAAA,GAAAhB,QAAA,CAAA/C,IAAA,CAAAgE,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAvD,EAAA,KAAAiD,OAAA,CAAAjD,EAAA;gBAEA,IAAAqD,eAAA,IAAAA,eAAA,CAAAH,OAAA;kBACA;kBACAD,OAAA,CAAAO,WAAA,GAAAH,eAAA,CAAAH,OAAA,CAAA7D,IAAA;kBACA4D,OAAA,CAAAQ,SAAA,GAAAJ,eAAA,CAAAH,OAAA,CAAAlD,EAAA;gBACA,WAAAiD,OAAA,CAAAC,OAAA,IAAAD,OAAA,CAAAC,OAAA,CAAAlD,EAAA;kBACA;kBACA,MAAAyD,SAAA,GAAAR,OAAA,CAAAC,OAAA,CAAAlD,EAAA;kBACA,IAAA+C,YAAA,CAAAU,SAAA;oBACAR,OAAA,CAAAO,WAAA,GAAAT,YAAA,CAAAU,SAAA,EAAApE,IAAA;kBACA,gBAAA2B,cAAA,CAAAyC,SAAA;oBACAR,OAAA,CAAAO,WAAA,QAAAxC,cAAA,CAAAyC,SAAA,EAAApE,IAAA;kBACA;oBACA4D,OAAA,CAAAO,WAAA,GAAAP,OAAA,CAAAC,OAAA,CAAA7D,IAAA,iBAAAoE,SAAA;kBACA;gBACA;kBACA;kBACAR,OAAA,CAAAO,WAAA;gBACA;cACA;YACA;UACA;QACA;MACA,SAAA3D,KAAA;QACA8C,OAAA,CAAA9C,KAAA,+CAAAA,KAAA;MACA;IACA;IAEA;IACA6D,sBAAAT,OAAA;MACA,IAAAA,OAAA,CAAAO,WAAA;QACA,OAAAP,OAAA,CAAAO,WAAA;MACA;MAEA,IAAAP,OAAA,CAAAC,OAAA,IAAAD,OAAA,CAAAC,OAAA,CAAA7D,IAAA;QACA,OAAA4D,OAAA,CAAAC,OAAA,CAAA7D,IAAA;MACA;MAEA,IAAA4D,OAAA,CAAAC,OAAA,IAAAD,OAAA,CAAAC,OAAA,CAAAlD,EAAA,SAAAgB,cAAA,CAAAiC,OAAA,CAAAC,OAAA,CAAAlD,EAAA;QACA,YAAAgB,cAAA,CAAAiC,OAAA,CAAAC,OAAA,CAAAlD,EAAA,EAAAX,IAAA;MACA;MAEA,IAAA4D,OAAA,CAAAQ,SAAA,SAAAzC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA;QACA,YAAAzC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA,EAAApE,IAAA;MACA;MAEA;IACA;IAEA;IACA,MAAAwC,gBAAA;MACA;QACA,MAAAQ,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA;QACA;QAEA,IAAAF,QAAA,CAAAG,MAAA,YAAAmB,KAAA,CAAAC,OAAA,CAAAvB,QAAA,CAAA/C,IAAA;UACA;UACA+C,QAAA,CAAA/C,IAAA,CAAA0D,OAAA,CAAAC,OAAA;YACA,IAAAA,OAAA,CAAAC,OAAA,IAAAD,OAAA,CAAAC,OAAA,CAAAlD,EAAA;cACA,KAAAgB,cAAA,CAAAiC,OAAA,CAAAC,OAAA,CAAAlD,EAAA,IAAAiD,OAAA,CAAAC,OAAA;YACA;UACA;UAEAP,OAAA,CAAAkB,GAAA,gCAAAhB,MAAA,CAAAC,IAAA,MAAA9B,cAAA,EAAAO,MAAA;QACA;MACA,SAAA1B,KAAA;QACA8C,OAAA,CAAA9C,KAAA,+BAAAA,KAAA;MACA;IACA;IAEA;IACAiE,eAAA;MACA,UAAArE,QAAA,CAAAsE,IAAA;QACA,KAAAvE,gBAAA,YAAAD,OAAA;QACA,KAAAG,YAAA;QACA;MACA;MAEA,MAAAsE,aAAA,QAAAvE,QAAA,CAAAwE,WAAA,GAAAF,IAAA;MAEA,KAAAvE,gBAAA,QAAAD,OAAA,CAAA2E,MAAA,CAAAd,KAAA;QACA;QACA,MAAAe,eAAA,GAAAf,KAAA,CAAAnD,aAAA,CAAAgE,WAAA,GAAAG,QAAA,CAAAJ,aAAA,KACAZ,KAAA,CAAAhD,QAAA,CAAAf,IAAA,CAAA4E,WAAA,GAAAG,QAAA,CAAAJ,aAAA,KACAZ,KAAA,CAAApD,EAAA,CAAAqE,QAAA,GAAAD,QAAA,CAAAJ,aAAA;;QAEA;QACA,IAAAM,iBAAA;QACA,IAAAlB,KAAA,CAAA/C,YAAA,IAAA+C,KAAA,CAAA/C,YAAA,CAAAkB,MAAA;UACA+C,iBAAA,GAAAlB,KAAA,CAAA/C,YAAA,CAAAkE,IAAA,CAAAtB,OAAA;YACA,MAAAuB,cAAA,QAAAd,qBAAA,CAAAT,OAAA;YACA,OAAAuB,cAAA,CAAAP,WAAA,GAAAG,QAAA,CAAAJ,aAAA;UACA;QACA;QAEA,OAAAG,eAAA,IAAAG,iBAAA;MACA;MAEA,KAAA5E,YAAA;IACA;IAEA;IACA+E,eAAAC,KAAA;MACA,KAAAA,KAAA;MAEA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,WAAAC,IAAA,CAAAL,KAAA,EAAAM,kBAAA,UAAAL,OAAA;IACA;IAEA;IACAM,WAAAC,UAAA;MACA,KAAAA,UAAA;MACA,MAAAC,IAAA,OAAAJ,IAAA,CAAAG,UAAA;MACA,OAAAC,IAAA,CAAAH,kBAAA;QACAJ,IAAA;QACAC,KAAA;QACAC,GAAA;MACA;IACA;IAEA;IACAM,gBAAAC,KAAA;MACA,IAAAA,KAAA,KAAAC,SAAA,IAAAD,KAAA;MAEA,WAAAE,IAAA,CAAAC,YAAA;QACAC,KAAA;QACAC,QAAA;QACAC,qBAAA;MACA,GAAAC,MAAA,CAAAP,KAAA;IACA;IAEA;IACAQ,yBAAA;MACA,UAAAlF,YAAA,UAAAA,YAAA,CAAAN,YAAA,cAAA+E,eAAA;MAEA,MAAAU,KAAA,QAAAnF,YAAA,CAAAN,YAAA,CAAA0F,MAAA,EAAAC,GAAA,EAAA/C,OAAA;QACA,OAAA+C,GAAA,IAAA/C,OAAA,CAAAgD,+BAAA;MACA;MAEA,YAAAb,eAAA,CAAAU,KAAA;IACA;IAEA;IACAI,yBAAA;MACA,UAAAvF,YAAA,UAAAA,YAAA,CAAAN,YAAA,cAAA+E,eAAA;MAEA,MAAAU,KAAA,QAAAnF,YAAA,CAAAN,YAAA,CAAA0F,MAAA,EAAAC,GAAA,EAAA/C,OAAA;QACA,OAAA+C,GAAA,IAAA/C,OAAA,CAAAkD,2BAAA;MACA;MAEA,YAAAf,eAAA,CAAAU,KAAA;IACA;IAEA;IACA,MAAAM,iBAAAhD,KAAA;MACA;MACA,KAAArD,aAAA,GAAAsG,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA;QACAvG,EAAA,EAAAoD,KAAA,CAAApD,EAAA;QACAC,aAAA,EAAAmD,KAAA,CAAAnD,aAAA;QACAC,SAAA,EAAAkD,KAAA,CAAAlD,SAAA;QACAC,QAAA,EAAAiD,KAAA,CAAAjD,QAAA;QACAC,QAAA,EAAAgD,KAAA,CAAAhD,QAAA;QACAC,YAAA,EAAA+C,KAAA,CAAA/C,YAAA;MACA;;MAEA;MACA,KAAA+C,KAAA,CAAA/C,YAAA,KAAAsD,KAAA,CAAAC,OAAA,CAAAR,KAAA,CAAA/C,YAAA;QACA;UACA,MAAAgC,QAAA,SAAAlD,UAAA;YACAmD,MAAA;YACAC,IAAA,YAAAa,KAAA,CAAApD,EAAA;UACA;UAEA,IAAAqC,QAAA,CAAAG,MAAA,YAAAH,QAAA,CAAA/C,IAAA;YACA,KAAAS,aAAA,CAAAM,YAAA,GAAAgC,QAAA,CAAA/C,IAAA,CAAAe,YAAA;UACA;QACA,SAAAR,KAAA;UACA8C,OAAA,CAAA9C,KAAA,2CAAAA,KAAA;UACA,KAAAE,aAAA,CAAAM,YAAA;QACA;MACA;MAEA,KAAAP,iBAAA;IACA;IAEA;IACA0G,kBAAA;MACA,KAAA1G,iBAAA;MACA,KAAAC,aAAA;QACAC,EAAA;QACAC,aAAA;QACAC,SAAA;QACAC,QAAA;QACAC,QAAA;QACAC,YAAA;MACA;IACA;IAEA;IACA,MAAAoG,gBAAA;MACA,UAAA1G,aAAA,CAAAC,EAAA;MAEA,KAAAM,YAAA;MAEA;QACA;QACA,MAAAoG,kBAAA;UACAxG,SAAA,OAAAH,aAAA,CAAAG;QACA;;QAEA;QACA,UAAAuB,yBAAA;UACAiF,kBAAA,CAAAzG,aAAA,QAAAF,aAAA,CAAAE,aAAA;QACA;QAEA,MAAAoC,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA,iBAAAxC,aAAA,CAAAC,EAAA;UACAV,IAAA,EAAAoH;QACA;QAEA,IAAArE,QAAA,CAAAG,MAAA;UACA;UACA,KAAAmE,MAAA,CAAAC,KAAA,CAAAC,IAAA;YACAjE,OAAA;YACAkE,IAAA;UACA;;UAEA;UACA,KAAAN,iBAAA;;UAEA;UACA,WAAA5E,aAAA;QACA;UACA,UAAAmF,KAAA,UAAA1E,QAAA,CAAAG,MAAA;QACA;MACA,SAAAE,GAAA;QACAC,OAAA,CAAA9C,KAAA,+BAAA6C,GAAA;QAEA,KAAAiE,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAjE,OAAA,EAAAF,GAAA,CAAAE,OAAA;UACAkE,IAAA;QACA;MACA;QACA,KAAAxG,YAAA;MACA;IACA;IAEA;IACA0G,kBAAA5D,KAAA;MACA,KAAA5C,aAAA,GAAA4C,KAAA;MACA,KAAA7C,mBAAA;IACA;IAEA;IACA0G,oBAAA;MACA,KAAA1G,mBAAA;MACA,KAAAC,aAAA;IACA;IAEA;IACA,MAAA0G,cAAA;MACA,UAAA1G,aAAA,UAAAA,aAAA,CAAAR,EAAA;MAEA,KAAAS,UAAA;MAEA;QACA,MAAA4B,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA,iBAAA/B,aAAA,CAAAR,EAAA;QACA;QAEA,IAAAqC,QAAA,CAAAG,MAAA,YAAAH,QAAA,CAAAG,MAAA;UACA;UACA,KAAAjD,OAAA,QAAAA,OAAA,CAAA2E,MAAA,CAAAiD,CAAA,IAAAA,CAAA,CAAAnH,EAAA,UAAAQ,aAAA,CAAAR,EAAA;UACA,KAAAR,gBAAA,QAAAA,gBAAA,CAAA0E,MAAA,CAAAiD,CAAA,IAAAA,CAAA,CAAAnH,EAAA,UAAAQ,aAAA,CAAAR,EAAA;;UAEA;UACA,KAAA2G,MAAA,CAAAC,KAAA,CAAAC,IAAA;YACAjE,OAAA;YACAkE,IAAA;UACA;;UAEA;UACA,KAAAG,mBAAA;QACA;UACA,UAAAF,KAAA,UAAA1E,QAAA,CAAAG,MAAA;QACA;MACA,SAAAE,GAAA;QACAC,OAAA,CAAA9C,KAAA,6BAAA6C,GAAA;QAEA,KAAAiE,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAjE,OAAA,EAAAF,GAAA,CAAAE,OAAA;UACAkE,IAAA;QACA;MACA;QACA,KAAArG,UAAA;MACA;IACA;IAEA;IACA,MAAA2G,YAAAhE,KAAA;MACA,KAAAzC,YAAA,GAAA0F,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,CAAAnD,KAAA;MACA,KAAA1C,mBAAA;IACA;IAEA;IACA2G,oBAAA;MACA,KAAA3G,mBAAA;MACA,KAAAC,YAAA;IACA;IAEA;IACA,MAAA2G,qBAAAlE,KAAA;MACA,KAAAA,KAAA,KAAAA,KAAA,CAAAnD,aAAA;QACA,KAAA0G,MAAA,CAAAC,KAAA,CAAAC,IAAA;UACAjE,OAAA;UACAkE,IAAA;QACA;QACA;MACA;MAEA,KAAAlH,QAAA;MACA,KAAAiB,iBAAA;;MAEA;QACA8B,OAAA,CAAAkB,GAAA,gDAAAT,KAAA,CAAAnD,aAAA;;QAEA;QACA,IAAA4C,MAAA,CAAAC,IAAA,MAAA9B,cAAA,EAAAO,MAAA;UACA,WAAAM,eAAA;QACA;QAEA,MAAAQ,QAAA,SAAAlD,UAAA;UACAmD,MAAA;UACAC,IAAA,2BAAAa,KAAA,CAAAnD,aAAA;QACA;QAEA,IAAAoC,QAAA,IAAAA,QAAA,CAAA/C,IAAA,IAAA+C,QAAA,CAAA/C,IAAA,CAAAiI,OAAA;UACA,KAAA1G,iBAAA,GAAAwB,QAAA,CAAA/C,IAAA;;UAEA;UACA,SAAAuB,iBAAA,CAAA2G,OAAA;YACA;YACA;cACA,MAAAC,gBAAA,SAAAtI,UAAA;gBACAmD,MAAA;gBACAC,IAAA;cACA;cAEA,IAAAkF,gBAAA,IAAAA,gBAAA,CAAAnI,IAAA;gBACA;gBACA,MAAAyD,YAAA;gBACA0E,gBAAA,CAAAnI,IAAA,CAAA0D,OAAA,CAAAC,OAAA;kBACA,IAAAA,OAAA,CAAAC,OAAA;oBACAH,YAAA,CAAAE,OAAA,CAAAC,OAAA,CAAAlD,EAAA,IAAAiD,OAAA,CAAAC,OAAA;kBACA;gBACA;;gBAEA;gBACAL,MAAA,CAAAM,MAAA,MAAAnC,cAAA,EAAA+B,YAAA;;gBAEA;gBACA,KAAAlC,iBAAA,CAAA2G,OAAA,CAAAxE,OAAA,CAAAC,OAAA;kBACA,IAAAA,OAAA,CAAAQ,SAAA,IAAAV,YAAA,CAAAE,OAAA,CAAAQ,SAAA;oBACAR,OAAA,CAAAO,WAAA,GAAAT,YAAA,CAAAE,OAAA,CAAAQ,SAAA,EAAApE,IAAA;kBACA,WAAA4D,OAAA,CAAAQ,SAAA,SAAAzC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA;oBACAR,OAAA,CAAAO,WAAA,QAAAxC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA,EAAApE,IAAA;kBACA;oBACA4D,OAAA,CAAAO,WAAA,mBAAAP,OAAA,CAAAQ,SAAA;kBACA;gBACA;cACA;YACA,SAAA5D,KAAA;cACA8C,OAAA,CAAA9C,KAAA,4DAAAA,KAAA;cACA;cACA,KAAAgB,iBAAA,CAAA2G,OAAA,CAAAxE,OAAA,CAAAC,OAAA;gBACA,IAAAA,OAAA,CAAAQ,SAAA,SAAAzC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA;kBACAR,OAAA,CAAAO,WAAA,QAAAxC,cAAA,CAAAiC,OAAA,CAAAQ,SAAA,EAAApE,IAAA;gBACA;kBACA4D,OAAA,CAAAO,WAAA,mBAAAP,OAAA,CAAAQ,SAAA;gBACA;cACA;YACA;UACA;QACA;UACAd,OAAA,CAAA+E,IAAA;UACA;UACA,KAAA7G,iBAAA;YAAA2G,OAAA;UAAA;QACA;MACA,SAAA3H,KAAA;QACA8C,OAAA,CAAA9C,KAAA,yCAAAA,KAAA;;QAEA;QACA,KAAAgB,iBAAA;UAAA2G,OAAA;QAAA;;QAEA;QACA7E,OAAA,CAAA9C,KAAA,wBAAAA,KAAA;MACA;QACA,KAAAD,QAAA;QACA;QACA,KAAAgB,kBAAA;MACA;IACA;IAEA;IACA+G,mBAAA;MACA,KAAA/G,kBAAA;MACA,KAAAC,iBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}