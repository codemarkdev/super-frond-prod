{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Utiles from '../../Servicios/Utiles';\n// import AyudanteSesion from '../../Servicios/AyudanteSesion'\n// import HttpService from '../../Servicios/HttpService'\nimport ErroresComponent from '../Extras/ErroresComponent';\nimport apiRequest from '../../Servicios/HttpService';\nexport default {\n  name: \"CambiarPassword\",\n  components: {\n    ErroresComponent\n  },\n  data: () => ({\n    password: {\n      passwordActual: \"\",\n      passwordNueva: \"\",\n      passwordRepetida: \"\"\n    },\n    mensajesErrores: [],\n    cargando: false\n  }),\n  methods: {\n    async registrar() {\n      this.mensajesErrores = [];\n      this.mensajesErrores = Utiles.validarDatos(this.password);\n      let verificaPass = await this.verificarPasswordActual();\n      if (verificaPass !== true) this.mensajesErrores.push(\"La contraseña actual ingresada es incorrecta\");\n      if (this.password.passwordNueva !== this.password.passwordRepetida) this.mensajesErrores.push(\"La contraseña repetida no coincide con la nueva\");\n      let passwordValida = this.validarPassword(this.password.passwordNueva);\n      if (!passwordValida) this.mensajesErrores.push(\"La contraseña nueva debe ser válida\");\n      if (this.mensajesErrores.length > 0) return;\n      this.$buefy.dialog.confirm({\n        message: '¿Seguro que deseas cambiar la contraseña?',\n        confirmText: 'Sí, cambiar',\n        cancelText: 'Cancelar',\n        onConfirm: async () => {\n          this.cargando = true;\n          let resultado = apiRequest({\n            method: \"post\",\n            path: 'users/change-password',\n            data: {\n              userId: this.$route.params.id,\n              newPassword: this.password.passwordRepetida\n            }\n          });\n          if (resultado) {\n            this.$buefy.toast.open('Contraseña actualizada');\n            this.cargando = false;\n          }\n          console.log(resultado);\n        }\n      });\n    },\n    async verificarPasswordActual() {\n      const resp = await apiRequest({\n        method: 'POST',\n        path: 'users/verify-password',\n        data: {\n          password: this.password.passwordActual,\n          userId: this.$route.params.id\n        }\n      });\n      return resp.data;\n    },\n    validarPassword(password) {\n      var re = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/;\n      return re.test(password);\n    }\n  }\n};","map":{"version":3,"names":["Utiles","ErroresComponent","apiRequest","name","components","data","password","passwordActual","passwordNueva","passwordRepetida","mensajesErrores","cargando","methods","registrar","validarDatos","verificaPass","verificarPasswordActual","push","passwordValida","validarPassword","length","$buefy","dialog","confirm","message","confirmText","cancelText","onConfirm","resultado","method","path","userId","$route","params","id","newPassword","toast","open","console","log","resp","re","test"],"sources":["src/components/Usuarios/CambiarPassword.vue"],"sourcesContent":["<template>\r\n    <section>\r\n        <h1 class=\"title is-1\">Cambiar contraseña</h1>\r\n        <b-breadcrumb\r\n            align=\"is-left\"\r\n        >\r\n            <b-breadcrumb-item tag='router-link' to=\"/\">Inicio</b-breadcrumb-item>\r\n            <b-breadcrumb-item tag='router-link' to=\"/usuarios\">Usuarios</b-breadcrumb-item>\r\n            <b-breadcrumb-item active>Cambiar contraseña</b-breadcrumb-item>\r\n        </b-breadcrumb>\r\n        <b-field label=\"Escribe la contraseña actual\">\r\n            <b-input type=\"password\"\r\n            placeholder=\"Contraseña actual\"\r\n            password-reveal\r\n            v-model=\"password.passwordActual\">\r\n        </b-input>\r\n    </b-field>\r\n    <b-field label=\"Escribe la contraseña nueva\" message=\"Al menos un número, Al menos una mayúscula, Al menos una minúscula, Mínimo 8 caracteres\">\r\n        <b-input type=\"password\"\r\n        placeholder=\"Contraseña nueva\"\r\n        password-reveal\r\n        v-model=\"password.passwordNueva\">\r\n        </b-input>\r\n    </b-field>\r\n    <b-field label=\"Repite la nueva contraseña\">\r\n        <b-input type=\"password\"\r\n        placeholder=\"Repite nueva contraseña\"\r\n        password-reveal\r\n        v-model=\"password.passwordRepetida\">\r\n    </b-input>\r\n    </b-field>\r\n    <div class=\"buttons has-text-centered\">\r\n        <b-button type=\"is-primary\" size=\"is-large\" icon-left=\"check\" @click=\"registrar\">Cambiar contraseña</b-button>\r\n        <b-button type=\"is-dark\" size=\"is-large\" icon-left=\"cancel\" tag=\"router-link\" to=\"/usuarios\">Cancelar</b-button>\r\n    </div>\r\n    <errores-component :errores=\"mensajesErrores\" v-if=\"mensajesErrores.length > 0\" />\r\n    <b-loading :is-full-page=\"true\" v-model=\"cargando\" :can-cancel=\"false\"></b-loading>\r\n</section>\r\n</template>\r\n<script>\r\n    import Utiles from '../../Servicios/Utiles'\r\n    // import AyudanteSesion from '../../Servicios/AyudanteSesion'\r\n    // import HttpService from '../../Servicios/HttpService'\r\n    import ErroresComponent from '../Extras/ErroresComponent'\r\nimport apiRequest from '../../Servicios/HttpService';\r\n\r\n    export default {\r\n        name: \"CambiarPassword\",\r\n        components: { ErroresComponent },\r\n\r\n        data:()=>({\r\n            password: {\r\n                passwordActual: \"\",\r\n                passwordNueva: \"\",\r\n                passwordRepetida: \"\",\r\n                \r\n            },\r\n            mensajesErrores: [],\r\n            cargando: false\r\n        }),\r\n\r\n        methods: {\r\n            async registrar(){\r\n                this.mensajesErrores = []\r\n                this.mensajesErrores = Utiles.validarDatos(this.password)\r\n                let verificaPass = await this.verificarPasswordActual()\r\n                 \r\n                if(verificaPass !== true) this.mensajesErrores.push(\"La contraseña actual ingresada es incorrecta\")\r\n               \r\n                    if(this.password.passwordNueva !== this.password.passwordRepetida) this.mensajesErrores.push(\"La contraseña repetida no coincide con la nueva\")\r\n                        let passwordValida = this.validarPassword(this.password.passwordNueva)\r\n                    if(!passwordValida) this.mensajesErrores.push(\"La contraseña nueva debe ser válida\")\r\n                  \r\n                        if(this.mensajesErrores.length > 0) return\r\n\r\n                            this.$buefy.dialog.confirm({\r\n                                message: '¿Seguro que deseas cambiar la contraseña?',\r\n                                confirmText: 'Sí, cambiar',\r\n                                cancelText: 'Cancelar',\r\n                                onConfirm: async() => {\r\n                                    this.cargando = true\r\n                                   let resultado = apiRequest({\r\n                                        method: \"post\", \r\n                                        path: 'users/change-password',\r\n                                        data: {\r\n                                            userId: this.$route.params.id,\r\n                                            newPassword: this.password.passwordRepetida\r\n                                        }\r\n                                    })\r\n                                    if(resultado){\r\n                                        this.$buefy.toast.open('Contraseña actualizada')\r\n                                        this.cargando = false\r\n                                    }\r\n                                    console.log(resultado)\r\n                                    \r\n                                }\r\n                            })\r\n\r\n                    },\r\n\r\n                    async verificarPasswordActual(){\r\n\r\n\r\n                     const resp=  await apiRequest({\r\n                            method: 'POST', \r\n                            path: 'users/verify-password',\r\n                            data: {\r\n                               password: this.password.passwordActual,\r\n                               userId: this.$route.params.id\r\n                            }\r\n                        }\r\n                        )\r\n                        return resp.data\r\n                    },\r\n\r\n                    validarPassword (password) {\r\n                        var re = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/;\r\n                        return re.test(password);\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        </script>"],"mappings":";AAwCA,OAAAA,MAAA;AACA;AACA;AACA,OAAAC,gBAAA;AACA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAH;EAAA;EAEAI,IAAA,EAAAA,CAAA;IACAC,QAAA;MACAC,cAAA;MACAC,aAAA;MACAC,gBAAA;IAEA;IACAC,eAAA;IACAC,QAAA;EACA;EAEAC,OAAA;IACA,MAAAC,UAAA;MACA,KAAAH,eAAA;MACA,KAAAA,eAAA,GAAAV,MAAA,CAAAc,YAAA,MAAAR,QAAA;MACA,IAAAS,YAAA,cAAAC,uBAAA;MAEA,IAAAD,YAAA,gBAAAL,eAAA,CAAAO,IAAA;MAEA,SAAAX,QAAA,CAAAE,aAAA,UAAAF,QAAA,CAAAG,gBAAA,OAAAC,eAAA,CAAAO,IAAA;MACA,IAAAC,cAAA,QAAAC,eAAA,MAAAb,QAAA,CAAAE,aAAA;MACA,KAAAU,cAAA,OAAAR,eAAA,CAAAO,IAAA;MAEA,SAAAP,eAAA,CAAAU,MAAA;MAEA,KAAAC,MAAA,CAAAC,MAAA,CAAAC,OAAA;QACAC,OAAA;QACAC,WAAA;QACAC,UAAA;QACAC,SAAA,QAAAA,CAAA;UACA,KAAAhB,QAAA;UACA,IAAAiB,SAAA,GAAA1B,UAAA;YACA2B,MAAA;YACAC,IAAA;YACAzB,IAAA;cACA0B,MAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;cACAC,WAAA,OAAA7B,QAAA,CAAAG;YACA;UACA;UACA,IAAAmB,SAAA;YACA,KAAAP,MAAA,CAAAe,KAAA,CAAAC,IAAA;YACA,KAAA1B,QAAA;UACA;UACA2B,OAAA,CAAAC,GAAA,CAAAX,SAAA;QAEA;MACA;IAEA;IAEA,MAAAZ,wBAAA;MAGA,MAAAwB,IAAA,SAAAtC,UAAA;QACA2B,MAAA;QACAC,IAAA;QACAzB,IAAA;UACAC,QAAA,OAAAA,QAAA,CAAAC,cAAA;UACAwB,MAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAC;QACA;MACA,CACA;MACA,OAAAM,IAAA,CAAAnC,IAAA;IACA;IAEAc,gBAAAb,QAAA;MACA,IAAAmC,EAAA;MACA,OAAAA,EAAA,CAAAC,IAAA,CAAApC,QAAA;IACA;EAGA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}