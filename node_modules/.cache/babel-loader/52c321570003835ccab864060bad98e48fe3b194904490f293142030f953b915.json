{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport apiRequest from '@/Servicios/HttpService';\nexport default {\n  name: 'GestionEmpleados',\n  data() {\n    return {\n      activeTab: 'lista',\n      // Tab activo por defecto\n      empleados: [],\n      usuarios: [],\n      nuevoEmpleado: {\n        userId: '',\n        position: '',\n        salary: null\n      },\n      nuevoPago: {\n        employeeId: '',\n        amount: null\n      },\n      cargando: {\n        lista: false,\n        creando: false,\n        pagando: false\n      },\n      errores: {\n        position: '',\n        salary: '',\n        amount_pago: ''\n      },\n      paginaActual: 1,\n      porPagina: 5,\n      historialPagos: {\n        payments: [],\n        totalPayments: 0\n      },\n      filtroPagos: {\n        employeeId: '',\n        month: '',\n        year: new Date().getFullYear()\n      },\n      cargandoPagos: false,\n      paginaActualPagos: 1,\n      pagosPorPagina: 5\n    };\n  },\n  computed: {\n    empleadosPaginados() {\n      const inicio = (this.paginaActual - 1) * this.porPagina;\n      const fin = inicio + this.porPagina;\n      return this.empleados.slice(inicio, fin);\n    },\n    pagosPaginados() {\n      const inicio = (this.paginaActualPagos - 1) * this.pagosPorPagina;\n      const fin = inicio + this.pagosPorPagina;\n      return this.historialPagos.payments.slice(inicio, fin);\n    },\n    pagoRealizadoEsteMes() {\n      if (!this.nuevoPago.employeeId || !this.historialPagos.payments.length) return false;\n      const empleadoSeleccionado = this.empleados.find(emp => emp.id === this.nuevoPago.employeeId);\n      if (!empleadoSeleccionado) return false;\n      const hoy = new Date();\n      const mesActual = hoy.getMonth() + 1;\n      const anioActual = hoy.getFullYear();\n      const pagosMesActual = this.historialPagos.payments.filter(pago => {\n        const fechaPago = new Date(pago.paymentDate);\n        return fechaPago.getMonth() + 1 === mesActual && fechaPago.getFullYear() === anioActual;\n      });\n      const totalPagadoMesActual = pagosMesActual.reduce((total, pago) => total + parseFloat(pago.amount), 0);\n      return totalPagadoMesActual >= empleadoSeleccionado.salary;\n    }\n  },\n  mounted() {\n    this.cargarEmpleados();\n    this.cargarUsuarios();\n  },\n  watch: {\n    'nuevoPago.employeeId': function (newVal) {\n      if (newVal) {\n        this.filtroPagos.employeeId = newVal;\n        this.consultarPagos();\n      }\n    },\n    // Añadimos un watcher para el cambio de tab\n    activeTab: function (newTab) {\n      // Si cambiamos al tab de historial y hay un empleado seleccionado, consultamos sus pagos\n      if (newTab === 'historial' && this.filtroPagos.employeeId) {\n        this.consultarPagos();\n      }\n      // Si cambiamos al tab de lista, nos aseguramos de tener la lista actualizada\n      if (newTab === 'lista') {\n        this.cargarEmpleados();\n      }\n    }\n  },\n  methods: {\n    formatNumber(value) {\n      if (value === null || value === undefined) return '0.00';\n      const num = typeof value === 'string' ? parseFloat(value) : Number(value);\n      return isNaN(num) ? '0.00' : num.toLocaleString('es-MX', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    },\n    async cargarEmpleados() {\n      this.cargando.lista = true;\n      try {\n        const response = await apiRequest({\n          method: 'GET',\n          path: 'employees'\n        });\n        if (response?.data) {\n          this.empleados = Array.isArray(response.data) ? response.data : [];\n        }\n      } catch (error) {\n        console.error('Error al cargar empleados:', error);\n        this.mostrarError('Error al cargar la lista de empleados');\n      } finally {\n        this.cargando.lista = false;\n      }\n    },\n    async cargarUsuarios() {\n      try {\n        const response = await apiRequest({\n          method: 'GET',\n          path: 'users'\n        });\n        if (response?.data) {\n          this.usuarios = Array.isArray(response.data) ? response.data : [];\n        }\n      } catch (error) {\n        console.error('Error al cargar usuarios:', error);\n        this.mostrarError('Error al cargar la lista de usuarios');\n      }\n    },\n    async registrarEmpleado() {\n      // Resetear errores\n      this.errores = {\n        position: '',\n        salary: ''\n      };\n\n      // Validaciones básicas\n      if (!this.nuevoEmpleado.position.trim()) {\n        this.errores.position = 'El cargo es requerido';\n        return;\n      }\n      if (!this.nuevoEmpleado.salary || this.nuevoEmpleado.salary <= 0) {\n        this.errores.salary = 'El salario debe ser mayor a 0';\n        return;\n      }\n      this.cargando.creando = true;\n      try {\n        await apiRequest({\n          method: 'POST',\n          path: 'employees',\n          data: this.nuevoEmpleado\n        });\n\n        // Limpiar formulario\n        this.nuevoEmpleado = {\n          userId: '',\n          position: '',\n          salary: null\n        };\n\n        // Mostrar mensaje de éxito\n        this.$buefy.toast.open({\n          message: 'Empleado registrado exitosamente',\n          type: 'is-success'\n        });\n\n        // Recargar lista de empleados\n        await this.cargarEmpleados();\n\n        // Cambiar al tab de lista para mostrar el nuevo empleado\n        this.activeTab = 'lista';\n      } catch (error) {\n        console.error('Error al registrar empleado:', error);\n        if (error.response?.status === 400) {\n          this.mostrarError('Datos inválidos. Por favor, verifique la información');\n        } else {\n          this.mostrarError('Error al registrar el empleado');\n        }\n      } finally {\n        this.cargando.creando = false;\n      }\n    },\n    async registrarPago() {\n      // Resetear errores\n      this.errores.amount_pago = '';\n\n      // Validaciones básicas\n      if (!this.nuevoPago.amount || this.nuevoPago.amount <= 0) {\n        this.errores.amount_pago = 'El monto debe ser mayor a 0';\n        return;\n      }\n\n      // Obtener el empleado seleccionado\n      const empleadoSeleccionado = this.empleados.find(emp => emp.id === this.nuevoPago.employeeId);\n      if (!empleadoSeleccionado) {\n        this.errores.amount_pago = 'Empleado no encontrado';\n        return;\n      }\n\n      // Calcular el total de pagos del mes actual\n      const fechaActual = new Date();\n      const mesActual = fechaActual.getMonth() + 1;\n      const anioActual = fechaActual.getFullYear();\n      const pagosMesActual = this.historialPagos.payments.filter(pago => {\n        const fechaPago = new Date(pago.paymentDate);\n        return fechaPago.getMonth() + 1 === mesActual && fechaPago.getFullYear() === anioActual;\n      });\n      const totalPagadoMesActual = pagosMesActual.reduce((total, pago) => total + parseFloat(pago.amount), 0);\n      const nuevoTotalPagado = totalPagadoMesActual + parseFloat(this.nuevoPago.amount);\n\n      // Verificar si el nuevo pago excede el salario mensual\n      if (nuevoTotalPagado > empleadoSeleccionado.salary) {\n        this.errores.amount_pago = `El pago total del mes no puede superar el salario de $${empleadoSeleccionado.salary}. Actualmente ya ha recibido $${totalPagadoMesActual}.`;\n        return;\n      }\n      this.cargando.pagando = true;\n      try {\n        await apiRequest({\n          method: 'POST',\n          path: 'employee-payments',\n          data: this.nuevoPago\n        });\n\n        // Limpiar formulario\n        this.nuevoPago = {\n          employeeId: '',\n          amount: null\n        };\n\n        // Mostrar mensaje de éxito\n        this.$buefy.toast.open({\n          message: 'Pago registrado exitosamente',\n          type: 'is-success'\n        });\n\n        // Recargar lista de empleados para actualizar datos\n        await this.cargarEmpleados();\n        // Actualizar el historial de pagos\n        await this.consultarPagos();\n\n        // Cambiar al tab de historial para mostrar el nuevo pago\n        this.activeTab = 'historial';\n      } catch (error) {\n        console.error('Error al registrar pago:', error);\n        if (error.response?.status === 400) {\n          this.errores.amount_pago = error.response.data.message || 'El pago no puede ser mayor al salario restante del mes';\n        } else if (error.response?.status === 404) {\n          this.mostrarError('Empleado no encontrado');\n        } else {\n          this.mostrarError('Error al registrar el pago');\n        }\n      } finally {\n        this.cargando.pagando = false;\n      }\n    },\n    async consultarPagos() {\n      if (!this.filtroPagos.employeeId) {\n        this.mostrarError('Seleccione un empleado');\n        return;\n      }\n      this.cargandoPagos = true;\n      try {\n        let url = `employee-payments/${this.filtroPagos.employeeId}`;\n        const queryParams = [];\n        if (this.filtroPagos.month) {\n          queryParams.push(`month=${this.filtroPagos.month}`);\n        }\n        if (this.filtroPagos.year) {\n          queryParams.push(`year=${this.filtroPagos.year}`);\n        }\n        if (queryParams.length > 0) {\n          url += `?${queryParams.join('&')}`;\n        }\n        const response = await apiRequest({\n          method: 'GET',\n          path: url\n        });\n        this.historialPagos = response?.data || {\n          payments: [],\n          totalPayments: 0\n        };\n      } catch (error) {\n        console.error('Error al consultar pagos:', error);\n        if (error.response?.status === 404) {\n          this.mostrarError('Empleado no encontrado');\n        } else {\n          this.mostrarError('Error al consultar los pagos');\n        }\n        this.historialPagos = {\n          payments: [],\n          totalPayments: 0\n        };\n      } finally {\n        this.cargandoPagos = false;\n      }\n    },\n    mostrarError(mensaje) {\n      this.$buefy.toast.open({\n        message: mensaje,\n        type: 'is-danger',\n        duration: 5000\n      });\n    },\n    actualizarHistorialPagosEmpleadoSeleccionado() {\n      if (this.nuevoPago.employeeId) {\n        this.consultarPagos();\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","name","data","activeTab","empleados","usuarios","nuevoEmpleado","userId","position","salary","nuevoPago","employeeId","amount","cargando","lista","creando","pagando","errores","amount_pago","paginaActual","porPagina","historialPagos","payments","totalPayments","filtroPagos","month","year","Date","getFullYear","cargandoPagos","paginaActualPagos","pagosPorPagina","computed","empleadosPaginados","inicio","fin","slice","pagosPaginados","pagoRealizadoEsteMes","length","empleadoSeleccionado","find","emp","id","hoy","mesActual","getMonth","anioActual","pagosMesActual","filter","pago","fechaPago","paymentDate","totalPagadoMesActual","reduce","total","parseFloat","mounted","cargarEmpleados","cargarUsuarios","watch","nuevoPago.employeeId","newVal","consultarPagos","newTab","methods","formatNumber","value","undefined","num","Number","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatDate","dateString","date","day","getDate","toString","padStart","response","method","path","Array","isArray","error","console","mostrarError","registrarEmpleado","trim","$buefy","toast","open","message","type","status","registrarPago","fechaActual","nuevoTotalPagado","url","queryParams","push","join","mensaje","duration","actualizarHistorialPagosEmpleadoSeleccionado"],"sources":["src/components/Empleados/Empleados.vue"],"sourcesContent":["<template>\r\n  <div class=\"employees-management\">\r\n    <!-- Tabs de navegación -->\r\n    <div class=\"tabs is-boxed mb-4\">\r\n      <ul>\r\n        \r\n        <li :class=\"{ 'is-active': activeTab === 'nuevo' }\">\r\n          <a @click=\"activeTab = 'nuevo'\">\r\n            <span class=\"icon is-small\"><b-icon icon=\"account-plus\"></b-icon></span>\r\n            <span>Registrar Nuevo Empleado</span>\r\n          </a>\r\n        </li>\r\n        <li :class=\"{ 'is-active': activeTab === 'pago' }\">\r\n          <a @click=\"activeTab = 'pago'\">\r\n            <span class=\"icon is-small\"><b-icon icon=\"cash\"></b-icon></span>\r\n            <span>Registrar Pago</span>\r\n          </a>\r\n        </li>\r\n        <li :class=\"{ 'is-active': activeTab === 'historial' }\">\r\n          <a @click=\"activeTab = 'historial'\">\r\n            <span class=\"icon is-small\"><b-icon icon=\"cash-multiple\"></b-icon></span>\r\n            <span>Historial de Pagos</span>\r\n          </a>\r\n        </li>\r\n        <li :class=\"{ 'is-active': activeTab === 'lista' }\">\r\n          <a @click=\"activeTab = 'lista'\">\r\n            <span class=\"icon is-small\"><b-icon icon=\"account-group\"></b-icon></span>\r\n            <span>Lista de Empleados</span>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- Tab: Lista de Empleados -->\r\n    <div v-if=\"activeTab === 'lista'\" class=\"card\">\r\n      <header class=\"card-header\">\r\n        <p class=\"card-header-title\">\r\n          <b-icon icon=\"account-group\" class=\"is-primary-icon\"></b-icon>\r\n          Lista de Empleados\r\n        </p>\r\n      </header>\r\n      <div class=\"card-content\">\r\n        <b-table :data=\"empleadosPaginados\"\r\n                 :loading=\"cargando.lista\"\r\n                 :striped=\"true\"\r\n                 :hoverable=\"true\">\r\n\r\n          <b-table-column field=\"user.name\" label=\"Nombre\" v-slot=\"props\">\r\n            {{ props.row.user ? props.row.user.name : 'N/A' }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"position\" label=\"Cargo\" v-slot=\"props\">\r\n            {{ props.row.position }}\r\n          </b-table-column>\r\n\r\n          <b-table-column field=\"salary\" label=\"Salario\" numeric v-slot=\"props\">\r\n            ${{ formatNumber(props.row.salary) }}\r\n          </b-table-column>\r\n\r\n          <template #empty>\r\n            <div class=\"has-text-centered\">No hay empleados registrados</div>\r\n          </template>\r\n        </b-table>\r\n\r\n        <b-pagination\r\n          v-model=\"paginaActual\"\r\n          :total=\"empleados.length\"\r\n          :per-page=\"porPagina\"\r\n          :range-before=\"3\"\r\n          :range-after=\"3\"\r\n          order=\"is-centered\"\r\n          aria-next-label=\"Página siguiente\"\r\n          aria-previous-label=\"Página anterior\"\r\n          aria-page-label=\"Página\"\r\n          aria-current-label=\"Página actual\">\r\n        </b-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Tab: Registrar Nuevo Empleado -->\r\n    <div v-if=\"activeTab === 'nuevo'\" class=\"card\">\r\n      <header class=\"card-header\">\r\n        <p class=\"card-header-title\">\r\n          <b-icon icon=\"account-plus\" class=\"is-primary-icon\"></b-icon>\r\n          Registrar Nuevo Empleado\r\n        </p>\r\n      </header>\r\n      <div class=\"card-content\">\r\n        <form @submit.prevent=\"registrarEmpleado\">\r\n          <div class=\"field\">\r\n            <b-field label=\"Usuario\">\r\n              <b-select v-model=\"nuevoEmpleado.userId\" \r\n                        placeholder=\"Seleccione un usuario\"\r\n                        expanded\r\n                        required>\r\n                <option v-for=\"usuario in usuarios\" \r\n                        :key=\"usuario.id\" \r\n                        :value=\"usuario.id\">\r\n                  {{ usuario.name }}\r\n                </option>\r\n              </b-select>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div class=\"field\">\r\n            <b-field label=\"Cargo\"\r\n                     :type=\"{ 'is-danger': errores.position }\"\r\n                     :message=\"errores.position\">\r\n              <b-input v-model=\"nuevoEmpleado.position\"\r\n                       placeholder=\"Ej: Desarrollador\"\r\n                       required>\r\n              </b-input>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div class=\"field\">\r\n            <b-field label=\"Salario\"\r\n                     :type=\"{ 'is-danger': errores.salary }\"\r\n                     :message=\"errores.salary\">\r\n              <b-input v-model.number=\"nuevoEmpleado.salary\"\r\n                       type=\"number\"\r\n                       step=\"0.01\"\r\n                       min=\"0\"\r\n                       placeholder=\"0.00\"\r\n                       required>\r\n              </b-input>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div class=\"field\">\r\n            <div class=\"control\">\r\n              <b-button type=\"is-primary\"\r\n                        native-type=\"submit\"\r\n                        :loading=\"cargando.creando\"\r\n                        expanded>\r\n                Registrar Empleado\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Tab: Registrar Pago a Empleado -->\r\n    <div v-if=\"activeTab === 'pago'\" class=\"card\">\r\n      <header class=\"card-header\">\r\n        <p class=\"card-header-title\">\r\n          <b-icon icon=\"cash\" class=\"is-primary-icon\"></b-icon>\r\n          Registrar Pago a Empleado\r\n        </p>\r\n      </header>\r\n      <div class=\"card-content\">\r\n        <form @submit.prevent=\"registrarPago\">\r\n          <div class=\"field\">\r\n            <b-field label=\"Empleado\">\r\n              <b-select v-model=\"nuevoPago.employeeId\" \r\n                       placeholder=\"Seleccione un empleado\"\r\n                       expanded\r\n                       required>\r\n                <option v-for=\"empleado in empleados\" \r\n                        :key=\"empleado.id\" \r\n                        :value=\"empleado.id\">\r\n                  {{ empleado.user ? empleado.user.name : 'N/A' }} - {{ empleado.position }}\r\n                </option>\r\n              </b-select>\r\n            </b-field>\r\n        </div>\r\n\r\n          <div class=\"field\">\r\n            <b-field label=\"Monto\"\r\n                     :type=\"{ 'is-danger': errores.amount_pago }\"\r\n                     :message=\"errores.amount_pago\">\r\n              <b-input v-model.number=\"nuevoPago.amount\"\r\n                       type=\"number\"\r\n                       step=\"0.01\"\r\n                       min=\"0\"\r\n                       placeholder=\"0.00\"\r\n                       required>\r\n              </b-input>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div v-if=\"pagoRealizadoEsteMes\" class=\"notification is-warning mb-4\">\r\n            Se ha alcanzado o superado el salario completo para este empleado en el mes actual.\r\n          </div>\r\n          <div class=\"field\">\r\n            <div class=\"control\">\r\n              <b-button type=\"is-primary\"\r\n                        native-type=\"submit\"\r\n                        :loading=\"cargando.pagando\"\r\n                        expanded>\r\n                Registrar Pago\r\n              </b-button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Tab: Historial de Pagos -->\r\n    <div v-if=\"activeTab === 'historial'\" class=\"card\">\r\n      <header class=\"card-header\">\r\n        <p class=\"card-header-title\">\r\n          <b-icon icon=\"cash-multiple\" class=\"is-primary-icon\"></b-icon>\r\n          Historial de Pagos\r\n        </p>\r\n      </header>\r\n      <div class=\"card-content\">\r\n        <div class=\"is-flex is-align-items-end\" :style=\"{ gap: '1rem' }\">\r\n          <div class=\"control\">\r\n            <b-field label=\"Empleado\">\r\n              <b-select v-model=\"filtroPagos.employeeId\" \r\n                       placeholder=\"Seleccione un empleado\"\r\n                       expanded>\r\n                <option v-for=\"empleado in empleados\" \r\n                        :key=\"empleado.id\" \r\n                        :value=\"empleado.id\">\r\n                  {{ empleado.user ? empleado.user.name : 'N/A' }} - {{ empleado.position }}\r\n                </option>\r\n              </b-select>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div class=\"control\">\r\n            <b-field label=\"Mes\">\r\n              <b-select v-model=\"filtroPagos.month\" expanded>\r\n                <option value=\"\">Todos los meses</option>\r\n                <option v-for=\"(mes, index) in [\r\n                  'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\r\n                  'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\r\n                ]\" :key=\"index\" :value=\"index + 1\">\r\n                  {{ mes }}\r\n                </option>\r\n              </b-select>\r\n            </b-field>\r\n          </div>\r\n\r\n          <div class=\"control\">\r\n            <b-field label=\"Año\">\r\n              <b-input v-model=\"filtroPagos.year\" \r\n                       type=\"number\" \r\n                       min=\"2000\"\r\n                       :max=\"new Date().getFullYear() + 1\">\r\n              </b-input>\r\n            </b-field>\r\n          </div>\r\n\r\n          <b-button type=\"is-primary\"\r\n                    @click=\"consultarPagos\"\r\n                    :loading=\"cargandoPagos\">\r\n            Consultar\r\n          </b-button>\r\n        </div>\r\n\r\n        <div v-if=\"historialPagos.payments.length > 0\" class=\"mb-4\">\r\n          <div class=\"notification is-info\">\r\n            <strong>Total de pagos:</strong> ${{ formatNumber(historialPagos.totalPayments) }}\r\n          </div>\r\n\r\n          <b-table :data=\"pagosPaginados\"\r\n                   :loading=\"cargandoPagos\"\r\n                   :striped=\"true\"\r\n                   :hoverable=\"true\">\r\n            \r\n            <b-table-column field=\"id\" label=\"ID\" v-slot=\"props\">\r\n              {{ props.row.id }}\r\n            </b-table-column>\r\n\r\n            <b-table-column field=\"amount\" label=\"Monto\" numeric v-slot=\"props\">\r\n              ${{ formatNumber(props.row.amount) }}\r\n            </b-table-column>\r\n\r\n            <b-table-column field=\"paymentDate\" label=\"Fecha\" v-slot=\"props\">\r\n              {{ formatDate(props.row.paymentDate) }}\r\n            </b-table-column>\r\n\r\n            <template #empty>\r\n              <div class=\"has-text-centered\">No hay pagos registrados</div>\r\n            </template>\r\n          </b-table>\r\n\r\n          <b-pagination\r\n            v-model=\"paginaActualPagos\"\r\n            :total=\"historialPagos.payments.length\"\r\n            :per-page=\"pagosPorPagina\"\r\n            :range-before=\"3\"\r\n            :range-after=\"3\"\r\n            order=\"is-centered\"\r\n            aria-next-label=\"Página siguiente\"\r\n            aria-previous-label=\"Página anterior\"\r\n            aria-page-label=\"Página\"\r\n            aria-current-label=\"Página actual\">\r\n          </b-pagination>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport apiRequest from '@/Servicios/HttpService'\r\n\r\nexport default {\r\n  name: 'GestionEmpleados',\r\n\r\n  data() {\r\n    return {\r\n      activeTab: 'lista', // Tab activo por defecto\r\n      empleados: [],\r\n      usuarios: [],\r\n      nuevoEmpleado: {\r\n        userId: '',\r\n        position: '',\r\n        salary: null\r\n      },\r\n      nuevoPago: {\r\n        employeeId: '',\r\n        amount: null\r\n      },\r\n      cargando: {\r\n        lista: false,\r\n        creando: false,\r\n        pagando: false\r\n      },\r\n      errores: {\r\n        position: '',\r\n        salary: '',\r\n        amount_pago: ''\r\n      },\r\n      paginaActual: 1,\r\n      porPagina: 5,\r\n      historialPagos: {\r\n        payments: [],\r\n        totalPayments: 0\r\n      },\r\n      filtroPagos: {\r\n        employeeId: '',\r\n        month: '',\r\n        year: new Date().getFullYear()\r\n      },\r\n      cargandoPagos: false,\r\n      paginaActualPagos: 1,\r\n      pagosPorPagina: 5,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    empleadosPaginados() {\r\n      const inicio = (this.paginaActual - 1) * this.porPagina\r\n      const fin = inicio + this.porPagina\r\n      return this.empleados.slice(inicio, fin)\r\n    },\r\n    pagosPaginados() {\r\n      const inicio = (this.paginaActualPagos - 1) * this.pagosPorPagina;\r\n      const fin = inicio + this.pagosPorPagina;\r\n      return this.historialPagos.payments.slice(inicio, fin);\r\n    },\r\n    pagoRealizadoEsteMes() {\r\n      if (!this.nuevoPago.employeeId || !this.historialPagos.payments.length) return false;\r\n      const empleadoSeleccionado = this.empleados.find(emp => emp.id === this.nuevoPago.employeeId);\r\n      if (!empleadoSeleccionado) return false;\r\n\r\n      const hoy = new Date();\r\n      const mesActual = hoy.getMonth() + 1;\r\n      const anioActual = hoy.getFullYear();\r\n      \r\n      const pagosMesActual = this.historialPagos.payments.filter(pago => {\r\n        const fechaPago = new Date(pago.paymentDate);\r\n        return fechaPago.getMonth() + 1 === mesActual && fechaPago.getFullYear() === anioActual;\r\n      });\r\n\r\n      const totalPagadoMesActual = pagosMesActual.reduce((total, pago) => total + parseFloat(pago.amount), 0);\r\n      \r\n      return totalPagadoMesActual >= empleadoSeleccionado.salary;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.cargarEmpleados()\r\n    this.cargarUsuarios()\r\n  },\r\n\r\n  watch: {\r\n    'nuevoPago.employeeId': function(newVal) {\r\n      if (newVal) {\r\n        this.filtroPagos.employeeId = newVal;\r\n        this.consultarPagos();\r\n      }\r\n    },\r\n    // Añadimos un watcher para el cambio de tab\r\n    activeTab: function(newTab) {\r\n      // Si cambiamos al tab de historial y hay un empleado seleccionado, consultamos sus pagos\r\n      if (newTab === 'historial' && this.filtroPagos.employeeId) {\r\n        this.consultarPagos();\r\n      }\r\n      // Si cambiamos al tab de lista, nos aseguramos de tener la lista actualizada\r\n      if (newTab === 'lista') {\r\n        this.cargarEmpleados();\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    formatNumber(value) {\r\n      if (value === null || value === undefined) return '0.00'\r\n      const num = typeof value === 'string' ? parseFloat(value) : Number(value)\r\n      return isNaN(num) ? '0.00' : num.toLocaleString('es-MX', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n      })\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    },\r\n\r\n    async cargarEmpleados() {\r\n      this.cargando.lista = true\r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: 'employees'\r\n        })\r\n        \r\n        if (response?.data) {\r\n          this.empleados = Array.isArray(response.data) ? response.data : []\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al cargar empleados:', error)\r\n        this.mostrarError('Error al cargar la lista de empleados')\r\n      } finally {\r\n        this.cargando.lista = false\r\n      }\r\n    },\r\n\r\n    async cargarUsuarios() {\r\n      try {\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: 'users'\r\n        })\r\n        \r\n        if (response?.data) {\r\n          this.usuarios = Array.isArray(response.data) ? response.data : []\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al cargar usuarios:', error)\r\n        this.mostrarError('Error al cargar la lista de usuarios')\r\n      }\r\n    },\r\n\r\n    async registrarEmpleado() {\r\n      // Resetear errores\r\n      this.errores = {\r\n        position: '',\r\n        salary: ''\r\n      }\r\n\r\n      // Validaciones básicas\r\n      if (!this.nuevoEmpleado.position.trim()) {\r\n        this.errores.position = 'El cargo es requerido'\r\n        return\r\n      }\r\n\r\n      if (!this.nuevoEmpleado.salary || this.nuevoEmpleado.salary <= 0) {\r\n        this.errores.salary = 'El salario debe ser mayor a 0'\r\n        return\r\n      }\r\n\r\n      this.cargando.creando = true\r\n      try {\r\n        await apiRequest({\r\n          method: 'POST',\r\n          path: 'employees',\r\n          data: this.nuevoEmpleado\r\n        })\r\n\r\n        // Limpiar formulario\r\n        this.nuevoEmpleado = {\r\n          userId: '',\r\n          position: '',\r\n          salary: null\r\n        }\r\n\r\n        // Mostrar mensaje de éxito\r\n        this.$buefy.toast.open({\r\n          message: 'Empleado registrado exitosamente',\r\n          type: 'is-success'\r\n        })\r\n\r\n        // Recargar lista de empleados\r\n        await this.cargarEmpleados()\r\n        \r\n        // Cambiar al tab de lista para mostrar el nuevo empleado\r\n        this.activeTab = 'lista'\r\n      } catch (error) {\r\n        console.error('Error al registrar empleado:', error)\r\n        \r\n        if (error.response?.status === 400) {\r\n          this.mostrarError('Datos inválidos. Por favor, verifique la información')\r\n        } else {\r\n          this.mostrarError('Error al registrar el empleado')\r\n        }\r\n      } finally {\r\n        this.cargando.creando = false\r\n      }\r\n    },\r\n\r\n    async registrarPago() {\r\n      // Resetear errores\r\n      this.errores.amount_pago = ''\r\n\r\n      // Validaciones básicas\r\n      if (!this.nuevoPago.amount || this.nuevoPago.amount <= 0) {\r\n        this.errores.amount_pago = 'El monto debe ser mayor a 0'\r\n        return\r\n      }\r\n\r\n      // Obtener el empleado seleccionado\r\n      const empleadoSeleccionado = this.empleados.find(emp => emp.id === this.nuevoPago.employeeId)\r\n      if (!empleadoSeleccionado) {\r\n        this.errores.amount_pago = 'Empleado no encontrado'\r\n        return\r\n      }\r\n\r\n      // Calcular el total de pagos del mes actual\r\n      const fechaActual = new Date();\r\n      const mesActual = fechaActual.getMonth() + 1;\r\n      const anioActual = fechaActual.getFullYear();\r\n      \r\n      const pagosMesActual = this.historialPagos.payments.filter(pago => {\r\n        const fechaPago = new Date(pago.paymentDate);\r\n        return fechaPago.getMonth() + 1 === mesActual && fechaPago.getFullYear() === anioActual;\r\n      });\r\n\r\n      const totalPagadoMesActual = pagosMesActual.reduce((total, pago) => total + parseFloat(pago.amount), 0);\r\n      const nuevoTotalPagado = totalPagadoMesActual + parseFloat(this.nuevoPago.amount);\r\n\r\n      // Verificar si el nuevo pago excede el salario mensual\r\n      if (nuevoTotalPagado > empleadoSeleccionado.salary) {\r\n        this.errores.amount_pago = `El pago total del mes no puede superar el salario de $${empleadoSeleccionado.salary}. Actualmente ya ha recibido $${totalPagadoMesActual}.`\r\n        return\r\n      }\r\n\r\n      this.cargando.pagando = true\r\n      try {\r\n        await apiRequest({\r\n          method: 'POST',\r\n          path: 'employee-payments',\r\n          data: this.nuevoPago\r\n        })\r\n\r\n        // Limpiar formulario\r\n        this.nuevoPago = {\r\n          employeeId: '',\r\n          amount: null\r\n        }\r\n\r\n        // Mostrar mensaje de éxito\r\n        this.$buefy.toast.open({\r\n          message: 'Pago registrado exitosamente',\r\n          type: 'is-success'\r\n        })\r\n\r\n        // Recargar lista de empleados para actualizar datos\r\n        await this.cargarEmpleados()\r\n        // Actualizar el historial de pagos\r\n        await this.consultarPagos()\r\n        \r\n        // Cambiar al tab de historial para mostrar el nuevo pago\r\n        this.activeTab = 'historial'\r\n      } catch (error) {\r\n        console.error('Error al registrar pago:', error)\r\n        \r\n        if (error.response?.status === 400) {\r\n          this.errores.amount_pago = error.response.data.message || 'El pago no puede ser mayor al salario restante del mes'\r\n        } else if (error.response?.status === 404) {\r\n          this.mostrarError('Empleado no encontrado')\r\n        } else {\r\n          this.mostrarError('Error al registrar el pago')\r\n        }\r\n      } finally {\r\n        this.cargando.pagando = false\r\n      }\r\n    },\r\n    \r\n    async consultarPagos() {\r\n      if (!this.filtroPagos.employeeId) {\r\n        this.mostrarError('Seleccione un empleado');\r\n        return;\r\n      }\r\n\r\n      this.cargandoPagos = true;\r\n      try {\r\n        let url = `employee-payments/${this.filtroPagos.employeeId}`;\r\n        const queryParams = [];\r\n        \r\n        if (this.filtroPagos.month) {\r\n          queryParams.push(`month=${this.filtroPagos.month}`);\r\n        }\r\n        if (this.filtroPagos.year) {\r\n          queryParams.push(`year=${this.filtroPagos.year}`);\r\n        }\r\n        \r\n        if (queryParams.length > 0) {\r\n          url += `?${queryParams.join('&')}`;\r\n        }\r\n\r\n        const response = await apiRequest({\r\n          method: 'GET',\r\n          path: url\r\n        });\r\n        \r\n        this.historialPagos = response?.data || { payments: [], totalPayments: 0 };\r\n      } catch (error) {\r\n        console.error('Error al consultar pagos:', error);\r\n        if (error.response?.status === 404) {\r\n          this.mostrarError('Empleado no encontrado');\r\n        } else {\r\n          this.mostrarError('Error al consultar los pagos');\r\n        }\r\n        this.historialPagos = { payments: [], totalPayments: 0 };\r\n      } finally {\r\n        this.cargandoPagos = false;\r\n      }\r\n    },\r\n\r\n    mostrarError(mensaje) {\r\n      this.$buefy.toast.open({\r\n        message: mensaje,\r\n        type: 'is-danger',\r\n        duration: 5000\r\n      })\r\n    },\r\n    \r\n    actualizarHistorialPagosEmpleadoSeleccionado() {\r\n      if (this.nuevoPago.employeeId) {\r\n        this.consultarPagos();\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.employees-management {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.card {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.card-header-title {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.card-header-title .icon {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.tabs {\r\n  margin-bottom: 1.5rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}