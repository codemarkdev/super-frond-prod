{"ast":null,"code":"export default {\n  props: {},\n  data() {\n    return {\n      displayValue: '',\n      numericValue: null,\n      touched: false\n    };\n  },\n  computed: {\n    isValidAmount() {\n      return this.numericValue !== null && this.numericValue >= 0 && !isNaN(this.numericValue);\n    }\n  },\n  methods: {\n    formatInput(event) {\n      this.touched = true;\n\n      // Obtener el valor actual del input\n      let value = event.target.value;\n\n      // Normalizar el valor: reemplazar múltiples espacios por uno solo\n      value = value.replace(/\\s+/g, ' ').trim();\n\n      // Convertir a valor numérico\n      // 1. Eliminar todos los espacios\n      // 2. Reemplazar comas por nada (para manejar separadores de miles)\n      // 3. Asegurar que solo hay un punto decimal\n      let numericString = value.replace(/\\s/g, '');\n      numericString = numericString.replace(/,/g, '');\n\n      // Manejar múltiples puntos decimales (quedarse solo con el primero)\n      if ((numericString.match(/\\./g) || []).length > 1) {\n        const parts = numericString.split('.');\n        numericString = parts[0] + '.' + parts.slice(1).join('');\n      }\n\n      // Convertir a número\n      this.numericValue = numericString ? parseFloat(numericString) : null;\n\n      // Emitir el valor numérico al componente padre\n      this.$emit('inputData', this.numericValue);\n\n      // No formatear mientras el usuario está escribiendo para no interferir\n      this.displayValue = value;\n    },\n    validateOnBlur() {\n      this.touched = true;\n\n      // Asegurar formato correcto al perder el foco\n      if (this.numericValue !== null && !isNaN(this.numericValue)) {\n        // Formatear con comas para miles y dos decimales\n        const formattedValue = this.formatNumberWithCommas(this.numericValue);\n        this.displayValue = formattedValue;\n      }\n    },\n    formatNumberWithCommas(number) {\n      // Convertir a string con 2 decimales fijos\n      const fixedNumber = number.toFixed(2);\n\n      // Separar parte entera y decimal\n      const parts = fixedNumber.split('.');\n\n      // Formatear parte entera con comas cada 3 dígitos\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n      // Reconstruir con parte decimal\n      return parts.join('.');\n    },\n    handleFocus(event) {\n      // Seleccionar todo el texto al hacer foco\n      event.target.select();\n    }\n  }\n};","map":{"version":3,"names":["props","data","displayValue","numericValue","touched","computed","isValidAmount","isNaN","methods","formatInput","event","value","target","replace","trim","numericString","match","length","parts","split","slice","join","parseFloat","$emit","validateOnBlur","formattedValue","formatNumberWithCommas","number","fixedNumber","toFixed","handleFocus","select"],"sources":["src/components/Caja/CashInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"field\">\r\n    <label class=\"label\">Efectivo en Mano</label>\r\n    <div class=\"control has-icons-left has-icons-right\">\r\n      <input \r\n        class=\"input is-medium\"\r\n        :class=\"{ 'is-danger': !isValidAmount && touched }\"\r\n        type=\"text\" \r\n        v-model=\"displayValue\"\r\n        placeholder=\"Ingrese el monto en efectivo\"\r\n        @input=\"formatInput\"\r\n        @blur=\"validateOnBlur\"\r\n        @focus=\"handleFocus\"\r\n      >\r\n      <span class=\"icon is-small is-left\">\r\n        <i class=\"mdi mdi-cash\"></i>\r\n      </span>\r\n      <span class=\"icon is-small is-right\" v-if=\"isValidAmount && touched\">\r\n        <i class=\"mdi mdi-check\"></i>\r\n      </span>\r\n    </div>\r\n    <p class=\"help is-danger\" v-if=\"!isValidAmount && touched\">\r\n      Por favor, ingrese un monto válido\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {}, \r\n  data() {\r\n    return {\r\n      displayValue: '',\r\n      numericValue: null,\r\n      touched: false\r\n    };\r\n  },\r\n  computed: {\r\n    isValidAmount() {\r\n      return this.numericValue !== null &&\r\n        this.numericValue >= 0 &&\r\n        !isNaN(this.numericValue);\r\n    }\r\n  },\r\n  methods: {\r\n    formatInput(event) {\r\n      this.touched = true;\r\n      \r\n      // Obtener el valor actual del input\r\n      let value = event.target.value;\r\n      \r\n      // Normalizar el valor: reemplazar múltiples espacios por uno solo\r\n      value = value.replace(/\\s+/g, ' ').trim();\r\n      \r\n      // Convertir a valor numérico\r\n      // 1. Eliminar todos los espacios\r\n      // 2. Reemplazar comas por nada (para manejar separadores de miles)\r\n      // 3. Asegurar que solo hay un punto decimal\r\n      let numericString = value.replace(/\\s/g, '');\r\n      numericString = numericString.replace(/,/g, '');\r\n      \r\n      // Manejar múltiples puntos decimales (quedarse solo con el primero)\r\n      if ((numericString.match(/\\./g) || []).length > 1) {\r\n        const parts = numericString.split('.');\r\n        numericString = parts[0] + '.' + parts.slice(1).join('');\r\n      }\r\n      \r\n      // Convertir a número\r\n      this.numericValue = numericString ? parseFloat(numericString) : null;\r\n      \r\n      // Emitir el valor numérico al componente padre\r\n      this.$emit('inputData', this.numericValue);\r\n      \r\n      // No formatear mientras el usuario está escribiendo para no interferir\r\n      this.displayValue = value;\r\n    },\r\n    \r\n    validateOnBlur() {\r\n      this.touched = true;\r\n      \r\n      // Asegurar formato correcto al perder el foco\r\n      if (this.numericValue !== null && !isNaN(this.numericValue)) {\r\n        // Formatear con comas para miles y dos decimales\r\n        const formattedValue = this.formatNumberWithCommas(this.numericValue);\r\n        this.displayValue = formattedValue;\r\n      }\r\n    },\r\n    \r\n    formatNumberWithCommas(number) {\r\n      // Convertir a string con 2 decimales fijos\r\n      const fixedNumber = number.toFixed(2);\r\n      \r\n      // Separar parte entera y decimal\r\n      const parts = fixedNumber.split('.');\r\n      \r\n      // Formatear parte entera con comas cada 3 dígitos\r\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n      \r\n      // Reconstruir con parte decimal\r\n      return parts.join('.');\r\n    },\r\n    \r\n    handleFocus(event) {\r\n      // Seleccionar todo el texto al hacer foco\r\n      event.target.select();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n"],"mappings":"AA4BA;EACAA,KAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,YAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,YAAAH,YAAA,aACA,KAAAA,YAAA,SACA,CAAAI,KAAA,MAAAJ,YAAA;IACA;EACA;EACAK,OAAA;IACAC,YAAAC,KAAA;MACA,KAAAN,OAAA;;MAEA;MACA,IAAAO,KAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAD,KAAA;;MAEA;MACAA,KAAA,GAAAA,KAAA,CAAAE,OAAA,cAAAC,IAAA;;MAEA;MACA;MACA;MACA;MACA,IAAAC,aAAA,GAAAJ,KAAA,CAAAE,OAAA;MACAE,aAAA,GAAAA,aAAA,CAAAF,OAAA;;MAEA;MACA,KAAAE,aAAA,CAAAC,KAAA,eAAAC,MAAA;QACA,MAAAC,KAAA,GAAAH,aAAA,CAAAI,KAAA;QACAJ,aAAA,GAAAG,KAAA,YAAAA,KAAA,CAAAE,KAAA,IAAAC,IAAA;MACA;;MAEA;MACA,KAAAlB,YAAA,GAAAY,aAAA,GAAAO,UAAA,CAAAP,aAAA;;MAEA;MACA,KAAAQ,KAAA,mBAAApB,YAAA;;MAEA;MACA,KAAAD,YAAA,GAAAS,KAAA;IACA;IAEAa,eAAA;MACA,KAAApB,OAAA;;MAEA;MACA,SAAAD,YAAA,cAAAI,KAAA,MAAAJ,YAAA;QACA;QACA,MAAAsB,cAAA,QAAAC,sBAAA,MAAAvB,YAAA;QACA,KAAAD,YAAA,GAAAuB,cAAA;MACA;IACA;IAEAC,uBAAAC,MAAA;MACA;MACA,MAAAC,WAAA,GAAAD,MAAA,CAAAE,OAAA;;MAEA;MACA,MAAAX,KAAA,GAAAU,WAAA,CAAAT,KAAA;;MAEA;MACAD,KAAA,MAAAA,KAAA,IAAAL,OAAA;;MAEA;MACA,OAAAK,KAAA,CAAAG,IAAA;IACA;IAEAS,YAAApB,KAAA;MACA;MACAA,KAAA,CAAAE,MAAA,CAAAmB,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}